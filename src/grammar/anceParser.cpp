
// Generated from ./src/grammar/ance.g4 by ANTLR 4.10.1

#include "anceVisitor.h"

#include "anceParser.h"

using namespace antlrcpp;

using namespace antlr4;

namespace
{

    struct AnceParserStaticData final {
        AnceParserStaticData(std::vector<std::string> ruleNames,
                             std::vector<std::string> literalNames,
                             std::vector<std::string> symbolicNames)
            : ruleNames(std::move(ruleNames))
            , literalNames(std::move(literalNames))
            , symbolicNames(std::move(symbolicNames))
            , vocabulary(this->literalNames, this->symbolicNames)
        {}

        AnceParserStaticData(const AnceParserStaticData&)            = delete;
        AnceParserStaticData(AnceParserStaticData&&)                 = delete;
        AnceParserStaticData& operator=(const AnceParserStaticData&) = delete;
        AnceParserStaticData& operator=(AnceParserStaticData&&)      = delete;

        std::vector<antlr4::dfa::DFA>       decisionToDFA;
        antlr4::atn::PredictionContextCache sharedContextCache;
        const std::vector<std::string>      ruleNames;
        const std::vector<std::string>      literalNames;
        const std::vector<std::string>      symbolicNames;
        const antlr4::dfa::Vocabulary       vocabulary;
        antlr4::atn::SerializedATNView      serializedATN;
        std::unique_ptr<antlr4::atn::ATN>   atn;
    };

    std::once_flag        anceParserOnceFlag;
    AnceParserStaticData* anceParserStaticData = nullptr;

    void anceParserInitialize()
    {
        assert(anceParserStaticData == nullptr);
        auto staticData =
            std::make_unique<AnceParserStaticData>(std::vector<std::string> {"file",
                                                                             "variableDeclaration",
                                                                             "function",
                                                                             "parameters",
                                                                             "parameter",
                                                                             "typeDefinition",
                                                                             "defineAlias",
                                                                             "structDefinition",
                                                                             "member",
                                                                             "accessModifier",
                                                                             "code",
                                                                             "block",
                                                                             "statement",
                                                                             "expressionStatement",
                                                                             "localVariableDefinition",
                                                                             "localReferenceDefinition",
                                                                             "dropStatement",
                                                                             "assignment",
                                                                             "assigner",
                                                                             "deleteStatement",
                                                                             "returnStatement",
                                                                             "assertStatement",
                                                                             "ifStatement",
                                                                             "whileStatement",
                                                                             "matchStatement",
                                                                             "matchCase",
                                                                             "expression",
                                                                             "binaryOperatorMultiplicative",
                                                                             "binaryOperatorAdditive",
                                                                             "binaryOperatorRelational",
                                                                             "binaryOperatorEquality",
                                                                             "independentExpression",
                                                                             "functionCall",
                                                                             "arguments",
                                                                             "variableAccess",
                                                                             "allocation",
                                                                             "allocator",
                                                                             "addressof",
                                                                             "bindRef",
                                                                             "sizeofType",
                                                                             "sizeofExpression",
                                                                             "matchExpression",
                                                                             "matchExpressionCase",
                                                                             "literalExpression",
                                                                             "stringLiteral",
                                                                             "byteLiteral",
                                                                             "integerLiteral",
                                                                             "normalInteger",
                                                                             "specialInteger",
                                                                             "floatingPointLiteral",
                                                                             "booleanLiteral",
                                                                             "sizeLiteral",
                                                                             "diffLiteral",
                                                                             "type",
                                                                             "integerType",
                                                                             "arrayType",
                                                                             "vectorType",
                                                                             "keywordType",
                                                                             "floatingPointType",
                                                                             "targetDependentType",
                                                                             "booleanType",
                                                                             "voidType",
                                                                             "customType"},
                                                   std::vector<std::string> {"",
                                                                             "':'",
                                                                             "'('",
                                                                             "')'",
                                                                             "'{'",
                                                                             "'}'",
                                                                             "'extern'",
                                                                             "','",
                                                                             "'define'",
                                                                             "'alias'",
                                                                             "'struct'",
                                                                             "'public'",
                                                                             "'private'",
                                                                             "'let'",
                                                                             "'drop'",
                                                                             "'<:'",
                                                                             "'<-'",
                                                                             "':='",
                                                                             "'delete'",
                                                                             "'return'",
                                                                             "'assert'",
                                                                             "'if'",
                                                                             "'then'",
                                                                             "'else'",
                                                                             "'while'",
                                                                             "'do'",
                                                                             "'match'",
                                                                             "'with'",
                                                                             "'|'",
                                                                             "'=>'",
                                                                             "'default'",
                                                                             "'.'",
                                                                             "'['",
                                                                             "']'",
                                                                             "'not'",
                                                                             "'and'",
                                                                             "'or'",
                                                                             "'*'",
                                                                             "'/'",
                                                                             "'%'",
                                                                             "'+'",
                                                                             "'-'",
                                                                             "'<'",
                                                                             "'<='",
                                                                             "'>'",
                                                                             "'>='",
                                                                             "'=='",
                                                                             "'!='",
                                                                             "'new'",
                                                                             "'dynamic'",
                                                                             "'automatic'",
                                                                             "'addressof'",
                                                                             "'ref'",
                                                                             "'to'",
                                                                             "'sizeof'",
                                                                             "'true'",
                                                                             "'false'",
                                                                             "'size'",
                                                                             "'diff'",
                                                                             "'&'",
                                                                             "'half'",
                                                                             "'single'",
                                                                             "'double'",
                                                                             "'quad'",
                                                                             "'uiptr'",
                                                                             "'bool'",
                                                                             "'void'",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "'[]'",
                                                                             "'const'",
                                                                             "",
                                                                             "';'"},
                                                   std::vector<std::string> {"",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "NATIVE_INTEGER_TYPE",
                                                                             "SIGNED_INTEGER",
                                                                             "HEX_INTEGER",
                                                                             "BIN_INTEGER",
                                                                             "OCT_INTEGER",
                                                                             "HALF",
                                                                             "SINGLE",
                                                                             "DOUBLE",
                                                                             "QUAD",
                                                                             "DECIMAL",
                                                                             "STRING",
                                                                             "BYTE",
                                                                             "INTEGER",
                                                                             "BUFFER",
                                                                             "CONST",
                                                                             "IDENTIFIER",
                                                                             "SEMICOLON",
                                                                             "WHITESPACE",
                                                                             "BLOCK_COMMENT",
                                                                             "LINE_COMMENT"});
        static const int32_t serializedATNSegment[] = {
            4,   1,   86,  619, 2,   0,   7,   0,   2,   1,   7,   1,   2,   2,   7,   2,   2,   3,   7,   3,   2,
            4,   7,   4,   2,   5,   7,   5,   2,   6,   7,   6,   2,   7,   7,   7,   2,   8,   7,   8,   2,   9,
            7,   9,   2,   10,  7,   10,  2,   11,  7,   11,  2,   12,  7,   12,  2,   13,  7,   13,  2,   14,  7,
            14,  2,   15,  7,   15,  2,   16,  7,   16,  2,   17,  7,   17,  2,   18,  7,   18,  2,   19,  7,   19,
            2,   20,  7,   20,  2,   21,  7,   21,  2,   22,  7,   22,  2,   23,  7,   23,  2,   24,  7,   24,  2,
            25,  7,   25,  2,   26,  7,   26,  2,   27,  7,   27,  2,   28,  7,   28,  2,   29,  7,   29,  2,   30,
            7,   30,  2,   31,  7,   31,  2,   32,  7,   32,  2,   33,  7,   33,  2,   34,  7,   34,  2,   35,  7,
            35,  2,   36,  7,   36,  2,   37,  7,   37,  2,   38,  7,   38,  2,   39,  7,   39,  2,   40,  7,   40,
            2,   41,  7,   41,  2,   42,  7,   42,  2,   43,  7,   43,  2,   44,  7,   44,  2,   45,  7,   45,  2,
            46,  7,   46,  2,   47,  7,   47,  2,   48,  7,   48,  2,   49,  7,   49,  2,   50,  7,   50,  2,   51,
            7,   51,  2,   52,  7,   52,  2,   53,  7,   53,  2,   54,  7,   54,  2,   55,  7,   55,  2,   56,  7,
            56,  2,   57,  7,   57,  2,   58,  7,   58,  2,   59,  7,   59,  2,   60,  7,   60,  2,   61,  7,   61,
            2,   62,  7,   62,  1,   0,   1,   0,   1,   0,   5,   0,   130, 8,   0,   10,  0,   12,  0,   133, 9,
            0,   1,   0,   1,   0,   1,   1,   1,   1,   3,   1,   139, 8,   1,   1,   1,   1,   1,   1,   1,   1,
            1,   1,   1,   1,   1,   3,   1,   147, 8,   1,   1,   1,   1,   1,   1,   2,   1,   2,   1,   2,   1,
            2,   1,   2,   1,   2,   1,   2,   3,   2,   158, 8,   2,   1,   2,   1,   2,   5,   2,   162, 8,   2,
            10,  2,   12,  2,   165, 9,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,
            1,   2,   1,   2,   3,   2,   176, 8,   2,   1,   2,   1,   2,   3,   2,   180, 8,   2,   1,   3,   1,
            3,   1,   3,   5,   3,   185, 8,   3,   10,  3,   12,  3,   188, 9,   3,   3,   3,   190, 8,   3,   1,
            4,   1,   4,   1,   4,   1,   4,   1,   5,   1,   5,   3,   5,   198, 8,   5,   1,   6,   1,   6,   1,
            6,   1,   6,   1,   6,   1,   6,   1,   6,   1,   7,   1,   7,   1,   7,   1,   7,   1,   7,   5,   7,
            212, 8,   7,   10,  7,   12,  7,   215, 9,   7,   1,   7,   1,   7,   1,   8,   1,   8,   1,   8,   1,
            8,   1,   8,   1,   8,   1,   8,   3,   8,   226, 8,   8,   1,   8,   1,   8,   1,   9,   1,   9,   3,
            9,   232, 8,   9,   1,   10,  1,   10,  3,   10,  236, 8,   10,  1,   11,  1,   11,  5,   11,  240, 8,
            11,  10,  11,  12,  11,  243, 9,   11,  1,   11,  1,   11,  1,   12,  1,   12,  1,   12,  1,   12,  1,
            12,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,  3,   12,  258, 8,   12,  1,   13,  1,
            13,  1,   13,  1,   14,  1,   14,  1,   14,  1,   14,  3,   14,  267, 8,   14,  1,   14,  1,   14,  1,
            14,  3,   14,  272, 8,   14,  1,   14,  1,   14,  1,   15,  1,   15,  1,   15,  1,   15,  1,   15,  1,
            15,  1,   15,  1,   16,  1,   16,  1,   16,  1,   16,  1,   17,  1,   17,  1,   17,  1,   17,  1,   17,
            1,   18,  1,   18,  1,   18,  3,   18,  295, 8,   18,  1,   19,  1,   19,  3,   19,  299, 8,   19,  1,
            19,  1,   19,  1,   19,  1,   20,  1,   20,  3,   20,  306, 8,   20,  1,   20,  1,   20,  1,   21,  1,
            21,  1,   21,  1,   21,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  3,   22,  320, 8,
            22,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  1,   24,  1,   24,  1,   24,  1,   24,  1,   24,
            5,   24,  332, 8,   24,  10,  24,  12,  24,  335, 9,   24,  1,   24,  1,   24,  1,   25,  1,   25,  1,
            25,  5,   25,  342, 8,   25,  10,  25,  12,  25,  345, 9,   25,  1,   25,  1,   25,  1,   25,  1,   25,
            1,   25,  1,   25,  3,   25,  353, 8,   25,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,
            1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,
            26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  3,   26,  378, 8,   26,  1,   26,  1,
            26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,
            1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,
            26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  5,   26,  411, 8,
            26,  10,  26,  12,  26,  414, 9,   26,  1,   27,  1,   27,  1,   27,  3,   27,  419, 8,   27,  1,   28,
            1,   28,  3,   28,  423, 8,   28,  1,   29,  1,   29,  1,   29,  1,   29,  3,   29,  429, 8,   29,  1,
            30,  1,   30,  3,   30,  433, 8,   30,  1,   31,  1,   31,  1,   32,  1,   32,  1,   32,  1,   32,  1,
            32,  1,   32,  1,   32,  1,   32,  1,   32,  1,   32,  3,   32,  447, 8,   32,  1,   33,  1,   33,  1,
            33,  5,   33,  452, 8,   33,  10,  33,  12,  33,  455, 9,   33,  3,   33,  457, 8,   33,  1,   34,  1,
            34,  1,   35,  1,   35,  1,   35,  1,   35,  1,   35,  3,   35,  466, 8,   35,  1,   35,  1,   35,  1,
            35,  1,   36,  1,   36,  3,   36,  473, 8,   36,  1,   37,  1,   37,  1,   37,  1,   38,  1,   38,  1,
            38,  1,   38,  1,   38,  3,   38,  483, 8,   38,  1,   39,  1,   39,  1,   39,  1,   40,  1,   40,  1,
            40,  1,   40,  1,   40,  1,   41,  1,   41,  1,   41,  1,   41,  1,   41,  1,   41,  1,   41,  5,   41,
            500, 8,   41,  10,  41,  12,  41,  503, 9,   41,  3,   41,  505, 8,   41,  1,   41,  1,   41,  1,   42,
            1,   42,  1,   42,  5,   42,  512, 8,   42,  10,  42,  12,  42,  515, 9,   42,  1,   42,  1,   42,  1,
            42,  1,   42,  1,   42,  1,   42,  3,   42,  523, 8,   42,  1,   43,  1,   43,  1,   43,  1,   43,  1,
            43,  1,   43,  1,   43,  3,   43,  532, 8,   43,  1,   44,  3,   44,  535, 8,   44,  1,   44,  1,   44,
            1,   45,  1,   45,  1,   46,  1,   46,  3,   46,  543, 8,   46,  1,   47,  1,   47,  3,   47,  547, 8,
            47,  1,   47,  1,   47,  3,   47,  551, 8,   47,  1,   48,  1,   48,  1,   48,  1,   48,  1,   48,  1,
            48,  1,   48,  1,   48,  1,   48,  3,   48,  562, 8,   48,  1,   49,  1,   49,  1,   50,  1,   50,  3,
            50,  568, 8,   50,  1,   51,  1,   51,  1,   51,  1,   51,  1,   52,  1,   52,  1,   52,  1,   52,  1,
            53,  1,   53,  1,   53,  1,   53,  1,   53,  1,   53,  1,   53,  1,   53,  1,   53,  3,   53,  587, 8,
            53,  1,   54,  1,   54,  1,   55,  1,   55,  1,   55,  1,   55,  1,   55,  1,   55,  1,   56,  1,   56,
            1,   56,  1,   56,  1,   56,  1,   56,  1,   57,  1,   57,  1,   57,  1,   57,  3,   57,  607, 8,   57,
            1,   58,  1,   58,  1,   59,  1,   59,  1,   60,  1,   60,  1,   61,  1,   61,  1,   62,  1,   62,  1,
            62,  0,   1,   52,  63,  0,   2,   4,   6,   8,   10,  12,  14,  16,  18,  20,  22,  24,  26,  28,  30,
            32,  34,  36,  38,  40,  42,  44,  46,  48,  50,  52,  54,  56,  58,  60,  62,  64,  66,  68,  70,  72,
            74,  76,  78,  80,  82,  84,  86,  88,  90,  92,  94,  96,  98,  100, 102, 104, 106, 108, 110, 112, 114,
            116, 118, 120, 122, 124, 0,   3,   1,   0,   72,  75,  1,   0,   60,  63,  2,   0,   57,  58,  64,  64,
            651, 0,   131, 1,   0,   0,   0,   2,   136, 1,   0,   0,   0,   4,   179, 1,   0,   0,   0,   6,   189,
            1,   0,   0,   0,   8,   191, 1,   0,   0,   0,   10,  197, 1,   0,   0,   0,   12,  199, 1,   0,   0,
            0,   14,  206, 1,   0,   0,   0,   16,  218, 1,   0,   0,   0,   18,  231, 1,   0,   0,   0,   20,  235,
            1,   0,   0,   0,   22,  237, 1,   0,   0,   0,   24,  257, 1,   0,   0,   0,   26,  259, 1,   0,   0,
            0,   28,  262, 1,   0,   0,   0,   30,  275, 1,   0,   0,   0,   32,  282, 1,   0,   0,   0,   34,  286,
            1,   0,   0,   0,   36,  294, 1,   0,   0,   0,   38,  296, 1,   0,   0,   0,   40,  303, 1,   0,   0,
            0,   42,  309, 1,   0,   0,   0,   44,  313, 1,   0,   0,   0,   46,  321, 1,   0,   0,   0,   48,  326,
            1,   0,   0,   0,   50,  352, 1,   0,   0,   0,   52,  377, 1,   0,   0,   0,   54,  418, 1,   0,   0,
            0,   56,  422, 1,   0,   0,   0,   58,  428, 1,   0,   0,   0,   60,  432, 1,   0,   0,   0,   62,  434,
            1,   0,   0,   0,   64,  446, 1,   0,   0,   0,   66,  456, 1,   0,   0,   0,   68,  458, 1,   0,   0,
            0,   70,  460, 1,   0,   0,   0,   72,  472, 1,   0,   0,   0,   74,  474, 1,   0,   0,   0,   76,  482,
            1,   0,   0,   0,   78,  484, 1,   0,   0,   0,   80,  487, 1,   0,   0,   0,   82,  492, 1,   0,   0,
            0,   84,  522, 1,   0,   0,   0,   86,  531, 1,   0,   0,   0,   88,  534, 1,   0,   0,   0,   90,  538,
            1,   0,   0,   0,   92,  542, 1,   0,   0,   0,   94,  546, 1,   0,   0,   0,   96,  561, 1,   0,   0,
            0,   98,  563, 1,   0,   0,   0,   100, 567, 1,   0,   0,   0,   102, 569, 1,   0,   0,   0,   104, 573,
            1,   0,   0,   0,   106, 586, 1,   0,   0,   0,   108, 588, 1,   0,   0,   0,   110, 590, 1,   0,   0,
            0,   112, 596, 1,   0,   0,   0,   114, 606, 1,   0,   0,   0,   116, 608, 1,   0,   0,   0,   118, 610,
            1,   0,   0,   0,   120, 612, 1,   0,   0,   0,   122, 614, 1,   0,   0,   0,   124, 616, 1,   0,   0,
            0,   126, 130, 3,   2,   1,   0,   127, 130, 3,   4,   2,   0,   128, 130, 3,   10,  5,   0,   129, 126,
            1,   0,   0,   0,   129, 127, 1,   0,   0,   0,   129, 128, 1,   0,   0,   0,   130, 133, 1,   0,   0,
            0,   131, 129, 1,   0,   0,   0,   131, 132, 1,   0,   0,   0,   132, 134, 1,   0,   0,   0,   133, 131,
            1,   0,   0,   0,   134, 135, 5,   0,   0,   1,   135, 1,   1,   0,   0,   0,   136, 138, 3,   18,  9,
            0,   137, 139, 5,   81,  0,   0,   138, 137, 1,   0,   0,   0,   138, 139, 1,   0,   0,   0,   139, 140,
            1,   0,   0,   0,   140, 141, 5,   82,  0,   0,   141, 142, 5,   1,   0,   0,   142, 146, 3,   106, 53,
            0,   143, 144, 3,   36,  18,  0,   144, 145, 3,   86,  43,  0,   145, 147, 1,   0,   0,   0,   146, 143,
            1,   0,   0,   0,   146, 147, 1,   0,   0,   0,   147, 148, 1,   0,   0,   0,   148, 149, 5,   83,  0,
            0,   149, 3,   1,   0,   0,   0,   150, 151, 3,   18,  9,   0,   151, 152, 5,   82,  0,   0,   152, 153,
            5,   2,   0,   0,   153, 154, 3,   6,   3,   0,   154, 157, 5,   3,   0,   0,   155, 156, 5,   1,   0,
            0,   156, 158, 3,   106, 53,  0,   157, 155, 1,   0,   0,   0,   157, 158, 1,   0,   0,   0,   158, 159,
            1,   0,   0,   0,   159, 163, 5,   4,   0,   0,   160, 162, 3,   20,  10,  0,   161, 160, 1,   0,   0,
            0,   162, 165, 1,   0,   0,   0,   163, 161, 1,   0,   0,   0,   163, 164, 1,   0,   0,   0,   164, 166,
            1,   0,   0,   0,   165, 163, 1,   0,   0,   0,   166, 167, 5,   5,   0,   0,   167, 180, 1,   0,   0,
            0,   168, 169, 5,   6,   0,   0,   169, 170, 5,   82,  0,   0,   170, 171, 5,   2,   0,   0,   171, 172,
            3,   6,   3,   0,   172, 175, 5,   3,   0,   0,   173, 174, 5,   1,   0,   0,   174, 176, 3,   106, 53,
            0,   175, 173, 1,   0,   0,   0,   175, 176, 1,   0,   0,   0,   176, 177, 1,   0,   0,   0,   177, 178,
            5,   83,  0,   0,   178, 180, 1,   0,   0,   0,   179, 150, 1,   0,   0,   0,   179, 168, 1,   0,   0,
            0,   180, 5,   1,   0,   0,   0,   181, 186, 3,   8,   4,   0,   182, 183, 5,   7,   0,   0,   183, 185,
            3,   8,   4,   0,   184, 182, 1,   0,   0,   0,   185, 188, 1,   0,   0,   0,   186, 184, 1,   0,   0,
            0,   186, 187, 1,   0,   0,   0,   187, 190, 1,   0,   0,   0,   188, 186, 1,   0,   0,   0,   189, 181,
            1,   0,   0,   0,   189, 190, 1,   0,   0,   0,   190, 7,   1,   0,   0,   0,   191, 192, 5,   82,  0,
            0,   192, 193, 5,   1,   0,   0,   193, 194, 3,   106, 53,  0,   194, 9,   1,   0,   0,   0,   195, 198,
            3,   12,  6,   0,   196, 198, 3,   14,  7,   0,   197, 195, 1,   0,   0,   0,   197, 196, 1,   0,   0,
            0,   198, 11,  1,   0,   0,   0,   199, 200, 3,   18,  9,   0,   200, 201, 5,   8,   0,   0,   201, 202,
            5,   82,  0,   0,   202, 203, 5,   9,   0,   0,   203, 204, 3,   106, 53,  0,   204, 205, 5,   83,  0,
            0,   205, 13,  1,   0,   0,   0,   206, 207, 3,   18,  9,   0,   207, 208, 5,   10,  0,   0,   208, 209,
            5,   82,  0,   0,   209, 213, 5,   4,   0,   0,   210, 212, 3,   16,  8,   0,   211, 210, 1,   0,   0,
            0,   212, 215, 1,   0,   0,   0,   213, 211, 1,   0,   0,   0,   213, 214, 1,   0,   0,   0,   214, 216,
            1,   0,   0,   0,   215, 213, 1,   0,   0,   0,   216, 217, 5,   5,   0,   0,   217, 15,  1,   0,   0,
            0,   218, 219, 3,   18,  9,   0,   219, 220, 5,   82,  0,   0,   220, 221, 5,   1,   0,   0,   221, 225,
            3,   106, 53,  0,   222, 223, 3,   36,  18,  0,   223, 224, 3,   86,  43,  0,   224, 226, 1,   0,   0,
            0,   225, 222, 1,   0,   0,   0,   225, 226, 1,   0,   0,   0,   226, 227, 1,   0,   0,   0,   227, 228,
            5,   83,  0,   0,   228, 17,  1,   0,   0,   0,   229, 232, 5,   11,  0,   0,   230, 232, 5,   12,  0,
            0,   231, 229, 1,   0,   0,   0,   231, 230, 1,   0,   0,   0,   232, 19,  1,   0,   0,   0,   233, 236,
            3,   24,  12,  0,   234, 236, 3,   22,  11,  0,   235, 233, 1,   0,   0,   0,   235, 234, 1,   0,   0,
            0,   236, 21,  1,   0,   0,   0,   237, 241, 5,   4,   0,   0,   238, 240, 3,   20,  10,  0,   239, 238,
            1,   0,   0,   0,   240, 243, 1,   0,   0,   0,   241, 239, 1,   0,   0,   0,   241, 242, 1,   0,   0,
            0,   242, 244, 1,   0,   0,   0,   243, 241, 1,   0,   0,   0,   244, 245, 5,   5,   0,   0,   245, 23,
            1,   0,   0,   0,   246, 258, 3,   26,  13,  0,   247, 258, 3,   28,  14,  0,   248, 258, 3,   30,  15,
            0,   249, 258, 3,   32,  16,  0,   250, 258, 3,   34,  17,  0,   251, 258, 3,   38,  19,  0,   252, 258,
            3,   40,  20,  0,   253, 258, 3,   42,  21,  0,   254, 258, 3,   44,  22,  0,   255, 258, 3,   46,  23,
            0,   256, 258, 3,   48,  24,  0,   257, 246, 1,   0,   0,   0,   257, 247, 1,   0,   0,   0,   257, 248,
            1,   0,   0,   0,   257, 249, 1,   0,   0,   0,   257, 250, 1,   0,   0,   0,   257, 251, 1,   0,   0,
            0,   257, 252, 1,   0,   0,   0,   257, 253, 1,   0,   0,   0,   257, 254, 1,   0,   0,   0,   257, 255,
            1,   0,   0,   0,   257, 256, 1,   0,   0,   0,   258, 25,  1,   0,   0,   0,   259, 260, 3,   62,  31,
            0,   260, 261, 5,   83,  0,   0,   261, 27,  1,   0,   0,   0,   262, 263, 5,   13,  0,   0,   263, 266,
            5,   82,  0,   0,   264, 265, 5,   1,   0,   0,   265, 267, 3,   106, 53,  0,   266, 264, 1,   0,   0,
            0,   266, 267, 1,   0,   0,   0,   267, 271, 1,   0,   0,   0,   268, 269, 3,   36,  18,  0,   269, 270,
            3,   52,  26,  0,   270, 272, 1,   0,   0,   0,   271, 268, 1,   0,   0,   0,   271, 272, 1,   0,   0,
            0,   272, 273, 1,   0,   0,   0,   273, 274, 5,   83,  0,   0,   274, 29,  1,   0,   0,   0,   275, 276,
            5,   13,  0,   0,   276, 277, 5,   82,  0,   0,   277, 278, 5,   1,   0,   0,   278, 279, 3,   106, 53,
            0,   279, 280, 3,   76,  38,  0,   280, 281, 5,   83,  0,   0,   281, 31,  1,   0,   0,   0,   282, 283,
            5,   14,  0,   0,   283, 284, 5,   82,  0,   0,   284, 285, 5,   83,  0,   0,   285, 33,  1,   0,   0,
            0,   286, 287, 3,   52,  26,  0,   287, 288, 3,   36,  18,  0,   288, 289, 3,   52,  26,  0,   289, 290,
            5,   83,  0,   0,   290, 35,  1,   0,   0,   0,   291, 295, 5,   15,  0,   0,   292, 295, 5,   16,  0,
            0,   293, 295, 5,   17,  0,   0,   294, 291, 1,   0,   0,   0,   294, 292, 1,   0,   0,   0,   294, 293,
            1,   0,   0,   0,   295, 37,  1,   0,   0,   0,   296, 298, 5,   18,  0,   0,   297, 299, 5,   80,  0,
            0,   298, 297, 1,   0,   0,   0,   298, 299, 1,   0,   0,   0,   299, 300, 1,   0,   0,   0,   300, 301,
            3,   52,  26,  0,   301, 302, 5,   83,  0,   0,   302, 39,  1,   0,   0,   0,   303, 305, 5,   19,  0,
            0,   304, 306, 3,   52,  26,  0,   305, 304, 1,   0,   0,   0,   305, 306, 1,   0,   0,   0,   306, 307,
            1,   0,   0,   0,   307, 308, 5,   83,  0,   0,   308, 41,  1,   0,   0,   0,   309, 310, 5,   20,  0,
            0,   310, 311, 3,   52,  26,  0,   311, 312, 5,   83,  0,   0,   312, 43,  1,   0,   0,   0,   313, 314,
            5,   21,  0,   0,   314, 315, 3,   52,  26,  0,   315, 316, 5,   22,  0,   0,   316, 319, 3,   20,  10,
            0,   317, 318, 5,   23,  0,   0,   318, 320, 3,   20,  10,  0,   319, 317, 1,   0,   0,   0,   319, 320,
            1,   0,   0,   0,   320, 45,  1,   0,   0,   0,   321, 322, 5,   24,  0,   0,   322, 323, 3,   52,  26,
            0,   323, 324, 5,   25,  0,   0,   324, 325, 3,   20,  10,  0,   325, 47,  1,   0,   0,   0,   326, 327,
            5,   26,  0,   0,   327, 328, 3,   52,  26,  0,   328, 329, 5,   27,  0,   0,   329, 333, 5,   4,   0,
            0,   330, 332, 3,   50,  25,  0,   331, 330, 1,   0,   0,   0,   332, 335, 1,   0,   0,   0,   333, 331,
            1,   0,   0,   0,   333, 334, 1,   0,   0,   0,   334, 336, 1,   0,   0,   0,   335, 333, 1,   0,   0,
            0,   336, 337, 5,   5,   0,   0,   337, 49,  1,   0,   0,   0,   338, 343, 3,   86,  43,  0,   339, 340,
            5,   28,  0,   0,   340, 342, 3,   86,  43,  0,   341, 339, 1,   0,   0,   0,   342, 345, 1,   0,   0,
            0,   343, 341, 1,   0,   0,   0,   343, 344, 1,   0,   0,   0,   344, 346, 1,   0,   0,   0,   345, 343,
            1,   0,   0,   0,   346, 347, 5,   29,  0,   0,   347, 348, 3,   20,  10,  0,   348, 353, 1,   0,   0,
            0,   349, 350, 5,   30,  0,   0,   350, 351, 5,   29,  0,   0,   351, 353, 3,   20,  10,  0,   352, 338,
            1,   0,   0,   0,   352, 349, 1,   0,   0,   0,   353, 51,  1,   0,   0,   0,   354, 355, 6,   26,  -1,
            0,   355, 378, 3,   68,  34,  0,   356, 378, 3,   70,  35,  0,   357, 378, 3,   86,  43,  0,   358, 378,
            3,   74,  37,  0,   359, 378, 3,   76,  38,  0,   360, 378, 3,   78,  39,  0,   361, 378, 3,   80,  40,
            0,   362, 378, 3,   62,  31,  0,   363, 364, 5,   2,   0,   0,   364, 365, 3,   52,  26,  0,   365, 366,
            5,   3,   0,   0,   366, 378, 1,   0,   0,   0,   367, 368, 5,   34,  0,   0,   368, 378, 3,   52,  26,
            9,   369, 370, 5,   21,  0,   0,   370, 371, 3,   52,  26,  0,   371, 372, 5,   22,  0,   0,   372, 373,
            3,   52,  26,  0,   373, 374, 5,   23,  0,   0,   374, 375, 3,   52,  26,  2,   375, 378, 1,   0,   0,
            0,   376, 378, 3,   82,  41,  0,   377, 354, 1,   0,   0,   0,   377, 356, 1,   0,   0,   0,   377, 357,
            1,   0,   0,   0,   377, 358, 1,   0,   0,   0,   377, 359, 1,   0,   0,   0,   377, 360, 1,   0,   0,
            0,   377, 361, 1,   0,   0,   0,   377, 362, 1,   0,   0,   0,   377, 363, 1,   0,   0,   0,   377, 367,
            1,   0,   0,   0,   377, 369, 1,   0,   0,   0,   377, 376, 1,   0,   0,   0,   378, 412, 1,   0,   0,
            0,   379, 380, 10,  8,   0,   0,   380, 381, 3,   54,  27,  0,   381, 382, 3,   52,  26,  9,   382, 411,
            1,   0,   0,   0,   383, 384, 10,  7,   0,   0,   384, 385, 3,   56,  28,  0,   385, 386, 3,   52,  26,
            8,   386, 411, 1,   0,   0,   0,   387, 388, 10,  6,   0,   0,   388, 389, 3,   58,  29,  0,   389, 390,
            3,   52,  26,  7,   390, 411, 1,   0,   0,   0,   391, 392, 10,  5,   0,   0,   392, 393, 3,   60,  30,
            0,   393, 394, 3,   52,  26,  6,   394, 411, 1,   0,   0,   0,   395, 396, 10,  4,   0,   0,   396, 397,
            5,   35,  0,   0,   397, 411, 3,   52,  26,  5,   398, 399, 10,  3,   0,   0,   399, 400, 5,   36,  0,
            0,   400, 411, 3,   52,  26,  4,   401, 402, 10,  18,  0,   0,   402, 411, 5,   31,  0,   0,   403, 404,
            10,  17,  0,   0,   404, 405, 5,   32,  0,   0,   405, 406, 3,   52,  26,  0,   406, 407, 5,   33,  0,
            0,   407, 411, 1,   0,   0,   0,   408, 409, 10,  16,  0,   0,   409, 411, 5,   82,  0,   0,   410, 379,
            1,   0,   0,   0,   410, 383, 1,   0,   0,   0,   410, 387, 1,   0,   0,   0,   410, 391, 1,   0,   0,
            0,   410, 395, 1,   0,   0,   0,   410, 398, 1,   0,   0,   0,   410, 401, 1,   0,   0,   0,   410, 403,
            1,   0,   0,   0,   410, 408, 1,   0,   0,   0,   411, 414, 1,   0,   0,   0,   412, 410, 1,   0,   0,
            0,   412, 413, 1,   0,   0,   0,   413, 53,  1,   0,   0,   0,   414, 412, 1,   0,   0,   0,   415, 419,
            5,   37,  0,   0,   416, 419, 5,   38,  0,   0,   417, 419, 5,   39,  0,   0,   418, 415, 1,   0,   0,
            0,   418, 416, 1,   0,   0,   0,   418, 417, 1,   0,   0,   0,   419, 55,  1,   0,   0,   0,   420, 423,
            5,   40,  0,   0,   421, 423, 5,   41,  0,   0,   422, 420, 1,   0,   0,   0,   422, 421, 1,   0,   0,
            0,   423, 57,  1,   0,   0,   0,   424, 429, 5,   42,  0,   0,   425, 429, 5,   43,  0,   0,   426, 429,
            5,   44,  0,   0,   427, 429, 5,   45,  0,   0,   428, 424, 1,   0,   0,   0,   428, 425, 1,   0,   0,
            0,   428, 426, 1,   0,   0,   0,   428, 427, 1,   0,   0,   0,   429, 59,  1,   0,   0,   0,   430, 433,
            5,   46,  0,   0,   431, 433, 5,   47,  0,   0,   432, 430, 1,   0,   0,   0,   432, 431, 1,   0,   0,
            0,   433, 61,  1,   0,   0,   0,   434, 435, 3,   64,  32,  0,   435, 63,  1,   0,   0,   0,   436, 437,
            5,   82,  0,   0,   437, 438, 5,   2,   0,   0,   438, 439, 3,   66,  33,  0,   439, 440, 5,   3,   0,
            0,   440, 447, 1,   0,   0,   0,   441, 442, 3,   106, 53,  0,   442, 443, 5,   2,   0,   0,   443, 444,
            3,   66,  33,  0,   444, 445, 5,   3,   0,   0,   445, 447, 1,   0,   0,   0,   446, 436, 1,   0,   0,
            0,   446, 441, 1,   0,   0,   0,   447, 65,  1,   0,   0,   0,   448, 453, 3,   52,  26,  0,   449, 450,
            5,   7,   0,   0,   450, 452, 3,   52,  26,  0,   451, 449, 1,   0,   0,   0,   452, 455, 1,   0,   0,
            0,   453, 451, 1,   0,   0,   0,   453, 454, 1,   0,   0,   0,   454, 457, 1,   0,   0,   0,   455, 453,
            1,   0,   0,   0,   456, 448, 1,   0,   0,   0,   456, 457, 1,   0,   0,   0,   457, 67,  1,   0,   0,
            0,   458, 459, 5,   82,  0,   0,   459, 69,  1,   0,   0,   0,   460, 465, 5,   48,  0,   0,   461, 462,
            5,   32,  0,   0,   462, 463, 3,   52,  26,  0,   463, 464, 5,   33,  0,   0,   464, 466, 1,   0,   0,
            0,   465, 461, 1,   0,   0,   0,   465, 466, 1,   0,   0,   0,   466, 467, 1,   0,   0,   0,   467, 468,
            3,   72,  36,  0,   468, 469, 3,   106, 53,  0,   469, 71,  1,   0,   0,   0,   470, 473, 5,   49,  0,
            0,   471, 473, 5,   50,  0,   0,   472, 470, 1,   0,   0,   0,   472, 471, 1,   0,   0,   0,   473, 73,
            1,   0,   0,   0,   474, 475, 5,   51,  0,   0,   475, 476, 3,   52,  26,  0,   476, 75,  1,   0,   0,
            0,   477, 478, 5,   52,  0,   0,   478, 483, 3,   52,  26,  0,   479, 480, 5,   52,  0,   0,   480, 481,
            5,   53,  0,   0,   481, 483, 3,   52,  26,  0,   482, 477, 1,   0,   0,   0,   482, 479, 1,   0,   0,
            0,   483, 77,  1,   0,   0,   0,   484, 485, 5,   54,  0,   0,   485, 486, 3,   106, 53,  0,   486, 79,
            1,   0,   0,   0,   487, 488, 5,   54,  0,   0,   488, 489, 5,   2,   0,   0,   489, 490, 3,   52,  26,
            0,   490, 491, 5,   3,   0,   0,   491, 81,  1,   0,   0,   0,   492, 493, 5,   26,  0,   0,   493, 494,
            3,   52,  26,  0,   494, 495, 5,   27,  0,   0,   495, 504, 5,   4,   0,   0,   496, 501, 3,   84,  42,
            0,   497, 498, 5,   7,   0,   0,   498, 500, 3,   84,  42,  0,   499, 497, 1,   0,   0,   0,   500, 503,
            1,   0,   0,   0,   501, 499, 1,   0,   0,   0,   501, 502, 1,   0,   0,   0,   502, 505, 1,   0,   0,
            0,   503, 501, 1,   0,   0,   0,   504, 496, 1,   0,   0,   0,   504, 505, 1,   0,   0,   0,   505, 506,
            1,   0,   0,   0,   506, 507, 5,   5,   0,   0,   507, 83,  1,   0,   0,   0,   508, 513, 3,   86,  43,
            0,   509, 510, 5,   28,  0,   0,   510, 512, 3,   86,  43,  0,   511, 509, 1,   0,   0,   0,   512, 515,
            1,   0,   0,   0,   513, 511, 1,   0,   0,   0,   513, 514, 1,   0,   0,   0,   514, 516, 1,   0,   0,
            0,   515, 513, 1,   0,   0,   0,   516, 517, 5,   29,  0,   0,   517, 518, 3,   52,  26,  0,   518, 523,
            1,   0,   0,   0,   519, 520, 5,   30,  0,   0,   520, 521, 5,   29,  0,   0,   521, 523, 3,   52,  26,
            0,   522, 508, 1,   0,   0,   0,   522, 519, 1,   0,   0,   0,   523, 85,  1,   0,   0,   0,   524, 532,
            3,   88,  44,  0,   525, 532, 3,   90,  45,  0,   526, 532, 3,   92,  46,  0,   527, 532, 3,   98,  49,
            0,   528, 532, 3,   100, 50,  0,   529, 532, 3,   102, 51,  0,   530, 532, 3,   104, 52,  0,   531, 524,
            1,   0,   0,   0,   531, 525, 1,   0,   0,   0,   531, 526, 1,   0,   0,   0,   531, 527, 1,   0,   0,
            0,   531, 528, 1,   0,   0,   0,   531, 529, 1,   0,   0,   0,   531, 530, 1,   0,   0,   0,   532, 87,
            1,   0,   0,   0,   533, 535, 5,   82,  0,   0,   534, 533, 1,   0,   0,   0,   534, 535, 1,   0,   0,
            0,   535, 536, 1,   0,   0,   0,   536, 537, 5,   77,  0,   0,   537, 89,  1,   0,   0,   0,   538, 539,
            5,   78,  0,   0,   539, 91,  1,   0,   0,   0,   540, 543, 3,   94,  47,  0,   541, 543, 3,   96,  48,
            0,   542, 540, 1,   0,   0,   0,   542, 541, 1,   0,   0,   0,   543, 93,  1,   0,   0,   0,   544, 547,
            5,   79,  0,   0,   545, 547, 5,   68,  0,   0,   546, 544, 1,   0,   0,   0,   546, 545, 1,   0,   0,
            0,   547, 550, 1,   0,   0,   0,   548, 549, 5,   1,   0,   0,   549, 551, 5,   79,  0,   0,   550, 548,
            1,   0,   0,   0,   550, 551, 1,   0,   0,   0,   551, 95,  1,   0,   0,   0,   552, 553, 5,   69,  0,
            0,   553, 554, 5,   1,   0,   0,   554, 562, 5,   79,  0,   0,   555, 556, 5,   70,  0,   0,   556, 557,
            5,   1,   0,   0,   557, 562, 5,   79,  0,   0,   558, 559, 5,   71,  0,   0,   559, 560, 5,   1,   0,
            0,   560, 562, 5,   79,  0,   0,   561, 552, 1,   0,   0,   0,   561, 555, 1,   0,   0,   0,   561, 558,
            1,   0,   0,   0,   562, 97,  1,   0,   0,   0,   563, 564, 7,   0,   0,   0,   564, 99,  1,   0,   0,
            0,   565, 568, 5,   55,  0,   0,   566, 568, 5,   56,  0,   0,   567, 565, 1,   0,   0,   0,   567, 566,
            1,   0,   0,   0,   568, 101, 1,   0,   0,   0,   569, 570, 5,   79,  0,   0,   570, 571, 5,   1,   0,
            0,   571, 572, 5,   57,  0,   0,   572, 103, 1,   0,   0,   0,   573, 574, 5,   68,  0,   0,   574, 575,
            5,   1,   0,   0,   575, 576, 5,   58,  0,   0,   576, 105, 1,   0,   0,   0,   577, 587, 3,   108, 54,
            0,   578, 587, 3,   110, 55,  0,   579, 587, 3,   112, 56,  0,   580, 587, 3,   114, 57,  0,   581, 582,
            5,   37,  0,   0,   582, 587, 3,   106, 53,  0,   583, 584, 5,   59,  0,   0,   584, 587, 3,   106, 53,
            0,   585, 587, 3,   124, 62,  0,   586, 577, 1,   0,   0,   0,   586, 578, 1,   0,   0,   0,   586, 579,
            1,   0,   0,   0,   586, 580, 1,   0,   0,   0,   586, 581, 1,   0,   0,   0,   586, 583, 1,   0,   0,
            0,   586, 585, 1,   0,   0,   0,   587, 107, 1,   0,   0,   0,   588, 589, 5,   67,  0,   0,   589, 109,
            1,   0,   0,   0,   590, 591, 5,   32,  0,   0,   591, 592, 3,   106, 53,  0,   592, 593, 5,   83,  0,
            0,   593, 594, 5,   79,  0,   0,   594, 595, 5,   33,  0,   0,   595, 111, 1,   0,   0,   0,   596, 597,
            5,   42,  0,   0,   597, 598, 3,   106, 53,  0,   598, 599, 5,   83,  0,   0,   599, 600, 5,   79,  0,
            0,   600, 601, 5,   44,  0,   0,   601, 113, 1,   0,   0,   0,   602, 607, 3,   116, 58,  0,   603, 607,
            3,   118, 59,  0,   604, 607, 3,   120, 60,  0,   605, 607, 3,   122, 61,  0,   606, 602, 1,   0,   0,
            0,   606, 603, 1,   0,   0,   0,   606, 604, 1,   0,   0,   0,   606, 605, 1,   0,   0,   0,   607, 115,
            1,   0,   0,   0,   608, 609, 7,   1,   0,   0,   609, 117, 1,   0,   0,   0,   610, 611, 7,   2,   0,
            0,   611, 119, 1,   0,   0,   0,   612, 613, 5,   65,  0,   0,   613, 121, 1,   0,   0,   0,   614, 615,
            5,   66,  0,   0,   615, 123, 1,   0,   0,   0,   616, 617, 5,   82,  0,   0,   617, 125, 1,   0,   0,
            0,   52,  129, 131, 138, 146, 157, 163, 175, 179, 186, 189, 197, 213, 225, 231, 235, 241, 257, 266, 271,
            294, 298, 305, 319, 333, 343, 352, 377, 410, 412, 418, 422, 428, 432, 446, 453, 456, 465, 472, 482, 501,
            504, 513, 522, 531, 534, 542, 546, 550, 561, 567, 586, 606};
        staticData->serializedATN =
            antlr4::atn::SerializedATNView(serializedATNSegment,
                                           sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

        antlr4::atn::ATNDeserializer deserializer;
        staticData->atn = deserializer.deserialize(staticData->serializedATN);

        const size_t count = staticData->atn->getNumberOfDecisions();
        staticData->decisionToDFA.reserve(count);
        for (size_t i = 0; i < count; i++)
        {
            staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
        }
        anceParserStaticData = staticData.release();
    }

}

anceParser::anceParser(TokenStream* input) : anceParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

anceParser::anceParser(TokenStream* input, const antlr4::atn::ParserATNSimulatorOptions& options) : Parser(input)
{
    anceParser::initialize();
    _interpreter = new atn::ParserATNSimulator(this,
                                               *anceParserStaticData->atn,
                                               anceParserStaticData->decisionToDFA,
                                               anceParserStaticData->sharedContextCache,
                                               options);
}

anceParser::~anceParser()
{
    delete _interpreter;
}

const atn::ATN& anceParser::getATN() const
{
    return *anceParserStaticData->atn;
}

std::string anceParser::getGrammarFileName() const
{
    return "ance.g4";
}

const std::vector<std::string>& anceParser::getRuleNames() const
{
    return anceParserStaticData->ruleNames;
}

const dfa::Vocabulary& anceParser::getVocabulary() const
{
    return anceParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView anceParser::getSerializedATN() const
{
    return anceParserStaticData->serializedATN;
}

//----------------- FileContext ------------------------------------------------------------------

anceParser::FileContext::FileContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::FileContext::EOF()
{
    return getToken(anceParser::EOF, 0);
}

std::vector<anceParser::VariableDeclarationContext*> anceParser::FileContext::variableDeclaration()
{
    return getRuleContexts<anceParser::VariableDeclarationContext>();
}

anceParser::VariableDeclarationContext* anceParser::FileContext::variableDeclaration(size_t i)
{
    return getRuleContext<anceParser::VariableDeclarationContext>(i);
}

std::vector<anceParser::FunctionContext*> anceParser::FileContext::function()
{
    return getRuleContexts<anceParser::FunctionContext>();
}

anceParser::FunctionContext* anceParser::FileContext::function(size_t i)
{
    return getRuleContext<anceParser::FunctionContext>(i);
}

std::vector<anceParser::TypeDefinitionContext*> anceParser::FileContext::typeDefinition()
{
    return getRuleContexts<anceParser::TypeDefinitionContext>();
}

anceParser::TypeDefinitionContext* anceParser::FileContext::typeDefinition(size_t i)
{
    return getRuleContext<anceParser::TypeDefinitionContext>(i);
}

size_t anceParser::FileContext::getRuleIndex() const
{
    return anceParser::RuleFile;
}

std::any anceParser::FileContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFile(this);
    else return visitor->visitChildren(this);
}

anceParser::FileContext* anceParser::file()
{
    FileContext* _localctx = _tracker.createInstance<FileContext>(_ctx, getState());
    enterRule(_localctx, 0, anceParser::RuleFile);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(131);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~0x3fULL) == 0)
                && ((1ULL << _la)
                    & ((1ULL << anceParser::T__5) | (1ULL << anceParser::T__10) | (1ULL << anceParser::T__11)))
                       != 0))
        {
            setState(129);
            _errHandler->sync(this);
            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx))
            {
                case 1:
                {
                    setState(126);
                    variableDeclaration();
                    break;
                }

                case 2:
                {
                    setState(127);
                    function();
                    break;
                }

                case 3:
                {
                    setState(128);
                    typeDefinition();
                    break;
                }

                default:
                    break;
            }
            setState(133);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(134);
        match(anceParser::EOF);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VariableDeclarationContext ------------------------------------------------------------------

anceParser::VariableDeclarationContext::VariableDeclarationContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AccessModifierContext* anceParser::VariableDeclarationContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::VariableDeclarationContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::VariableDeclarationContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::VariableDeclarationContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

tree::TerminalNode* anceParser::VariableDeclarationContext::CONST()
{
    return getToken(anceParser::CONST, 0);
}

anceParser::AssignerContext* anceParser::VariableDeclarationContext::assigner()
{
    return getRuleContext<anceParser::AssignerContext>(0);
}

anceParser::LiteralExpressionContext* anceParser::VariableDeclarationContext::literalExpression()
{
    return getRuleContext<anceParser::LiteralExpressionContext>(0);
}

size_t anceParser::VariableDeclarationContext::getRuleIndex() const
{
    return anceParser::RuleVariableDeclaration;
}

std::any anceParser::VariableDeclarationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVariableDeclaration(this);
    else return visitor->visitChildren(this);
}

anceParser::VariableDeclarationContext* anceParser::variableDeclaration()
{
    VariableDeclarationContext* _localctx = _tracker.createInstance<VariableDeclarationContext>(_ctx, getState());
    enterRule(_localctx, 2, anceParser::RuleVariableDeclaration);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(136);
        accessModifier();
        setState(138);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::CONST)
        {
            setState(137);
            match(anceParser::CONST);
        }
        setState(140);
        match(anceParser::IDENTIFIER);
        setState(141);
        match(anceParser::T__0);
        setState(142);
        type();
        setState(146);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__14) | (1ULL << anceParser::T__15) | (1ULL << anceParser::T__16)))
                    != 0))
        {
            setState(143);
            assigner();
            setState(144);
            literalExpression();
        }
        setState(148);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

anceParser::FunctionContext::FunctionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::FunctionContext::getRuleIndex() const
{
    return anceParser::RuleFunction;
}

void anceParser::FunctionContext::copyFrom(FunctionContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- ExternFunctionDeclarationContext ------------------------------------------------------------------

tree::TerminalNode* anceParser::ExternFunctionDeclarationContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::ParametersContext* anceParser::ExternFunctionDeclarationContext::parameters()
{
    return getRuleContext<anceParser::ParametersContext>(0);
}

tree::TerminalNode* anceParser::ExternFunctionDeclarationContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

anceParser::TypeContext* anceParser::ExternFunctionDeclarationContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::ExternFunctionDeclarationContext::ExternFunctionDeclarationContext(FunctionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::ExternFunctionDeclarationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitExternFunctionDeclaration(this);
    else return visitor->visitChildren(this);
}
//----------------- FunctionDefinitionContext ------------------------------------------------------------------

anceParser::AccessModifierContext* anceParser::FunctionDefinitionContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::FunctionDefinitionContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::ParametersContext* anceParser::FunctionDefinitionContext::parameters()
{
    return getRuleContext<anceParser::ParametersContext>(0);
}

anceParser::TypeContext* anceParser::FunctionDefinitionContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

std::vector<anceParser::CodeContext*> anceParser::FunctionDefinitionContext::code()
{
    return getRuleContexts<anceParser::CodeContext>();
}

anceParser::CodeContext* anceParser::FunctionDefinitionContext::code(size_t i)
{
    return getRuleContext<anceParser::CodeContext>(i);
}

anceParser::FunctionDefinitionContext::FunctionDefinitionContext(FunctionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::FunctionDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFunctionDefinition(this);
    else return visitor->visitChildren(this);
}
anceParser::FunctionContext* anceParser::function()
{
    FunctionContext* _localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
    enterRule(_localctx, 4, anceParser::RuleFunction);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(179);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__10:
            case anceParser::T__11:
            {
                _localctx = _tracker.createInstance<anceParser::FunctionDefinitionContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(150);
                accessModifier();
                setState(151);
                match(anceParser::IDENTIFIER);
                setState(152);
                match(anceParser::T__1);
                setState(153);
                parameters();
                setState(154);
                match(anceParser::T__2);
                setState(157);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == anceParser::T__0)
                {
                    setState(155);
                    match(anceParser::T__0);
                    setState(156);
                    type();
                }
                setState(159);
                match(anceParser::T__3);
                setState(163);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (
                    (((_la & ~0x3fULL) == 0)
                     && ((1ULL << _la)
                         & ((1ULL << anceParser::T__1) | (1ULL << anceParser::T__3) | (1ULL << anceParser::T__12)
                            | (1ULL << anceParser::T__13) | (1ULL << anceParser::T__17) | (1ULL << anceParser::T__18)
                            | (1ULL << anceParser::T__19) | (1ULL << anceParser::T__20) | (1ULL << anceParser::T__23)
                            | (1ULL << anceParser::T__25) | (1ULL << anceParser::T__31) | (1ULL << anceParser::T__33)
                            | (1ULL << anceParser::T__36) | (1ULL << anceParser::T__41) | (1ULL << anceParser::T__47)
                            | (1ULL << anceParser::T__50) | (1ULL << anceParser::T__51) | (1ULL << anceParser::T__53)
                            | (1ULL << anceParser::T__54) | (1ULL << anceParser::T__55) | (1ULL << anceParser::T__56)
                            | (1ULL << anceParser::T__57) | (1ULL << anceParser::T__58) | (1ULL << anceParser::T__59)
                            | (1ULL << anceParser::T__60) | (1ULL << anceParser::T__61) | (1ULL << anceParser::T__62)))
                            != 0)
                    || ((((_la - 64) & ~0x3fULL) == 0)
                        && ((1ULL << (_la - 64))
                            & ((1ULL << (anceParser::T__63 - 64)) | (1ULL << (anceParser::T__64 - 64))
                               | (1ULL << (anceParser::T__65 - 64)) | (1ULL << (anceParser::NATIVE_INTEGER_TYPE - 64))
                               | (1ULL << (anceParser::SIGNED_INTEGER - 64)) | (1ULL << (anceParser::HEX_INTEGER - 64))
                               | (1ULL << (anceParser::BIN_INTEGER - 64)) | (1ULL << (anceParser::OCT_INTEGER - 64))
                               | (1ULL << (anceParser::HALF - 64)) | (1ULL << (anceParser::SINGLE - 64))
                               | (1ULL << (anceParser::DOUBLE - 64)) | (1ULL << (anceParser::QUAD - 64))
                               | (1ULL << (anceParser::STRING - 64)) | (1ULL << (anceParser::BYTE - 64))
                               | (1ULL << (anceParser::INTEGER - 64)) | (1ULL << (anceParser::IDENTIFIER - 64))))
                               != 0))
                {
                    setState(160);
                    code();
                    setState(165);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
                setState(166);
                match(anceParser::T__4);
                break;
            }

            case anceParser::T__5:
            {
                _localctx = _tracker.createInstance<anceParser::ExternFunctionDeclarationContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(168);
                match(anceParser::T__5);
                setState(169);
                match(anceParser::IDENTIFIER);
                setState(170);
                match(anceParser::T__1);
                setState(171);
                parameters();
                setState(172);
                match(anceParser::T__2);
                setState(175);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == anceParser::T__0)
                {
                    setState(173);
                    match(anceParser::T__0);
                    setState(174);
                    type();
                }
                setState(177);
                match(anceParser::SEMICOLON);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

anceParser::ParametersContext::ParametersContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<anceParser::ParameterContext*> anceParser::ParametersContext::parameter()
{
    return getRuleContexts<anceParser::ParameterContext>();
}

anceParser::ParameterContext* anceParser::ParametersContext::parameter(size_t i)
{
    return getRuleContext<anceParser::ParameterContext>(i);
}

size_t anceParser::ParametersContext::getRuleIndex() const
{
    return anceParser::RuleParameters;
}

std::any anceParser::ParametersContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitParameters(this);
    else return visitor->visitChildren(this);
}

anceParser::ParametersContext* anceParser::parameters()
{
    ParametersContext* _localctx = _tracker.createInstance<ParametersContext>(_ctx, getState());
    enterRule(_localctx, 6, anceParser::RuleParameters);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(189);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::IDENTIFIER)
        {
            setState(181);
            parameter();
            setState(186);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == anceParser::T__6)
            {
                setState(182);
                match(anceParser::T__6);
                setState(183);
                parameter();
                setState(188);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

anceParser::ParameterContext::ParameterContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::ParameterContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::ParameterContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

size_t anceParser::ParameterContext::getRuleIndex() const
{
    return anceParser::RuleParameter;
}

std::any anceParser::ParameterContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitParameter(this);
    else return visitor->visitChildren(this);
}

anceParser::ParameterContext* anceParser::parameter()
{
    ParameterContext* _localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
    enterRule(_localctx, 8, anceParser::RuleParameter);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(191);
        match(anceParser::IDENTIFIER);
        setState(192);
        match(anceParser::T__0);
        setState(193);
        type();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TypeDefinitionContext ------------------------------------------------------------------

anceParser::TypeDefinitionContext::TypeDefinitionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::DefineAliasContext* anceParser::TypeDefinitionContext::defineAlias()
{
    return getRuleContext<anceParser::DefineAliasContext>(0);
}

anceParser::StructDefinitionContext* anceParser::TypeDefinitionContext::structDefinition()
{
    return getRuleContext<anceParser::StructDefinitionContext>(0);
}

size_t anceParser::TypeDefinitionContext::getRuleIndex() const
{
    return anceParser::RuleTypeDefinition;
}

std::any anceParser::TypeDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitTypeDefinition(this);
    else return visitor->visitChildren(this);
}

anceParser::TypeDefinitionContext* anceParser::typeDefinition()
{
    TypeDefinitionContext* _localctx = _tracker.createInstance<TypeDefinitionContext>(_ctx, getState());
    enterRule(_localctx, 10, anceParser::RuleTypeDefinition);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(197);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx))
        {
            case 1:
            {
                enterOuterAlt(_localctx, 1);
                setState(195);
                defineAlias();
                break;
            }

            case 2:
            {
                enterOuterAlt(_localctx, 2);
                setState(196);
                structDefinition();
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DefineAliasContext ------------------------------------------------------------------

anceParser::DefineAliasContext::DefineAliasContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AccessModifierContext* anceParser::DefineAliasContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::DefineAliasContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::DefineAliasContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::DefineAliasContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::DefineAliasContext::getRuleIndex() const
{
    return anceParser::RuleDefineAlias;
}

std::any anceParser::DefineAliasContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDefineAlias(this);
    else return visitor->visitChildren(this);
}

anceParser::DefineAliasContext* anceParser::defineAlias()
{
    DefineAliasContext* _localctx = _tracker.createInstance<DefineAliasContext>(_ctx, getState());
    enterRule(_localctx, 12, anceParser::RuleDefineAlias);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(199);
        accessModifier();
        setState(200);
        match(anceParser::T__7);
        setState(201);
        match(anceParser::IDENTIFIER);
        setState(202);
        match(anceParser::T__8);
        setState(203);
        type();
        setState(204);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StructDefinitionContext ------------------------------------------------------------------

anceParser::StructDefinitionContext::StructDefinitionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AccessModifierContext* anceParser::StructDefinitionContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::StructDefinitionContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

std::vector<anceParser::MemberContext*> anceParser::StructDefinitionContext::member()
{
    return getRuleContexts<anceParser::MemberContext>();
}

anceParser::MemberContext* anceParser::StructDefinitionContext::member(size_t i)
{
    return getRuleContext<anceParser::MemberContext>(i);
}

size_t anceParser::StructDefinitionContext::getRuleIndex() const
{
    return anceParser::RuleStructDefinition;
}

std::any anceParser::StructDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitStructDefinition(this);
    else return visitor->visitChildren(this);
}

anceParser::StructDefinitionContext* anceParser::structDefinition()
{
    StructDefinitionContext* _localctx = _tracker.createInstance<StructDefinitionContext>(_ctx, getState());
    enterRule(_localctx, 14, anceParser::RuleStructDefinition);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(206);
        accessModifier();
        setState(207);
        match(anceParser::T__9);
        setState(208);
        match(anceParser::IDENTIFIER);
        setState(209);
        match(anceParser::T__3);
        setState(213);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == anceParser::T__10

               || _la == anceParser::T__11)
        {
            setState(210);
            member();
            setState(215);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(216);
        match(anceParser::T__4);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MemberContext ------------------------------------------------------------------

anceParser::MemberContext::MemberContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AccessModifierContext* anceParser::MemberContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::MemberContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::MemberContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::MemberContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

anceParser::AssignerContext* anceParser::MemberContext::assigner()
{
    return getRuleContext<anceParser::AssignerContext>(0);
}

anceParser::LiteralExpressionContext* anceParser::MemberContext::literalExpression()
{
    return getRuleContext<anceParser::LiteralExpressionContext>(0);
}

size_t anceParser::MemberContext::getRuleIndex() const
{
    return anceParser::RuleMember;
}

std::any anceParser::MemberContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMember(this);
    else return visitor->visitChildren(this);
}

anceParser::MemberContext* anceParser::member()
{
    MemberContext* _localctx = _tracker.createInstance<MemberContext>(_ctx, getState());
    enterRule(_localctx, 16, anceParser::RuleMember);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(218);
        accessModifier();
        setState(219);
        match(anceParser::IDENTIFIER);
        setState(220);
        match(anceParser::T__0);
        setState(221);
        type();
        setState(225);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__14) | (1ULL << anceParser::T__15) | (1ULL << anceParser::T__16)))
                    != 0))
        {
            setState(222);
            assigner();
            setState(223);
            literalExpression();
        }
        setState(227);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AccessModifierContext ------------------------------------------------------------------

anceParser::AccessModifierContext::AccessModifierContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::AccessModifierContext::getRuleIndex() const
{
    return anceParser::RuleAccessModifier;
}

void anceParser::AccessModifierContext::copyFrom(AccessModifierContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- PrivateContext ------------------------------------------------------------------

anceParser::PrivateContext::PrivateContext(AccessModifierContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::PrivateContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitPrivate(this);
    else return visitor->visitChildren(this);
}
//----------------- PublicContext ------------------------------------------------------------------

anceParser::PublicContext::PublicContext(AccessModifierContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::PublicContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitPublic(this);
    else return visitor->visitChildren(this);
}
anceParser::AccessModifierContext* anceParser::accessModifier()
{
    AccessModifierContext* _localctx = _tracker.createInstance<AccessModifierContext>(_ctx, getState());
    enterRule(_localctx, 18, anceParser::RuleAccessModifier);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(231);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__10:
            {
                _localctx = _tracker.createInstance<anceParser::PublicContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(229);
                match(anceParser::T__10);
                break;
            }

            case anceParser::T__11:
            {
                _localctx = _tracker.createInstance<anceParser::PrivateContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(230);
                match(anceParser::T__11);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CodeContext ------------------------------------------------------------------

anceParser::CodeContext::CodeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::StatementContext* anceParser::CodeContext::statement()
{
    return getRuleContext<anceParser::StatementContext>(0);
}

anceParser::BlockContext* anceParser::CodeContext::block()
{
    return getRuleContext<anceParser::BlockContext>(0);
}

size_t anceParser::CodeContext::getRuleIndex() const
{
    return anceParser::RuleCode;
}

std::any anceParser::CodeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitCode(this);
    else return visitor->visitChildren(this);
}

anceParser::CodeContext* anceParser::code()
{
    CodeContext* _localctx = _tracker.createInstance<CodeContext>(_ctx, getState());
    enterRule(_localctx, 20, anceParser::RuleCode);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(235);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__1:
            case anceParser::T__12:
            case anceParser::T__13:
            case anceParser::T__17:
            case anceParser::T__18:
            case anceParser::T__19:
            case anceParser::T__20:
            case anceParser::T__23:
            case anceParser::T__25:
            case anceParser::T__31:
            case anceParser::T__33:
            case anceParser::T__36:
            case anceParser::T__41:
            case anceParser::T__47:
            case anceParser::T__50:
            case anceParser::T__51:
            case anceParser::T__53:
            case anceParser::T__54:
            case anceParser::T__55:
            case anceParser::T__56:
            case anceParser::T__57:
            case anceParser::T__58:
            case anceParser::T__59:
            case anceParser::T__60:
            case anceParser::T__61:
            case anceParser::T__62:
            case anceParser::T__63:
            case anceParser::T__64:
            case anceParser::T__65:
            case anceParser::NATIVE_INTEGER_TYPE:
            case anceParser::SIGNED_INTEGER:
            case anceParser::HEX_INTEGER:
            case anceParser::BIN_INTEGER:
            case anceParser::OCT_INTEGER:
            case anceParser::HALF:
            case anceParser::SINGLE:
            case anceParser::DOUBLE:
            case anceParser::QUAD:
            case anceParser::STRING:
            case anceParser::BYTE:
            case anceParser::INTEGER:
            case anceParser::IDENTIFIER:
            {
                enterOuterAlt(_localctx, 1);
                setState(233);
                statement();
                break;
            }

            case anceParser::T__3:
            {
                enterOuterAlt(_localctx, 2);
                setState(234);
                block();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

anceParser::BlockContext::BlockContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<anceParser::CodeContext*> anceParser::BlockContext::code()
{
    return getRuleContexts<anceParser::CodeContext>();
}

anceParser::CodeContext* anceParser::BlockContext::code(size_t i)
{
    return getRuleContext<anceParser::CodeContext>(i);
}

size_t anceParser::BlockContext::getRuleIndex() const
{
    return anceParser::RuleBlock;
}

std::any anceParser::BlockContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitBlock(this);
    else return visitor->visitChildren(this);
}

anceParser::BlockContext* anceParser::block()
{
    BlockContext* _localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
    enterRule(_localctx, 22, anceParser::RuleBlock);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(237);
        match(anceParser::T__3);
        setState(241);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~0x3fULL) == 0)
                && ((1ULL << _la)
                    & ((1ULL << anceParser::T__1) | (1ULL << anceParser::T__3) | (1ULL << anceParser::T__12)
                       | (1ULL << anceParser::T__13) | (1ULL << anceParser::T__17) | (1ULL << anceParser::T__18)
                       | (1ULL << anceParser::T__19) | (1ULL << anceParser::T__20) | (1ULL << anceParser::T__23)
                       | (1ULL << anceParser::T__25) | (1ULL << anceParser::T__31) | (1ULL << anceParser::T__33)
                       | (1ULL << anceParser::T__36) | (1ULL << anceParser::T__41) | (1ULL << anceParser::T__47)
                       | (1ULL << anceParser::T__50) | (1ULL << anceParser::T__51) | (1ULL << anceParser::T__53)
                       | (1ULL << anceParser::T__54) | (1ULL << anceParser::T__55) | (1ULL << anceParser::T__56)
                       | (1ULL << anceParser::T__57) | (1ULL << anceParser::T__58) | (1ULL << anceParser::T__59)
                       | (1ULL << anceParser::T__60) | (1ULL << anceParser::T__61) | (1ULL << anceParser::T__62)))
                       != 0)
               || ((((_la - 64) & ~0x3fULL) == 0)
                   && ((1ULL << (_la - 64))
                       & ((1ULL << (anceParser::T__63 - 64)) | (1ULL << (anceParser::T__64 - 64))
                          | (1ULL << (anceParser::T__65 - 64)) | (1ULL << (anceParser::NATIVE_INTEGER_TYPE - 64))
                          | (1ULL << (anceParser::SIGNED_INTEGER - 64)) | (1ULL << (anceParser::HEX_INTEGER - 64))
                          | (1ULL << (anceParser::BIN_INTEGER - 64)) | (1ULL << (anceParser::OCT_INTEGER - 64))
                          | (1ULL << (anceParser::HALF - 64)) | (1ULL << (anceParser::SINGLE - 64))
                          | (1ULL << (anceParser::DOUBLE - 64)) | (1ULL << (anceParser::QUAD - 64))
                          | (1ULL << (anceParser::STRING - 64)) | (1ULL << (anceParser::BYTE - 64))
                          | (1ULL << (anceParser::INTEGER - 64)) | (1ULL << (anceParser::IDENTIFIER - 64))))
                          != 0))
        {
            setState(238);
            code();
            setState(243);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(244);
        match(anceParser::T__4);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

anceParser::StatementContext::StatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionStatementContext* anceParser::StatementContext::expressionStatement()
{
    return getRuleContext<anceParser::ExpressionStatementContext>(0);
}

anceParser::LocalVariableDefinitionContext* anceParser::StatementContext::localVariableDefinition()
{
    return getRuleContext<anceParser::LocalVariableDefinitionContext>(0);
}

anceParser::LocalReferenceDefinitionContext* anceParser::StatementContext::localReferenceDefinition()
{
    return getRuleContext<anceParser::LocalReferenceDefinitionContext>(0);
}

anceParser::DropStatementContext* anceParser::StatementContext::dropStatement()
{
    return getRuleContext<anceParser::DropStatementContext>(0);
}

anceParser::AssignmentContext* anceParser::StatementContext::assignment()
{
    return getRuleContext<anceParser::AssignmentContext>(0);
}

anceParser::DeleteStatementContext* anceParser::StatementContext::deleteStatement()
{
    return getRuleContext<anceParser::DeleteStatementContext>(0);
}

anceParser::ReturnStatementContext* anceParser::StatementContext::returnStatement()
{
    return getRuleContext<anceParser::ReturnStatementContext>(0);
}

anceParser::AssertStatementContext* anceParser::StatementContext::assertStatement()
{
    return getRuleContext<anceParser::AssertStatementContext>(0);
}

anceParser::IfStatementContext* anceParser::StatementContext::ifStatement()
{
    return getRuleContext<anceParser::IfStatementContext>(0);
}

anceParser::WhileStatementContext* anceParser::StatementContext::whileStatement()
{
    return getRuleContext<anceParser::WhileStatementContext>(0);
}

anceParser::MatchStatementContext* anceParser::StatementContext::matchStatement()
{
    return getRuleContext<anceParser::MatchStatementContext>(0);
}

size_t anceParser::StatementContext::getRuleIndex() const
{
    return anceParser::RuleStatement;
}

std::any anceParser::StatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::StatementContext* anceParser::statement()
{
    StatementContext* _localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
    enterRule(_localctx, 24, anceParser::RuleStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(257);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx))
        {
            case 1:
            {
                enterOuterAlt(_localctx, 1);
                setState(246);
                expressionStatement();
                break;
            }

            case 2:
            {
                enterOuterAlt(_localctx, 2);
                setState(247);
                localVariableDefinition();
                break;
            }

            case 3:
            {
                enterOuterAlt(_localctx, 3);
                setState(248);
                localReferenceDefinition();
                break;
            }

            case 4:
            {
                enterOuterAlt(_localctx, 4);
                setState(249);
                dropStatement();
                break;
            }

            case 5:
            {
                enterOuterAlt(_localctx, 5);
                setState(250);
                assignment();
                break;
            }

            case 6:
            {
                enterOuterAlt(_localctx, 6);
                setState(251);
                deleteStatement();
                break;
            }

            case 7:
            {
                enterOuterAlt(_localctx, 7);
                setState(252);
                returnStatement();
                break;
            }

            case 8:
            {
                enterOuterAlt(_localctx, 8);
                setState(253);
                assertStatement();
                break;
            }

            case 9:
            {
                enterOuterAlt(_localctx, 9);
                setState(254);
                ifStatement();
                break;
            }

            case 10:
            {
                enterOuterAlt(_localctx, 10);
                setState(255);
                whileStatement();
                break;
            }

            case 11:
            {
                enterOuterAlt(_localctx, 11);
                setState(256);
                matchStatement();
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

anceParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::IndependentExpressionContext* anceParser::ExpressionStatementContext::independentExpression()
{
    return getRuleContext<anceParser::IndependentExpressionContext>(0);
}

tree::TerminalNode* anceParser::ExpressionStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::ExpressionStatementContext::getRuleIndex() const
{
    return anceParser::RuleExpressionStatement;
}

std::any anceParser::ExpressionStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitExpressionStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::ExpressionStatementContext* anceParser::expressionStatement()
{
    ExpressionStatementContext* _localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
    enterRule(_localctx, 26, anceParser::RuleExpressionStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(259);
        independentExpression();
        setState(260);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LocalVariableDefinitionContext ------------------------------------------------------------------

anceParser::LocalVariableDefinitionContext::LocalVariableDefinitionContext(ParserRuleContext* parent,
                                                                           size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::LocalVariableDefinitionContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

tree::TerminalNode* anceParser::LocalVariableDefinitionContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

anceParser::TypeContext* anceParser::LocalVariableDefinitionContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::AssignerContext* anceParser::LocalVariableDefinitionContext::assigner()
{
    return getRuleContext<anceParser::AssignerContext>(0);
}

anceParser::ExpressionContext* anceParser::LocalVariableDefinitionContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::LocalVariableDefinitionContext::getRuleIndex() const
{
    return anceParser::RuleLocalVariableDefinition;
}

std::any anceParser::LocalVariableDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitLocalVariableDefinition(this);
    else return visitor->visitChildren(this);
}

anceParser::LocalVariableDefinitionContext* anceParser::localVariableDefinition()
{
    LocalVariableDefinitionContext* _localctx =
        _tracker.createInstance<LocalVariableDefinitionContext>(_ctx, getState());
    enterRule(_localctx, 28, anceParser::RuleLocalVariableDefinition);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(262);
        match(anceParser::T__12);
        setState(263);
        match(anceParser::IDENTIFIER);
        setState(266);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::T__0)
        {
            setState(264);
            match(anceParser::T__0);
            setState(265);
            type();
        }
        setState(271);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__14) | (1ULL << anceParser::T__15) | (1ULL << anceParser::T__16)))
                    != 0))
        {
            setState(268);
            assigner();
            setState(269);
            expression(0);
        }
        setState(273);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LocalReferenceDefinitionContext ------------------------------------------------------------------

anceParser::LocalReferenceDefinitionContext::LocalReferenceDefinitionContext(ParserRuleContext* parent,
                                                                             size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::LocalReferenceDefinitionContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::LocalReferenceDefinitionContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::BindRefContext* anceParser::LocalReferenceDefinitionContext::bindRef()
{
    return getRuleContext<anceParser::BindRefContext>(0);
}

tree::TerminalNode* anceParser::LocalReferenceDefinitionContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::LocalReferenceDefinitionContext::getRuleIndex() const
{
    return anceParser::RuleLocalReferenceDefinition;
}

std::any anceParser::LocalReferenceDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitLocalReferenceDefinition(this);
    else return visitor->visitChildren(this);
}

anceParser::LocalReferenceDefinitionContext* anceParser::localReferenceDefinition()
{
    LocalReferenceDefinitionContext* _localctx =
        _tracker.createInstance<LocalReferenceDefinitionContext>(_ctx, getState());
    enterRule(_localctx, 30, anceParser::RuleLocalReferenceDefinition);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(275);
        match(anceParser::T__12);
        setState(276);
        match(anceParser::IDENTIFIER);
        setState(277);
        match(anceParser::T__0);
        setState(278);
        type();
        setState(279);
        bindRef();
        setState(280);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DropStatementContext ------------------------------------------------------------------

anceParser::DropStatementContext::DropStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::DropStatementContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

tree::TerminalNode* anceParser::DropStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::DropStatementContext::getRuleIndex() const
{
    return anceParser::RuleDropStatement;
}

std::any anceParser::DropStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDropStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::DropStatementContext* anceParser::dropStatement()
{
    DropStatementContext* _localctx = _tracker.createInstance<DropStatementContext>(_ctx, getState());
    enterRule(_localctx, 32, anceParser::RuleDropStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(282);
        match(anceParser::T__13);
        setState(283);
        match(anceParser::IDENTIFIER);
        setState(284);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

anceParser::AssignmentContext::AssignmentContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AssignerContext* anceParser::AssignmentContext::assigner()
{
    return getRuleContext<anceParser::AssignerContext>(0);
}

tree::TerminalNode* anceParser::AssignmentContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

std::vector<anceParser::ExpressionContext*> anceParser::AssignmentContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::AssignmentContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

size_t anceParser::AssignmentContext::getRuleIndex() const
{
    return anceParser::RuleAssignment;
}

std::any anceParser::AssignmentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAssignment(this);
    else return visitor->visitChildren(this);
}

anceParser::AssignmentContext* anceParser::assignment()
{
    AssignmentContext* _localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
    enterRule(_localctx, 34, anceParser::RuleAssignment);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(286);
        antlrcpp::downCast<AssignmentContext*>(_localctx)->assignable = expression(0);
        setState(287);
        assigner();
        setState(288);
        antlrcpp::downCast<AssignmentContext*>(_localctx)->assigned = expression(0);
        setState(289);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignerContext ------------------------------------------------------------------

anceParser::AssignerContext::AssignerContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::AssignerContext::getRuleIndex() const
{
    return anceParser::RuleAssigner;
}

void anceParser::AssignerContext::copyFrom(AssignerContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- MoveAssignmentContext ------------------------------------------------------------------

anceParser::MoveAssignmentContext::MoveAssignmentContext(AssignerContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::MoveAssignmentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMoveAssignment(this);
    else return visitor->visitChildren(this);
}
//----------------- FinalCopyAssignmentContext ------------------------------------------------------------------

anceParser::FinalCopyAssignmentContext::FinalCopyAssignmentContext(AssignerContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::FinalCopyAssignmentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFinalCopyAssignment(this);
    else return visitor->visitChildren(this);
}
//----------------- CopyAssignmentContext ------------------------------------------------------------------

anceParser::CopyAssignmentContext::CopyAssignmentContext(AssignerContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::CopyAssignmentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitCopyAssignment(this);
    else return visitor->visitChildren(this);
}
anceParser::AssignerContext* anceParser::assigner()
{
    AssignerContext* _localctx = _tracker.createInstance<AssignerContext>(_ctx, getState());
    enterRule(_localctx, 36, anceParser::RuleAssigner);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(294);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__14:
            {
                _localctx = _tracker.createInstance<anceParser::CopyAssignmentContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(291);
                match(anceParser::T__14);
                break;
            }

            case anceParser::T__15:
            {
                _localctx = _tracker.createInstance<anceParser::MoveAssignmentContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(292);
                match(anceParser::T__15);
                break;
            }

            case anceParser::T__16:
            {
                _localctx = _tracker.createInstance<anceParser::FinalCopyAssignmentContext>(_localctx);
                enterOuterAlt(_localctx, 3);
                setState(293);
                match(anceParser::T__16);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DeleteStatementContext ------------------------------------------------------------------

anceParser::DeleteStatementContext::DeleteStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::DeleteStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

tree::TerminalNode* anceParser::DeleteStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

tree::TerminalNode* anceParser::DeleteStatementContext::BUFFER()
{
    return getToken(anceParser::BUFFER, 0);
}

size_t anceParser::DeleteStatementContext::getRuleIndex() const
{
    return anceParser::RuleDeleteStatement;
}

std::any anceParser::DeleteStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDeleteStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::DeleteStatementContext* anceParser::deleteStatement()
{
    DeleteStatementContext* _localctx = _tracker.createInstance<DeleteStatementContext>(_ctx, getState());
    enterRule(_localctx, 38, anceParser::RuleDeleteStatement);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(296);
        match(anceParser::T__17);
        setState(298);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::BUFFER)
        {
            setState(297);
            match(anceParser::BUFFER);
        }
        setState(300);
        expression(0);
        setState(301);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

anceParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::ReturnStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

anceParser::ExpressionContext* anceParser::ReturnStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::ReturnStatementContext::getRuleIndex() const
{
    return anceParser::RuleReturnStatement;
}

std::any anceParser::ReturnStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitReturnStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::ReturnStatementContext* anceParser::returnStatement()
{
    ReturnStatementContext* _localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
    enterRule(_localctx, 40, anceParser::RuleReturnStatement);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(303);
        match(anceParser::T__18);
        setState(305);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__1) | (1ULL << anceParser::T__20) | (1ULL << anceParser::T__25)
                    | (1ULL << anceParser::T__31) | (1ULL << anceParser::T__33) | (1ULL << anceParser::T__36)
                    | (1ULL << anceParser::T__41) | (1ULL << anceParser::T__47) | (1ULL << anceParser::T__50)
                    | (1ULL << anceParser::T__51) | (1ULL << anceParser::T__53) | (1ULL << anceParser::T__54)
                    | (1ULL << anceParser::T__55) | (1ULL << anceParser::T__56) | (1ULL << anceParser::T__57)
                    | (1ULL << anceParser::T__58) | (1ULL << anceParser::T__59) | (1ULL << anceParser::T__60)
                    | (1ULL << anceParser::T__61) | (1ULL << anceParser::T__62)))
                    != 0)
            || ((((_la - 64) & ~0x3fULL) == 0)
                && ((1ULL << (_la - 64))
                    & ((1ULL << (anceParser::T__63 - 64)) | (1ULL << (anceParser::T__64 - 64))
                       | (1ULL << (anceParser::T__65 - 64)) | (1ULL << (anceParser::NATIVE_INTEGER_TYPE - 64))
                       | (1ULL << (anceParser::SIGNED_INTEGER - 64)) | (1ULL << (anceParser::HEX_INTEGER - 64))
                       | (1ULL << (anceParser::BIN_INTEGER - 64)) | (1ULL << (anceParser::OCT_INTEGER - 64))
                       | (1ULL << (anceParser::HALF - 64)) | (1ULL << (anceParser::SINGLE - 64))
                       | (1ULL << (anceParser::DOUBLE - 64)) | (1ULL << (anceParser::QUAD - 64))
                       | (1ULL << (anceParser::STRING - 64)) | (1ULL << (anceParser::BYTE - 64))
                       | (1ULL << (anceParser::INTEGER - 64)) | (1ULL << (anceParser::IDENTIFIER - 64))))
                       != 0))
        {
            setState(304);
            expression(0);
        }
        setState(307);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssertStatementContext ------------------------------------------------------------------

anceParser::AssertStatementContext::AssertStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::AssertStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

tree::TerminalNode* anceParser::AssertStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::AssertStatementContext::getRuleIndex() const
{
    return anceParser::RuleAssertStatement;
}

std::any anceParser::AssertStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAssertStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::AssertStatementContext* anceParser::assertStatement()
{
    AssertStatementContext* _localctx = _tracker.createInstance<AssertStatementContext>(_ctx, getState());
    enterRule(_localctx, 42, anceParser::RuleAssertStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(309);
        match(anceParser::T__19);
        setState(310);
        expression(0);
        setState(311);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

anceParser::IfStatementContext::IfStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::IfStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

std::vector<anceParser::CodeContext*> anceParser::IfStatementContext::code()
{
    return getRuleContexts<anceParser::CodeContext>();
}

anceParser::CodeContext* anceParser::IfStatementContext::code(size_t i)
{
    return getRuleContext<anceParser::CodeContext>(i);
}

size_t anceParser::IfStatementContext::getRuleIndex() const
{
    return anceParser::RuleIfStatement;
}

std::any anceParser::IfStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIfStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::IfStatementContext* anceParser::ifStatement()
{
    IfStatementContext* _localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
    enterRule(_localctx, 44, anceParser::RuleIfStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(313);
        match(anceParser::T__20);
        setState(314);
        expression(0);
        setState(315);
        match(anceParser::T__21);
        setState(316);
        antlrcpp::downCast<IfStatementContext*>(_localctx)->ifBlock = code();
        setState(319);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx))
        {
            case 1:
            {
                setState(317);
                match(anceParser::T__22);
                setState(318);
                antlrcpp::downCast<IfStatementContext*>(_localctx)->elseBlock = code();
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

anceParser::WhileStatementContext::WhileStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::WhileStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::CodeContext* anceParser::WhileStatementContext::code()
{
    return getRuleContext<anceParser::CodeContext>(0);
}

size_t anceParser::WhileStatementContext::getRuleIndex() const
{
    return anceParser::RuleWhileStatement;
}

std::any anceParser::WhileStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitWhileStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::WhileStatementContext* anceParser::whileStatement()
{
    WhileStatementContext* _localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
    enterRule(_localctx, 46, anceParser::RuleWhileStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(321);
        match(anceParser::T__23);
        setState(322);
        expression(0);
        setState(323);
        match(anceParser::T__24);
        setState(324);
        code();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MatchStatementContext ------------------------------------------------------------------

anceParser::MatchStatementContext::MatchStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::MatchStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

std::vector<anceParser::MatchCaseContext*> anceParser::MatchStatementContext::matchCase()
{
    return getRuleContexts<anceParser::MatchCaseContext>();
}

anceParser::MatchCaseContext* anceParser::MatchStatementContext::matchCase(size_t i)
{
    return getRuleContext<anceParser::MatchCaseContext>(i);
}

size_t anceParser::MatchStatementContext::getRuleIndex() const
{
    return anceParser::RuleMatchStatement;
}

std::any anceParser::MatchStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMatchStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::MatchStatementContext* anceParser::matchStatement()
{
    MatchStatementContext* _localctx = _tracker.createInstance<MatchStatementContext>(_ctx, getState());
    enterRule(_localctx, 48, anceParser::RuleMatchStatement);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(326);
        match(anceParser::T__25);
        setState(327);
        expression(0);
        setState(328);
        match(anceParser::T__26);
        setState(329);
        match(anceParser::T__3);
        setState(333);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 30) & ~0x3fULL) == 0)
                && ((1ULL << (_la - 30))
                    & ((1ULL << (anceParser::T__29 - 30)) | (1ULL << (anceParser::T__54 - 30))
                       | (1ULL << (anceParser::T__55 - 30)) | (1ULL << (anceParser::SIGNED_INTEGER - 30))
                       | (1ULL << (anceParser::HEX_INTEGER - 30)) | (1ULL << (anceParser::BIN_INTEGER - 30))
                       | (1ULL << (anceParser::OCT_INTEGER - 30)) | (1ULL << (anceParser::HALF - 30))
                       | (1ULL << (anceParser::SINGLE - 30)) | (1ULL << (anceParser::DOUBLE - 30))
                       | (1ULL << (anceParser::QUAD - 30)) | (1ULL << (anceParser::STRING - 30))
                       | (1ULL << (anceParser::BYTE - 30)) | (1ULL << (anceParser::INTEGER - 30))
                       | (1ULL << (anceParser::IDENTIFIER - 30))))
                       != 0))
        {
            setState(330);
            matchCase();
            setState(335);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(336);
        match(anceParser::T__4);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MatchCaseContext ------------------------------------------------------------------

anceParser::MatchCaseContext::MatchCaseContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::MatchCaseContext::getRuleIndex() const
{
    return anceParser::RuleMatchCase;
}

void anceParser::MatchCaseContext::copyFrom(MatchCaseContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- LiteralCaseContext ------------------------------------------------------------------

std::vector<anceParser::LiteralExpressionContext*> anceParser::LiteralCaseContext::literalExpression()
{
    return getRuleContexts<anceParser::LiteralExpressionContext>();
}

anceParser::LiteralExpressionContext* anceParser::LiteralCaseContext::literalExpression(size_t i)
{
    return getRuleContext<anceParser::LiteralExpressionContext>(i);
}

anceParser::CodeContext* anceParser::LiteralCaseContext::code()
{
    return getRuleContext<anceParser::CodeContext>(0);
}

anceParser::LiteralCaseContext::LiteralCaseContext(MatchCaseContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LiteralCaseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLiteralCase(this);
    else return visitor->visitChildren(this);
}
//----------------- DefaultCaseContext ------------------------------------------------------------------

anceParser::CodeContext* anceParser::DefaultCaseContext::code()
{
    return getRuleContext<anceParser::CodeContext>(0);
}

anceParser::DefaultCaseContext::DefaultCaseContext(MatchCaseContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::DefaultCaseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDefaultCase(this);
    else return visitor->visitChildren(this);
}
anceParser::MatchCaseContext* anceParser::matchCase()
{
    MatchCaseContext* _localctx = _tracker.createInstance<MatchCaseContext>(_ctx, getState());
    enterRule(_localctx, 50, anceParser::RuleMatchCase);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(352);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__54:
            case anceParser::T__55:
            case anceParser::SIGNED_INTEGER:
            case anceParser::HEX_INTEGER:
            case anceParser::BIN_INTEGER:
            case anceParser::OCT_INTEGER:
            case anceParser::HALF:
            case anceParser::SINGLE:
            case anceParser::DOUBLE:
            case anceParser::QUAD:
            case anceParser::STRING:
            case anceParser::BYTE:
            case anceParser::INTEGER:
            case anceParser::IDENTIFIER:
            {
                _localctx = _tracker.createInstance<anceParser::LiteralCaseContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(338);
                literalExpression();
                setState(343);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == anceParser::T__27)
                {
                    setState(339);
                    match(anceParser::T__27);
                    setState(340);
                    literalExpression();
                    setState(345);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
                setState(346);
                match(anceParser::T__28);
                setState(347);
                code();
                break;
            }

            case anceParser::T__29:
            {
                _localctx = _tracker.createInstance<anceParser::DefaultCaseContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(349);
                match(anceParser::T__29);
                setState(350);
                match(anceParser::T__28);
                setState(351);
                code();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

anceParser::ExpressionContext::ExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::ExpressionContext::getRuleIndex() const
{
    return anceParser::RuleExpression;
}

void anceParser::ExpressionContext::copyFrom(ExpressionContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- IfExpressionContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::IfExpressionContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::IfExpressionContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::IfExpressionContext::IfExpressionContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::IfExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIfExpression(this);
    else return visitor->visitChildren(this);
}
//----------------- VariableContext ------------------------------------------------------------------

anceParser::VariableAccessContext* anceParser::VariableContext::variableAccess()
{
    return getRuleContext<anceParser::VariableAccessContext>(0);
}

anceParser::VariableContext::VariableContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::VariableContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVariable(this);
    else return visitor->visitChildren(this);
}
//----------------- AdressOfContext ------------------------------------------------------------------

anceParser::AddressofContext* anceParser::AdressOfContext::addressof()
{
    return getRuleContext<anceParser::AddressofContext>(0);
}

anceParser::AdressOfContext::AdressOfContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::AdressOfContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAdressOf(this);
    else return visitor->visitChildren(this);
}
//----------------- BinaryOperationContext ------------------------------------------------------------------

anceParser::BinaryOperatorMultiplicativeContext* anceParser::BinaryOperationContext::binaryOperatorMultiplicative()
{
    return getRuleContext<anceParser::BinaryOperatorMultiplicativeContext>(0);
}

std::vector<anceParser::ExpressionContext*> anceParser::BinaryOperationContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::BinaryOperationContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::BinaryOperatorAdditiveContext* anceParser::BinaryOperationContext::binaryOperatorAdditive()
{
    return getRuleContext<anceParser::BinaryOperatorAdditiveContext>(0);
}

anceParser::BinaryOperatorRelationalContext* anceParser::BinaryOperationContext::binaryOperatorRelational()
{
    return getRuleContext<anceParser::BinaryOperatorRelationalContext>(0);
}

anceParser::BinaryOperatorEqualityContext* anceParser::BinaryOperationContext::binaryOperatorEquality()
{
    return getRuleContext<anceParser::BinaryOperatorEqualityContext>(0);
}

anceParser::BinaryOperationContext::BinaryOperationContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::BinaryOperationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitBinaryOperation(this);
    else return visitor->visitChildren(this);
}
//----------------- NotOperationContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::NotOperationContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::NotOperationContext::NotOperationContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::NotOperationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitNotOperation(this);
    else return visitor->visitChildren(this);
}
//----------------- SubscriptContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::SubscriptContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::SubscriptContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::SubscriptContext::SubscriptContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::SubscriptContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSubscript(this);
    else return visitor->visitChildren(this);
}
//----------------- LogicalOrContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::LogicalOrContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::LogicalOrContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::LogicalOrContext::LogicalOrContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LogicalOrContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLogicalOr(this);
    else return visitor->visitChildren(this);
}
//----------------- MatchContext ------------------------------------------------------------------

anceParser::MatchExpressionContext* anceParser::MatchContext::matchExpression()
{
    return getRuleContext<anceParser::MatchExpressionContext>(0);
}

anceParser::MatchContext::MatchContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::MatchContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMatch(this);
    else return visitor->visitChildren(this);
}
//----------------- RefContext ------------------------------------------------------------------

anceParser::BindRefContext* anceParser::RefContext::bindRef()
{
    return getRuleContext<anceParser::BindRefContext>(0);
}

anceParser::RefContext::RefContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::RefContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitRef(this);
    else return visitor->visitChildren(this);
}
//----------------- IndependentContext ------------------------------------------------------------------

anceParser::IndependentExpressionContext* anceParser::IndependentContext::independentExpression()
{
    return getRuleContext<anceParser::IndependentExpressionContext>(0);
}

anceParser::IndependentContext::IndependentContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::IndependentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIndependent(this);
    else return visitor->visitChildren(this);
}
//----------------- ParenthesisContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::ParenthesisContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::ParenthesisContext::ParenthesisContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::ParenthesisContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitParenthesis(this);
    else return visitor->visitChildren(this);
}
//----------------- AllocContext ------------------------------------------------------------------

anceParser::AllocationContext* anceParser::AllocContext::allocation()
{
    return getRuleContext<anceParser::AllocationContext>(0);
}

anceParser::AllocContext::AllocContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::AllocContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAlloc(this);
    else return visitor->visitChildren(this);
}
//----------------- MemberAccessContext ------------------------------------------------------------------

tree::TerminalNode* anceParser::MemberAccessContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::ExpressionContext* anceParser::MemberAccessContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::MemberAccessContext::MemberAccessContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::MemberAccessContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMemberAccess(this);
    else return visitor->visitChildren(this);
}
//----------------- LiteralContext ------------------------------------------------------------------

anceParser::LiteralExpressionContext* anceParser::LiteralContext::literalExpression()
{
    return getRuleContext<anceParser::LiteralExpressionContext>(0);
}

anceParser::LiteralContext::LiteralContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLiteral(this);
    else return visitor->visitChildren(this);
}
//----------------- LogicalAndContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::LogicalAndContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::LogicalAndContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::LogicalAndContext::LogicalAndContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LogicalAndContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLogicalAnd(this);
    else return visitor->visitChildren(this);
}
//----------------- SizeOfContext ------------------------------------------------------------------

anceParser::SizeofTypeContext* anceParser::SizeOfContext::sizeofType()
{
    return getRuleContext<anceParser::SizeofTypeContext>(0);
}

anceParser::SizeofExpressionContext* anceParser::SizeOfContext::sizeofExpression()
{
    return getRuleContext<anceParser::SizeofExpressionContext>(0);
}

anceParser::SizeOfContext::SizeOfContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::SizeOfContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSizeOf(this);
    else return visitor->visitChildren(this);
}
//----------------- IndirectionContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::IndirectionContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::IndirectionContext::IndirectionContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::IndirectionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIndirection(this);
    else return visitor->visitChildren(this);
}

anceParser::ExpressionContext* anceParser::expression()
{
    return expression(0);
}

anceParser::ExpressionContext* anceParser::expression(int precedence)
{
    ParserRuleContext*             parentContext   = _ctx;
    size_t                         parentState     = getState();
    anceParser::ExpressionContext* _localctx       = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
    anceParser::ExpressionContext* previousContext = _localctx;
    (void) previousContext;// Silence compiler, in case the context is not used by generated code.
    size_t startState = 52;
    enterRecursionRule(_localctx, 52, anceParser::RuleExpression, precedence);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        unrollRecursionContexts(parentContext);
    });
    try
    {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(377);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx))
        {
            case 1:
            {
                _localctx       = _tracker.createInstance<VariableContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;

                setState(355);
                variableAccess();
                break;
            }

            case 2:
            {
                _localctx       = _tracker.createInstance<AllocContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(356);
                allocation();
                break;
            }

            case 3:
            {
                _localctx       = _tracker.createInstance<LiteralContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(357);
                literalExpression();
                break;
            }

            case 4:
            {
                _localctx       = _tracker.createInstance<AdressOfContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(358);
                addressof();
                break;
            }

            case 5:
            {
                _localctx       = _tracker.createInstance<RefContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(359);
                bindRef();
                break;
            }

            case 6:
            {
                _localctx       = _tracker.createInstance<SizeOfContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(360);
                sizeofType();
                break;
            }

            case 7:
            {
                _localctx       = _tracker.createInstance<SizeOfContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(361);
                sizeofExpression();
                break;
            }

            case 8:
            {
                _localctx       = _tracker.createInstance<IndependentContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(362);
                independentExpression();
                break;
            }

            case 9:
            {
                _localctx       = _tracker.createInstance<ParenthesisContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(363);
                match(anceParser::T__1);
                setState(364);
                expression(0);
                setState(365);
                match(anceParser::T__2);
                break;
            }

            case 10:
            {
                _localctx       = _tracker.createInstance<NotOperationContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(367);
                match(anceParser::T__33);
                setState(368);
                expression(9);
                break;
            }

            case 11:
            {
                _localctx       = _tracker.createInstance<IfExpressionContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(369);
                match(anceParser::T__20);
                setState(370);
                antlrcpp::downCast<IfExpressionContext*>(_localctx)->condition = expression(0);
                setState(371);
                match(anceParser::T__21);
                setState(372);
                antlrcpp::downCast<IfExpressionContext*>(_localctx)->thenBlock = expression(0);
                setState(373);
                match(anceParser::T__22);
                setState(374);
                antlrcpp::downCast<IfExpressionContext*>(_localctx)->elseBlock = expression(2);
                break;
            }

            case 12:
            {
                _localctx       = _tracker.createInstance<MatchContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(376);
                matchExpression();
                break;
            }

            default:
                break;
        }
        _ctx->stop = _input->LT(-1);
        setState(412);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER)
        {
            if (alt == 1)
            {
                if (!_parseListeners.empty()) triggerExitRuleEvent();
                previousContext = _localctx;
                setState(410);
                _errHandler->sync(this);
                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx))
                {
                    case 1:
                    {
                        auto newContext = _tracker.createInstance<BinaryOperationContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(379);

                        if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
                        setState(380);
                        binaryOperatorMultiplicative();
                        setState(381);
                        antlrcpp::downCast<BinaryOperationContext*>(_localctx)->right = expression(9);
                        break;
                    }

                    case 2:
                    {
                        auto newContext = _tracker.createInstance<BinaryOperationContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(383);

                        if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
                        setState(384);
                        binaryOperatorAdditive();
                        setState(385);
                        antlrcpp::downCast<BinaryOperationContext*>(_localctx)->right = expression(8);
                        break;
                    }

                    case 3:
                    {
                        auto newContext = _tracker.createInstance<BinaryOperationContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(387);

                        if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
                        setState(388);
                        binaryOperatorRelational();
                        setState(389);
                        antlrcpp::downCast<BinaryOperationContext*>(_localctx)->right = expression(7);
                        break;
                    }

                    case 4:
                    {
                        auto newContext = _tracker.createInstance<BinaryOperationContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(391);

                        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
                        setState(392);
                        binaryOperatorEquality();
                        setState(393);
                        antlrcpp::downCast<BinaryOperationContext*>(_localctx)->right = expression(6);
                        break;
                    }

                    case 5:
                    {
                        auto newContext = _tracker.createInstance<LogicalAndContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(395);

                        if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
                        setState(396);
                        match(anceParser::T__34);
                        setState(397);
                        antlrcpp::downCast<LogicalAndContext*>(_localctx)->right = expression(5);
                        break;
                    }

                    case 6:
                    {
                        auto newContext = _tracker.createInstance<LogicalOrContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(398);

                        if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
                        setState(399);
                        match(anceParser::T__35);
                        setState(400);
                        antlrcpp::downCast<LogicalOrContext*>(_localctx)->right = expression(4);
                        break;
                    }

                    case 7:
                    {
                        auto newContext = _tracker.createInstance<IndirectionContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx         = newContext;
                        newContext->value = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(401);

                        if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
                        setState(402);
                        match(anceParser::T__30);
                        break;
                    }

                    case 8:
                    {
                        auto newContext = _tracker.createInstance<SubscriptContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx           = newContext;
                        newContext->indexed = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(403);

                        if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
                        setState(404);
                        match(anceParser::T__31);
                        setState(405);
                        antlrcpp::downCast<SubscriptContext*>(_localctx)->index = expression(0);
                        setState(406);
                        match(anceParser::T__32);
                        break;
                    }

                    case 9:
                    {
                        auto newContext = _tracker.createInstance<MemberAccessContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx            = newContext;
                        newContext->accessed = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(408);

                        if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
                        setState(409);
                        match(anceParser::IDENTIFIER);
                        break;
                    }

                    default:
                        break;
                }
            }
            setState(414);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }
    return _localctx;
}

//----------------- BinaryOperatorMultiplicativeContext ------------------------------------------------------------------

anceParser::BinaryOperatorMultiplicativeContext::BinaryOperatorMultiplicativeContext(ParserRuleContext* parent,
                                                                                     size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BinaryOperatorMultiplicativeContext::getRuleIndex() const
{
    return anceParser::RuleBinaryOperatorMultiplicative;
}

void anceParser::BinaryOperatorMultiplicativeContext::copyFrom(BinaryOperatorMultiplicativeContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- MultiplicationContext ------------------------------------------------------------------

anceParser::MultiplicationContext::MultiplicationContext(BinaryOperatorMultiplicativeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::MultiplicationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMultiplication(this);
    else return visitor->visitChildren(this);
}
//----------------- DivisionContext ------------------------------------------------------------------

anceParser::DivisionContext::DivisionContext(BinaryOperatorMultiplicativeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::DivisionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDivision(this);
    else return visitor->visitChildren(this);
}
//----------------- RemainderContext ------------------------------------------------------------------

anceParser::RemainderContext::RemainderContext(BinaryOperatorMultiplicativeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::RemainderContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitRemainder(this);
    else return visitor->visitChildren(this);
}
anceParser::BinaryOperatorMultiplicativeContext* anceParser::binaryOperatorMultiplicative()
{
    BinaryOperatorMultiplicativeContext* _localctx =
        _tracker.createInstance<BinaryOperatorMultiplicativeContext>(_ctx, getState());
    enterRule(_localctx, 54, anceParser::RuleBinaryOperatorMultiplicative);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(418);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__36:
            {
                _localctx = _tracker.createInstance<anceParser::MultiplicationContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(415);
                match(anceParser::T__36);
                break;
            }

            case anceParser::T__37:
            {
                _localctx = _tracker.createInstance<anceParser::DivisionContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(416);
                match(anceParser::T__37);
                break;
            }

            case anceParser::T__38:
            {
                _localctx = _tracker.createInstance<anceParser::RemainderContext>(_localctx);
                enterOuterAlt(_localctx, 3);
                setState(417);
                match(anceParser::T__38);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryOperatorAdditiveContext ------------------------------------------------------------------

anceParser::BinaryOperatorAdditiveContext::BinaryOperatorAdditiveContext(ParserRuleContext* parent,
                                                                         size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BinaryOperatorAdditiveContext::getRuleIndex() const
{
    return anceParser::RuleBinaryOperatorAdditive;
}

void anceParser::BinaryOperatorAdditiveContext::copyFrom(BinaryOperatorAdditiveContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- AdditionContext ------------------------------------------------------------------

anceParser::AdditionContext::AdditionContext(BinaryOperatorAdditiveContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::AdditionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAddition(this);
    else return visitor->visitChildren(this);
}
//----------------- SubtractionContext ------------------------------------------------------------------

anceParser::SubtractionContext::SubtractionContext(BinaryOperatorAdditiveContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::SubtractionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSubtraction(this);
    else return visitor->visitChildren(this);
}
anceParser::BinaryOperatorAdditiveContext* anceParser::binaryOperatorAdditive()
{
    BinaryOperatorAdditiveContext* _localctx = _tracker.createInstance<BinaryOperatorAdditiveContext>(_ctx, getState());
    enterRule(_localctx, 56, anceParser::RuleBinaryOperatorAdditive);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(422);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__39:
            {
                _localctx = _tracker.createInstance<anceParser::AdditionContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(420);
                match(anceParser::T__39);
                break;
            }

            case anceParser::T__40:
            {
                _localctx = _tracker.createInstance<anceParser::SubtractionContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(421);
                match(anceParser::T__40);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryOperatorRelationalContext ------------------------------------------------------------------

anceParser::BinaryOperatorRelationalContext::BinaryOperatorRelationalContext(ParserRuleContext* parent,
                                                                             size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BinaryOperatorRelationalContext::getRuleIndex() const
{
    return anceParser::RuleBinaryOperatorRelational;
}

void anceParser::BinaryOperatorRelationalContext::copyFrom(BinaryOperatorRelationalContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- LessThanContext ------------------------------------------------------------------

anceParser::LessThanContext::LessThanContext(BinaryOperatorRelationalContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LessThanContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLessThan(this);
    else return visitor->visitChildren(this);
}
//----------------- LessThanOrEqualContext ------------------------------------------------------------------

anceParser::LessThanOrEqualContext::LessThanOrEqualContext(BinaryOperatorRelationalContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LessThanOrEqualContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLessThanOrEqual(this);
    else return visitor->visitChildren(this);
}
//----------------- GreaterThanContext ------------------------------------------------------------------

anceParser::GreaterThanContext::GreaterThanContext(BinaryOperatorRelationalContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::GreaterThanContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitGreaterThan(this);
    else return visitor->visitChildren(this);
}
//----------------- GreaterThanOrEqualContext ------------------------------------------------------------------

anceParser::GreaterThanOrEqualContext::GreaterThanOrEqualContext(BinaryOperatorRelationalContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::GreaterThanOrEqualContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitGreaterThanOrEqual(this);
    else return visitor->visitChildren(this);
}
anceParser::BinaryOperatorRelationalContext* anceParser::binaryOperatorRelational()
{
    BinaryOperatorRelationalContext* _localctx =
        _tracker.createInstance<BinaryOperatorRelationalContext>(_ctx, getState());
    enterRule(_localctx, 58, anceParser::RuleBinaryOperatorRelational);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(428);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__41:
            {
                _localctx = _tracker.createInstance<anceParser::LessThanContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(424);
                match(anceParser::T__41);
                break;
            }

            case anceParser::T__42:
            {
                _localctx = _tracker.createInstance<anceParser::LessThanOrEqualContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(425);
                match(anceParser::T__42);
                break;
            }

            case anceParser::T__43:
            {
                _localctx = _tracker.createInstance<anceParser::GreaterThanContext>(_localctx);
                enterOuterAlt(_localctx, 3);
                setState(426);
                match(anceParser::T__43);
                break;
            }

            case anceParser::T__44:
            {
                _localctx = _tracker.createInstance<anceParser::GreaterThanOrEqualContext>(_localctx);
                enterOuterAlt(_localctx, 4);
                setState(427);
                match(anceParser::T__44);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryOperatorEqualityContext ------------------------------------------------------------------

anceParser::BinaryOperatorEqualityContext::BinaryOperatorEqualityContext(ParserRuleContext* parent,
                                                                         size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BinaryOperatorEqualityContext::getRuleIndex() const
{
    return anceParser::RuleBinaryOperatorEquality;
}

void anceParser::BinaryOperatorEqualityContext::copyFrom(BinaryOperatorEqualityContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- NotEqualContext ------------------------------------------------------------------

anceParser::NotEqualContext::NotEqualContext(BinaryOperatorEqualityContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::NotEqualContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitNotEqual(this);
    else return visitor->visitChildren(this);
}
//----------------- EqualContext ------------------------------------------------------------------

anceParser::EqualContext::EqualContext(BinaryOperatorEqualityContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::EqualContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitEqual(this);
    else return visitor->visitChildren(this);
}
anceParser::BinaryOperatorEqualityContext* anceParser::binaryOperatorEquality()
{
    BinaryOperatorEqualityContext* _localctx = _tracker.createInstance<BinaryOperatorEqualityContext>(_ctx, getState());
    enterRule(_localctx, 60, anceParser::RuleBinaryOperatorEquality);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(432);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__45:
            {
                _localctx = _tracker.createInstance<anceParser::EqualContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(430);
                match(anceParser::T__45);
                break;
            }

            case anceParser::T__46:
            {
                _localctx = _tracker.createInstance<anceParser::NotEqualContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(431);
                match(anceParser::T__46);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IndependentExpressionContext ------------------------------------------------------------------

anceParser::IndependentExpressionContext::IndependentExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::FunctionCallContext* anceParser::IndependentExpressionContext::functionCall()
{
    return getRuleContext<anceParser::FunctionCallContext>(0);
}

size_t anceParser::IndependentExpressionContext::getRuleIndex() const
{
    return anceParser::RuleIndependentExpression;
}

std::any anceParser::IndependentExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitIndependentExpression(this);
    else return visitor->visitChildren(this);
}

anceParser::IndependentExpressionContext* anceParser::independentExpression()
{
    IndependentExpressionContext* _localctx = _tracker.createInstance<IndependentExpressionContext>(_ctx, getState());
    enterRule(_localctx, 62, anceParser::RuleIndependentExpression);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(434);
        functionCall();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FunctionCallContext ------------------------------------------------------------------

anceParser::FunctionCallContext::FunctionCallContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::FunctionCallContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::ArgumentsContext* anceParser::FunctionCallContext::arguments()
{
    return getRuleContext<anceParser::ArgumentsContext>(0);
}

anceParser::TypeContext* anceParser::FunctionCallContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

size_t anceParser::FunctionCallContext::getRuleIndex() const
{
    return anceParser::RuleFunctionCall;
}

std::any anceParser::FunctionCallContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFunctionCall(this);
    else return visitor->visitChildren(this);
}

anceParser::FunctionCallContext* anceParser::functionCall()
{
    FunctionCallContext* _localctx = _tracker.createInstance<FunctionCallContext>(_ctx, getState());
    enterRule(_localctx, 64, anceParser::RuleFunctionCall);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(446);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx))
        {
            case 1:
            {
                enterOuterAlt(_localctx, 1);
                setState(436);
                match(anceParser::IDENTIFIER);
                setState(437);
                match(anceParser::T__1);
                setState(438);
                arguments();
                setState(439);
                match(anceParser::T__2);
                break;
            }

            case 2:
            {
                enterOuterAlt(_localctx, 2);
                setState(441);
                type();
                setState(442);
                match(anceParser::T__1);
                setState(443);
                arguments();
                setState(444);
                match(anceParser::T__2);
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

anceParser::ArgumentsContext::ArgumentsContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<anceParser::ExpressionContext*> anceParser::ArgumentsContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::ArgumentsContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

size_t anceParser::ArgumentsContext::getRuleIndex() const
{
    return anceParser::RuleArguments;
}

std::any anceParser::ArgumentsContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitArguments(this);
    else return visitor->visitChildren(this);
}

anceParser::ArgumentsContext* anceParser::arguments()
{
    ArgumentsContext* _localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
    enterRule(_localctx, 66, anceParser::RuleArguments);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(456);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__1) | (1ULL << anceParser::T__20) | (1ULL << anceParser::T__25)
                    | (1ULL << anceParser::T__31) | (1ULL << anceParser::T__33) | (1ULL << anceParser::T__36)
                    | (1ULL << anceParser::T__41) | (1ULL << anceParser::T__47) | (1ULL << anceParser::T__50)
                    | (1ULL << anceParser::T__51) | (1ULL << anceParser::T__53) | (1ULL << anceParser::T__54)
                    | (1ULL << anceParser::T__55) | (1ULL << anceParser::T__56) | (1ULL << anceParser::T__57)
                    | (1ULL << anceParser::T__58) | (1ULL << anceParser::T__59) | (1ULL << anceParser::T__60)
                    | (1ULL << anceParser::T__61) | (1ULL << anceParser::T__62)))
                    != 0)
            || ((((_la - 64) & ~0x3fULL) == 0)
                && ((1ULL << (_la - 64))
                    & ((1ULL << (anceParser::T__63 - 64)) | (1ULL << (anceParser::T__64 - 64))
                       | (1ULL << (anceParser::T__65 - 64)) | (1ULL << (anceParser::NATIVE_INTEGER_TYPE - 64))
                       | (1ULL << (anceParser::SIGNED_INTEGER - 64)) | (1ULL << (anceParser::HEX_INTEGER - 64))
                       | (1ULL << (anceParser::BIN_INTEGER - 64)) | (1ULL << (anceParser::OCT_INTEGER - 64))
                       | (1ULL << (anceParser::HALF - 64)) | (1ULL << (anceParser::SINGLE - 64))
                       | (1ULL << (anceParser::DOUBLE - 64)) | (1ULL << (anceParser::QUAD - 64))
                       | (1ULL << (anceParser::STRING - 64)) | (1ULL << (anceParser::BYTE - 64))
                       | (1ULL << (anceParser::INTEGER - 64)) | (1ULL << (anceParser::IDENTIFIER - 64))))
                       != 0))
        {
            setState(448);
            expression(0);
            setState(453);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == anceParser::T__6)
            {
                setState(449);
                match(anceParser::T__6);
                setState(450);
                expression(0);
                setState(455);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VariableAccessContext ------------------------------------------------------------------

anceParser::VariableAccessContext::VariableAccessContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::VariableAccessContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

size_t anceParser::VariableAccessContext::getRuleIndex() const
{
    return anceParser::RuleVariableAccess;
}

std::any anceParser::VariableAccessContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVariableAccess(this);
    else return visitor->visitChildren(this);
}

anceParser::VariableAccessContext* anceParser::variableAccess()
{
    VariableAccessContext* _localctx = _tracker.createInstance<VariableAccessContext>(_ctx, getState());
    enterRule(_localctx, 68, anceParser::RuleVariableAccess);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(458);
        match(anceParser::IDENTIFIER);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AllocationContext ------------------------------------------------------------------

anceParser::AllocationContext::AllocationContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AllocatorContext* anceParser::AllocationContext::allocator()
{
    return getRuleContext<anceParser::AllocatorContext>(0);
}

anceParser::TypeContext* anceParser::AllocationContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::ExpressionContext* anceParser::AllocationContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::AllocationContext::getRuleIndex() const
{
    return anceParser::RuleAllocation;
}

std::any anceParser::AllocationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAllocation(this);
    else return visitor->visitChildren(this);
}

anceParser::AllocationContext* anceParser::allocation()
{
    AllocationContext* _localctx = _tracker.createInstance<AllocationContext>(_ctx, getState());
    enterRule(_localctx, 70, anceParser::RuleAllocation);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(460);
        match(anceParser::T__47);
        setState(465);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::T__31)
        {
            setState(461);
            match(anceParser::T__31);
            setState(462);
            expression(0);
            setState(463);
            match(anceParser::T__32);
        }
        setState(467);
        allocator();
        setState(468);
        type();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AllocatorContext ------------------------------------------------------------------

anceParser::AllocatorContext::AllocatorContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::AllocatorContext::getRuleIndex() const
{
    return anceParser::RuleAllocator;
}

void anceParser::AllocatorContext::copyFrom(AllocatorContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- DynamicContext ------------------------------------------------------------------

anceParser::DynamicContext::DynamicContext(AllocatorContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::DynamicContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDynamic(this);
    else return visitor->visitChildren(this);
}
//----------------- AutomaticContext ------------------------------------------------------------------

anceParser::AutomaticContext::AutomaticContext(AllocatorContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::AutomaticContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAutomatic(this);
    else return visitor->visitChildren(this);
}
anceParser::AllocatorContext* anceParser::allocator()
{
    AllocatorContext* _localctx = _tracker.createInstance<AllocatorContext>(_ctx, getState());
    enterRule(_localctx, 72, anceParser::RuleAllocator);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(472);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__48:
            {
                _localctx = _tracker.createInstance<anceParser::DynamicContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(470);
                match(anceParser::T__48);
                break;
            }

            case anceParser::T__49:
            {
                _localctx = _tracker.createInstance<anceParser::AutomaticContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(471);
                match(anceParser::T__49);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AddressofContext ------------------------------------------------------------------

anceParser::AddressofContext::AddressofContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::AddressofContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::AddressofContext::getRuleIndex() const
{
    return anceParser::RuleAddressof;
}

std::any anceParser::AddressofContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAddressof(this);
    else return visitor->visitChildren(this);
}

anceParser::AddressofContext* anceParser::addressof()
{
    AddressofContext* _localctx = _tracker.createInstance<AddressofContext>(_ctx, getState());
    enterRule(_localctx, 74, anceParser::RuleAddressof);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(474);
        match(anceParser::T__50);
        setState(475);
        expression(0);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BindRefContext ------------------------------------------------------------------

anceParser::BindRefContext::BindRefContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BindRefContext::getRuleIndex() const
{
    return anceParser::RuleBindRef;
}

void anceParser::BindRefContext::copyFrom(BindRefContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- BindReferenceToAddressContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::BindReferenceToAddressContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::BindReferenceToAddressContext::BindReferenceToAddressContext(BindRefContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::BindReferenceToAddressContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitBindReferenceToAddress(this);
    else return visitor->visitChildren(this);
}
//----------------- BindReferenceContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::BindReferenceContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::BindReferenceContext::BindReferenceContext(BindRefContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::BindReferenceContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitBindReference(this);
    else return visitor->visitChildren(this);
}
anceParser::BindRefContext* anceParser::bindRef()
{
    BindRefContext* _localctx = _tracker.createInstance<BindRefContext>(_ctx, getState());
    enterRule(_localctx, 76, anceParser::RuleBindRef);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(482);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx))
        {
            case 1:
            {
                _localctx = _tracker.createInstance<anceParser::BindReferenceContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(477);
                match(anceParser::T__51);
                setState(478);
                expression(0);
                break;
            }

            case 2:
            {
                _localctx = _tracker.createInstance<anceParser::BindReferenceToAddressContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(479);
                match(anceParser::T__51);
                setState(480);
                match(anceParser::T__52);
                setState(481);
                expression(0);
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SizeofTypeContext ------------------------------------------------------------------

anceParser::SizeofTypeContext::SizeofTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::TypeContext* anceParser::SizeofTypeContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

size_t anceParser::SizeofTypeContext::getRuleIndex() const
{
    return anceParser::RuleSizeofType;
}

std::any anceParser::SizeofTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSizeofType(this);
    else return visitor->visitChildren(this);
}

anceParser::SizeofTypeContext* anceParser::sizeofType()
{
    SizeofTypeContext* _localctx = _tracker.createInstance<SizeofTypeContext>(_ctx, getState());
    enterRule(_localctx, 78, anceParser::RuleSizeofType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(484);
        match(anceParser::T__53);
        setState(485);
        type();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SizeofExpressionContext ------------------------------------------------------------------

anceParser::SizeofExpressionContext::SizeofExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::SizeofExpressionContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::SizeofExpressionContext::getRuleIndex() const
{
    return anceParser::RuleSizeofExpression;
}

std::any anceParser::SizeofExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSizeofExpression(this);
    else return visitor->visitChildren(this);
}

anceParser::SizeofExpressionContext* anceParser::sizeofExpression()
{
    SizeofExpressionContext* _localctx = _tracker.createInstance<SizeofExpressionContext>(_ctx, getState());
    enterRule(_localctx, 80, anceParser::RuleSizeofExpression);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(487);
        match(anceParser::T__53);
        setState(488);
        match(anceParser::T__1);
        setState(489);
        expression(0);
        setState(490);
        match(anceParser::T__2);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MatchExpressionContext ------------------------------------------------------------------

anceParser::MatchExpressionContext::MatchExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::MatchExpressionContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

std::vector<anceParser::MatchExpressionCaseContext*> anceParser::MatchExpressionContext::matchExpressionCase()
{
    return getRuleContexts<anceParser::MatchExpressionCaseContext>();
}

anceParser::MatchExpressionCaseContext* anceParser::MatchExpressionContext::matchExpressionCase(size_t i)
{
    return getRuleContext<anceParser::MatchExpressionCaseContext>(i);
}

size_t anceParser::MatchExpressionContext::getRuleIndex() const
{
    return anceParser::RuleMatchExpression;
}

std::any anceParser::MatchExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMatchExpression(this);
    else return visitor->visitChildren(this);
}

anceParser::MatchExpressionContext* anceParser::matchExpression()
{
    MatchExpressionContext* _localctx = _tracker.createInstance<MatchExpressionContext>(_ctx, getState());
    enterRule(_localctx, 82, anceParser::RuleMatchExpression);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(492);
        match(anceParser::T__25);
        setState(493);
        antlrcpp::downCast<MatchExpressionContext*>(_localctx)->condition = expression(0);
        setState(494);
        match(anceParser::T__26);
        setState(495);
        match(anceParser::T__3);
        setState(504);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 30) & ~0x3fULL) == 0)
             && ((1ULL << (_la - 30))
                 & ((1ULL << (anceParser::T__29 - 30)) | (1ULL << (anceParser::T__54 - 30))
                    | (1ULL << (anceParser::T__55 - 30)) | (1ULL << (anceParser::SIGNED_INTEGER - 30))
                    | (1ULL << (anceParser::HEX_INTEGER - 30)) | (1ULL << (anceParser::BIN_INTEGER - 30))
                    | (1ULL << (anceParser::OCT_INTEGER - 30)) | (1ULL << (anceParser::HALF - 30))
                    | (1ULL << (anceParser::SINGLE - 30)) | (1ULL << (anceParser::DOUBLE - 30))
                    | (1ULL << (anceParser::QUAD - 30)) | (1ULL << (anceParser::STRING - 30))
                    | (1ULL << (anceParser::BYTE - 30)) | (1ULL << (anceParser::INTEGER - 30))
                    | (1ULL << (anceParser::IDENTIFIER - 30))))
                    != 0))
        {
            setState(496);
            matchExpressionCase();
            setState(501);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == anceParser::T__6)
            {
                setState(497);
                match(anceParser::T__6);
                setState(498);
                matchExpressionCase();
                setState(503);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
        }
        setState(506);
        match(anceParser::T__4);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MatchExpressionCaseContext ------------------------------------------------------------------

anceParser::MatchExpressionCaseContext::MatchExpressionCaseContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::MatchExpressionCaseContext::getRuleIndex() const
{
    return anceParser::RuleMatchExpressionCase;
}

void anceParser::MatchExpressionCaseContext::copyFrom(MatchExpressionCaseContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- LiteralExpressionCaseContext ------------------------------------------------------------------

std::vector<anceParser::LiteralExpressionContext*> anceParser::LiteralExpressionCaseContext::literalExpression()
{
    return getRuleContexts<anceParser::LiteralExpressionContext>();
}

anceParser::LiteralExpressionContext* anceParser::LiteralExpressionCaseContext::literalExpression(size_t i)
{
    return getRuleContext<anceParser::LiteralExpressionContext>(i);
}

anceParser::ExpressionContext* anceParser::LiteralExpressionCaseContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::LiteralExpressionCaseContext::LiteralExpressionCaseContext(MatchExpressionCaseContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LiteralExpressionCaseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitLiteralExpressionCase(this);
    else return visitor->visitChildren(this);
}
//----------------- DefaultExpressionCaseContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::DefaultExpressionCaseContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::DefaultExpressionCaseContext::DefaultExpressionCaseContext(MatchExpressionCaseContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::DefaultExpressionCaseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitDefaultExpressionCase(this);
    else return visitor->visitChildren(this);
}
anceParser::MatchExpressionCaseContext* anceParser::matchExpressionCase()
{
    MatchExpressionCaseContext* _localctx = _tracker.createInstance<MatchExpressionCaseContext>(_ctx, getState());
    enterRule(_localctx, 84, anceParser::RuleMatchExpressionCase);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(522);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__54:
            case anceParser::T__55:
            case anceParser::SIGNED_INTEGER:
            case anceParser::HEX_INTEGER:
            case anceParser::BIN_INTEGER:
            case anceParser::OCT_INTEGER:
            case anceParser::HALF:
            case anceParser::SINGLE:
            case anceParser::DOUBLE:
            case anceParser::QUAD:
            case anceParser::STRING:
            case anceParser::BYTE:
            case anceParser::INTEGER:
            case anceParser::IDENTIFIER:
            {
                _localctx = _tracker.createInstance<anceParser::LiteralExpressionCaseContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(508);
                literalExpression();
                setState(513);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == anceParser::T__27)
                {
                    setState(509);
                    match(anceParser::T__27);
                    setState(510);
                    literalExpression();
                    setState(515);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
                setState(516);
                match(anceParser::T__28);
                setState(517);
                expression(0);
                break;
            }

            case anceParser::T__29:
            {
                _localctx = _tracker.createInstance<anceParser::DefaultExpressionCaseContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(519);
                match(anceParser::T__29);
                setState(520);
                match(anceParser::T__28);
                setState(521);
                expression(0);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LiteralExpressionContext ------------------------------------------------------------------

anceParser::LiteralExpressionContext::LiteralExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::StringLiteralContext* anceParser::LiteralExpressionContext::stringLiteral()
{
    return getRuleContext<anceParser::StringLiteralContext>(0);
}

anceParser::ByteLiteralContext* anceParser::LiteralExpressionContext::byteLiteral()
{
    return getRuleContext<anceParser::ByteLiteralContext>(0);
}

anceParser::IntegerLiteralContext* anceParser::LiteralExpressionContext::integerLiteral()
{
    return getRuleContext<anceParser::IntegerLiteralContext>(0);
}

anceParser::FloatingPointLiteralContext* anceParser::LiteralExpressionContext::floatingPointLiteral()
{
    return getRuleContext<anceParser::FloatingPointLiteralContext>(0);
}

anceParser::BooleanLiteralContext* anceParser::LiteralExpressionContext::booleanLiteral()
{
    return getRuleContext<anceParser::BooleanLiteralContext>(0);
}

anceParser::SizeLiteralContext* anceParser::LiteralExpressionContext::sizeLiteral()
{
    return getRuleContext<anceParser::SizeLiteralContext>(0);
}

anceParser::DiffLiteralContext* anceParser::LiteralExpressionContext::diffLiteral()
{
    return getRuleContext<anceParser::DiffLiteralContext>(0);
}

size_t anceParser::LiteralExpressionContext::getRuleIndex() const
{
    return anceParser::RuleLiteralExpression;
}

std::any anceParser::LiteralExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLiteralExpression(this);
    else return visitor->visitChildren(this);
}

anceParser::LiteralExpressionContext* anceParser::literalExpression()
{
    LiteralExpressionContext* _localctx = _tracker.createInstance<LiteralExpressionContext>(_ctx, getState());
    enterRule(_localctx, 86, anceParser::RuleLiteralExpression);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(531);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx))
        {
            case 1:
            {
                enterOuterAlt(_localctx, 1);
                setState(524);
                stringLiteral();
                break;
            }

            case 2:
            {
                enterOuterAlt(_localctx, 2);
                setState(525);
                byteLiteral();
                break;
            }

            case 3:
            {
                enterOuterAlt(_localctx, 3);
                setState(526);
                integerLiteral();
                break;
            }

            case 4:
            {
                enterOuterAlt(_localctx, 4);
                setState(527);
                floatingPointLiteral();
                break;
            }

            case 5:
            {
                enterOuterAlt(_localctx, 5);
                setState(528);
                booleanLiteral();
                break;
            }

            case 6:
            {
                enterOuterAlt(_localctx, 6);
                setState(529);
                sizeLiteral();
                break;
            }

            case 7:
            {
                enterOuterAlt(_localctx, 7);
                setState(530);
                diffLiteral();
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

anceParser::StringLiteralContext::StringLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::StringLiteralContext::STRING()
{
    return getToken(anceParser::STRING, 0);
}

tree::TerminalNode* anceParser::StringLiteralContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

size_t anceParser::StringLiteralContext::getRuleIndex() const
{
    return anceParser::RuleStringLiteral;
}

std::any anceParser::StringLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitStringLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::StringLiteralContext* anceParser::stringLiteral()
{
    StringLiteralContext* _localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
    enterRule(_localctx, 88, anceParser::RuleStringLiteral);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(534);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::IDENTIFIER)
        {
            setState(533);
            antlrcpp::downCast<StringLiteralContext*>(_localctx)->prefix = match(anceParser::IDENTIFIER);
        }
        setState(536);
        match(anceParser::STRING);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ByteLiteralContext ------------------------------------------------------------------

anceParser::ByteLiteralContext::ByteLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::ByteLiteralContext::BYTE()
{
    return getToken(anceParser::BYTE, 0);
}

size_t anceParser::ByteLiteralContext::getRuleIndex() const
{
    return anceParser::RuleByteLiteral;
}

std::any anceParser::ByteLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitByteLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::ByteLiteralContext* anceParser::byteLiteral()
{
    ByteLiteralContext* _localctx = _tracker.createInstance<ByteLiteralContext>(_ctx, getState());
    enterRule(_localctx, 90, anceParser::RuleByteLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(538);
        match(anceParser::BYTE);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

anceParser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::NormalIntegerContext* anceParser::IntegerLiteralContext::normalInteger()
{
    return getRuleContext<anceParser::NormalIntegerContext>(0);
}

anceParser::SpecialIntegerContext* anceParser::IntegerLiteralContext::specialInteger()
{
    return getRuleContext<anceParser::SpecialIntegerContext>(0);
}

size_t anceParser::IntegerLiteralContext::getRuleIndex() const
{
    return anceParser::RuleIntegerLiteral;
}

std::any anceParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIntegerLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::IntegerLiteralContext* anceParser::integerLiteral()
{
    IntegerLiteralContext* _localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
    enterRule(_localctx, 92, anceParser::RuleIntegerLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(542);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::SIGNED_INTEGER:
            case anceParser::INTEGER:
            {
                enterOuterAlt(_localctx, 1);
                setState(540);
                normalInteger();
                break;
            }

            case anceParser::HEX_INTEGER:
            case anceParser::BIN_INTEGER:
            case anceParser::OCT_INTEGER:
            {
                enterOuterAlt(_localctx, 2);
                setState(541);
                specialInteger();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- NormalIntegerContext ------------------------------------------------------------------

anceParser::NormalIntegerContext::NormalIntegerContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<tree::TerminalNode*> anceParser::NormalIntegerContext::INTEGER()
{
    return getTokens(anceParser::INTEGER);
}

tree::TerminalNode* anceParser::NormalIntegerContext::INTEGER(size_t i)
{
    return getToken(anceParser::INTEGER, i);
}

tree::TerminalNode* anceParser::NormalIntegerContext::SIGNED_INTEGER()
{
    return getToken(anceParser::SIGNED_INTEGER, 0);
}

size_t anceParser::NormalIntegerContext::getRuleIndex() const
{
    return anceParser::RuleNormalInteger;
}

std::any anceParser::NormalIntegerContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitNormalInteger(this);
    else return visitor->visitChildren(this);
}

anceParser::NormalIntegerContext* anceParser::normalInteger()
{
    NormalIntegerContext* _localctx = _tracker.createInstance<NormalIntegerContext>(_ctx, getState());
    enterRule(_localctx, 94, anceParser::RuleNormalInteger);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(546);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::INTEGER:
            {
                setState(544);
                antlrcpp::downCast<NormalIntegerContext*>(_localctx)->uvalue = match(anceParser::INTEGER);
                break;
            }

            case anceParser::SIGNED_INTEGER:
            {
                setState(545);
                antlrcpp::downCast<NormalIntegerContext*>(_localctx)->svalue = match(anceParser::SIGNED_INTEGER);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
        setState(550);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx))
        {
            case 1:
            {
                setState(548);
                match(anceParser::T__0);
                setState(549);
                antlrcpp::downCast<NormalIntegerContext*>(_localctx)->width = match(anceParser::INTEGER);
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SpecialIntegerContext ------------------------------------------------------------------

anceParser::SpecialIntegerContext::SpecialIntegerContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::SpecialIntegerContext::HEX_INTEGER()
{
    return getToken(anceParser::HEX_INTEGER, 0);
}

tree::TerminalNode* anceParser::SpecialIntegerContext::INTEGER()
{
    return getToken(anceParser::INTEGER, 0);
}

tree::TerminalNode* anceParser::SpecialIntegerContext::BIN_INTEGER()
{
    return getToken(anceParser::BIN_INTEGER, 0);
}

tree::TerminalNode* anceParser::SpecialIntegerContext::OCT_INTEGER()
{
    return getToken(anceParser::OCT_INTEGER, 0);
}

size_t anceParser::SpecialIntegerContext::getRuleIndex() const
{
    return anceParser::RuleSpecialInteger;
}

std::any anceParser::SpecialIntegerContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSpecialInteger(this);
    else return visitor->visitChildren(this);
}

anceParser::SpecialIntegerContext* anceParser::specialInteger()
{
    SpecialIntegerContext* _localctx = _tracker.createInstance<SpecialIntegerContext>(_ctx, getState());
    enterRule(_localctx, 96, anceParser::RuleSpecialInteger);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(561);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::HEX_INTEGER:
            {
                enterOuterAlt(_localctx, 1);
                setState(552);
                match(anceParser::HEX_INTEGER);
                setState(553);
                match(anceParser::T__0);
                setState(554);
                antlrcpp::downCast<SpecialIntegerContext*>(_localctx)->width = match(anceParser::INTEGER);
                break;
            }

            case anceParser::BIN_INTEGER:
            {
                enterOuterAlt(_localctx, 2);
                setState(555);
                match(anceParser::BIN_INTEGER);
                setState(556);
                match(anceParser::T__0);
                setState(557);
                antlrcpp::downCast<SpecialIntegerContext*>(_localctx)->width = match(anceParser::INTEGER);
                break;
            }

            case anceParser::OCT_INTEGER:
            {
                enterOuterAlt(_localctx, 3);
                setState(558);
                match(anceParser::OCT_INTEGER);
                setState(559);
                match(anceParser::T__0);
                setState(560);
                antlrcpp::downCast<SpecialIntegerContext*>(_localctx)->width = match(anceParser::INTEGER);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FloatingPointLiteralContext ------------------------------------------------------------------

anceParser::FloatingPointLiteralContext::FloatingPointLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::FloatingPointLiteralContext::HALF()
{
    return getToken(anceParser::HALF, 0);
}

tree::TerminalNode* anceParser::FloatingPointLiteralContext::SINGLE()
{
    return getToken(anceParser::SINGLE, 0);
}

tree::TerminalNode* anceParser::FloatingPointLiteralContext::DOUBLE()
{
    return getToken(anceParser::DOUBLE, 0);
}

tree::TerminalNode* anceParser::FloatingPointLiteralContext::QUAD()
{
    return getToken(anceParser::QUAD, 0);
}

size_t anceParser::FloatingPointLiteralContext::getRuleIndex() const
{
    return anceParser::RuleFloatingPointLiteral;
}

std::any anceParser::FloatingPointLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFloatingPointLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::FloatingPointLiteralContext* anceParser::floatingPointLiteral()
{
    FloatingPointLiteralContext* _localctx = _tracker.createInstance<FloatingPointLiteralContext>(_ctx, getState());
    enterRule(_localctx, 98, anceParser::RuleFloatingPointLiteral);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(563);
        _la = _input->LA(1);
        if (!(((((_la - 72) & ~0x3fULL) == 0)
               && ((1ULL << (_la - 72))
                   & ((1ULL << (anceParser::HALF - 72)) | (1ULL << (anceParser::SINGLE - 72))
                      | (1ULL << (anceParser::DOUBLE - 72)) | (1ULL << (anceParser::QUAD - 72))))
                      != 0)))
        {
            _errHandler->recoverInline(this);
        }
        else
        {
            _errHandler->reportMatch(this);
            consume();
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

anceParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BooleanLiteralContext::getRuleIndex() const
{
    return anceParser::RuleBooleanLiteral;
}

void anceParser::BooleanLiteralContext::copyFrom(BooleanLiteralContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- TrueContext ------------------------------------------------------------------

anceParser::TrueContext::TrueContext(BooleanLiteralContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::TrueContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitTrue(this);
    else return visitor->visitChildren(this);
}
//----------------- FalseContext ------------------------------------------------------------------

anceParser::FalseContext::FalseContext(BooleanLiteralContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::FalseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFalse(this);
    else return visitor->visitChildren(this);
}
anceParser::BooleanLiteralContext* anceParser::booleanLiteral()
{
    BooleanLiteralContext* _localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
    enterRule(_localctx, 100, anceParser::RuleBooleanLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(567);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__54:
            {
                _localctx = _tracker.createInstance<anceParser::TrueContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(565);
                match(anceParser::T__54);
                break;
            }

            case anceParser::T__55:
            {
                _localctx = _tracker.createInstance<anceParser::FalseContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(566);
                match(anceParser::T__55);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SizeLiteralContext ------------------------------------------------------------------

anceParser::SizeLiteralContext::SizeLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::SizeLiteralContext::INTEGER()
{
    return getToken(anceParser::INTEGER, 0);
}

size_t anceParser::SizeLiteralContext::getRuleIndex() const
{
    return anceParser::RuleSizeLiteral;
}

std::any anceParser::SizeLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSizeLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::SizeLiteralContext* anceParser::sizeLiteral()
{
    SizeLiteralContext* _localctx = _tracker.createInstance<SizeLiteralContext>(_ctx, getState());
    enterRule(_localctx, 102, anceParser::RuleSizeLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(569);
        match(anceParser::INTEGER);
        setState(570);
        match(anceParser::T__0);
        setState(571);
        match(anceParser::T__56);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DiffLiteralContext ------------------------------------------------------------------

anceParser::DiffLiteralContext::DiffLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::DiffLiteralContext::SIGNED_INTEGER()
{
    return getToken(anceParser::SIGNED_INTEGER, 0);
}

size_t anceParser::DiffLiteralContext::getRuleIndex() const
{
    return anceParser::RuleDiffLiteral;
}

std::any anceParser::DiffLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDiffLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::DiffLiteralContext* anceParser::diffLiteral()
{
    DiffLiteralContext* _localctx = _tracker.createInstance<DiffLiteralContext>(_ctx, getState());
    enterRule(_localctx, 104, anceParser::RuleDiffLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(573);
        match(anceParser::SIGNED_INTEGER);
        setState(574);
        match(anceParser::T__0);
        setState(575);
        match(anceParser::T__57);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

anceParser::TypeContext::TypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::TypeContext::getRuleIndex() const
{
    return anceParser::RuleType;
}

void anceParser::TypeContext::copyFrom(TypeContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- IntegerContext ------------------------------------------------------------------

anceParser::IntegerTypeContext* anceParser::IntegerContext::integerType()
{
    return getRuleContext<anceParser::IntegerTypeContext>(0);
}

anceParser::IntegerContext::IntegerContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::IntegerContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitInteger(this);
    else return visitor->visitChildren(this);
}
//----------------- ArrayContext ------------------------------------------------------------------

anceParser::ArrayTypeContext* anceParser::ArrayContext::arrayType()
{
    return getRuleContext<anceParser::ArrayTypeContext>(0);
}

anceParser::ArrayContext::ArrayContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::ArrayContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitArray(this);
    else return visitor->visitChildren(this);
}
//----------------- KeywordContext ------------------------------------------------------------------

anceParser::KeywordTypeContext* anceParser::KeywordContext::keywordType()
{
    return getRuleContext<anceParser::KeywordTypeContext>(0);
}

anceParser::KeywordContext::KeywordContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::KeywordContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitKeyword(this);
    else return visitor->visitChildren(this);
}
//----------------- ReferenceContext ------------------------------------------------------------------

anceParser::TypeContext* anceParser::ReferenceContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::ReferenceContext::ReferenceContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::ReferenceContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitReference(this);
    else return visitor->visitChildren(this);
}
//----------------- PointerContext ------------------------------------------------------------------

anceParser::TypeContext* anceParser::PointerContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::PointerContext::PointerContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::PointerContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitPointer(this);
    else return visitor->visitChildren(this);
}
//----------------- CustomContext ------------------------------------------------------------------

anceParser::CustomTypeContext* anceParser::CustomContext::customType()
{
    return getRuleContext<anceParser::CustomTypeContext>(0);
}

anceParser::CustomContext::CustomContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::CustomContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitCustom(this);
    else return visitor->visitChildren(this);
}
//----------------- VectorContext ------------------------------------------------------------------

anceParser::VectorTypeContext* anceParser::VectorContext::vectorType()
{
    return getRuleContext<anceParser::VectorTypeContext>(0);
}

anceParser::VectorContext::VectorContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::VectorContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVector(this);
    else return visitor->visitChildren(this);
}
anceParser::TypeContext* anceParser::type()
{
    TypeContext* _localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
    enterRule(_localctx, 106, anceParser::RuleType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(586);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::NATIVE_INTEGER_TYPE:
            {
                _localctx = _tracker.createInstance<anceParser::IntegerContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(577);
                integerType();
                break;
            }

            case anceParser::T__31:
            {
                _localctx = _tracker.createInstance<anceParser::ArrayContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(578);
                arrayType();
                break;
            }

            case anceParser::T__41:
            {
                _localctx = _tracker.createInstance<anceParser::VectorContext>(_localctx);
                enterOuterAlt(_localctx, 3);
                setState(579);
                vectorType();
                break;
            }

            case anceParser::T__56:
            case anceParser::T__57:
            case anceParser::T__59:
            case anceParser::T__60:
            case anceParser::T__61:
            case anceParser::T__62:
            case anceParser::T__63:
            case anceParser::T__64:
            case anceParser::T__65:
            {
                _localctx = _tracker.createInstance<anceParser::KeywordContext>(_localctx);
                enterOuterAlt(_localctx, 4);
                setState(580);
                keywordType();
                break;
            }

            case anceParser::T__36:
            {
                _localctx = _tracker.createInstance<anceParser::PointerContext>(_localctx);
                enterOuterAlt(_localctx, 5);
                setState(581);
                match(anceParser::T__36);
                setState(582);
                type();
                break;
            }

            case anceParser::T__58:
            {
                _localctx = _tracker.createInstance<anceParser::ReferenceContext>(_localctx);
                enterOuterAlt(_localctx, 6);
                setState(583);
                match(anceParser::T__58);
                setState(584);
                type();
                break;
            }

            case anceParser::IDENTIFIER:
            {
                _localctx = _tracker.createInstance<anceParser::CustomContext>(_localctx);
                enterOuterAlt(_localctx, 7);
                setState(585);
                customType();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IntegerTypeContext ------------------------------------------------------------------

anceParser::IntegerTypeContext::IntegerTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::IntegerTypeContext::NATIVE_INTEGER_TYPE()
{
    return getToken(anceParser::NATIVE_INTEGER_TYPE, 0);
}

size_t anceParser::IntegerTypeContext::getRuleIndex() const
{
    return anceParser::RuleIntegerType;
}

std::any anceParser::IntegerTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIntegerType(this);
    else return visitor->visitChildren(this);
}

anceParser::IntegerTypeContext* anceParser::integerType()
{
    IntegerTypeContext* _localctx = _tracker.createInstance<IntegerTypeContext>(_ctx, getState());
    enterRule(_localctx, 108, anceParser::RuleIntegerType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(588);
        match(anceParser::NATIVE_INTEGER_TYPE);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

anceParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::TypeContext* anceParser::ArrayTypeContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::ArrayTypeContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

tree::TerminalNode* anceParser::ArrayTypeContext::INTEGER()
{
    return getToken(anceParser::INTEGER, 0);
}

size_t anceParser::ArrayTypeContext::getRuleIndex() const
{
    return anceParser::RuleArrayType;
}

std::any anceParser::ArrayTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitArrayType(this);
    else return visitor->visitChildren(this);
}

anceParser::ArrayTypeContext* anceParser::arrayType()
{
    ArrayTypeContext* _localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
    enterRule(_localctx, 110, anceParser::RuleArrayType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(590);
        match(anceParser::T__31);
        setState(591);
        type();
        setState(592);
        match(anceParser::SEMICOLON);
        setState(593);
        match(anceParser::INTEGER);
        setState(594);
        match(anceParser::T__32);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VectorTypeContext ------------------------------------------------------------------

anceParser::VectorTypeContext::VectorTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::TypeContext* anceParser::VectorTypeContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::VectorTypeContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

tree::TerminalNode* anceParser::VectorTypeContext::INTEGER()
{
    return getToken(anceParser::INTEGER, 0);
}

size_t anceParser::VectorTypeContext::getRuleIndex() const
{
    return anceParser::RuleVectorType;
}

std::any anceParser::VectorTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVectorType(this);
    else return visitor->visitChildren(this);
}

anceParser::VectorTypeContext* anceParser::vectorType()
{
    VectorTypeContext* _localctx = _tracker.createInstance<VectorTypeContext>(_ctx, getState());
    enterRule(_localctx, 112, anceParser::RuleVectorType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(596);
        match(anceParser::T__41);
        setState(597);
        type();
        setState(598);
        match(anceParser::SEMICOLON);
        setState(599);
        match(anceParser::INTEGER);
        setState(600);
        match(anceParser::T__43);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- KeywordTypeContext ------------------------------------------------------------------

anceParser::KeywordTypeContext::KeywordTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::FloatingPointTypeContext* anceParser::KeywordTypeContext::floatingPointType()
{
    return getRuleContext<anceParser::FloatingPointTypeContext>(0);
}

anceParser::TargetDependentTypeContext* anceParser::KeywordTypeContext::targetDependentType()
{
    return getRuleContext<anceParser::TargetDependentTypeContext>(0);
}

anceParser::BooleanTypeContext* anceParser::KeywordTypeContext::booleanType()
{
    return getRuleContext<anceParser::BooleanTypeContext>(0);
}

anceParser::VoidTypeContext* anceParser::KeywordTypeContext::voidType()
{
    return getRuleContext<anceParser::VoidTypeContext>(0);
}

size_t anceParser::KeywordTypeContext::getRuleIndex() const
{
    return anceParser::RuleKeywordType;
}

std::any anceParser::KeywordTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitKeywordType(this);
    else return visitor->visitChildren(this);
}

anceParser::KeywordTypeContext* anceParser::keywordType()
{
    KeywordTypeContext* _localctx = _tracker.createInstance<KeywordTypeContext>(_ctx, getState());
    enterRule(_localctx, 114, anceParser::RuleKeywordType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(606);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__59:
            case anceParser::T__60:
            case anceParser::T__61:
            case anceParser::T__62:
            {
                enterOuterAlt(_localctx, 1);
                setState(602);
                floatingPointType();
                break;
            }

            case anceParser::T__56:
            case anceParser::T__57:
            case anceParser::T__63:
            {
                enterOuterAlt(_localctx, 2);
                setState(603);
                targetDependentType();
                break;
            }

            case anceParser::T__64:
            {
                enterOuterAlt(_localctx, 3);
                setState(604);
                booleanType();
                break;
            }

            case anceParser::T__65:
            {
                enterOuterAlt(_localctx, 4);
                setState(605);
                voidType();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FloatingPointTypeContext ------------------------------------------------------------------

anceParser::FloatingPointTypeContext::FloatingPointTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::FloatingPointTypeContext::getRuleIndex() const
{
    return anceParser::RuleFloatingPointType;
}

std::any anceParser::FloatingPointTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFloatingPointType(this);
    else return visitor->visitChildren(this);
}

anceParser::FloatingPointTypeContext* anceParser::floatingPointType()
{
    FloatingPointTypeContext* _localctx = _tracker.createInstance<FloatingPointTypeContext>(_ctx, getState());
    enterRule(_localctx, 116, anceParser::RuleFloatingPointType);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(608);
        _la = _input->LA(1);
        if (!((((_la & ~0x3fULL) == 0)
               && ((1ULL << _la)
                   & ((1ULL << anceParser::T__59) | (1ULL << anceParser::T__60) | (1ULL << anceParser::T__61)
                      | (1ULL << anceParser::T__62)))
                      != 0)))
        {
            _errHandler->recoverInline(this);
        }
        else
        {
            _errHandler->reportMatch(this);
            consume();
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TargetDependentTypeContext ------------------------------------------------------------------

anceParser::TargetDependentTypeContext::TargetDependentTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::TargetDependentTypeContext::getRuleIndex() const
{
    return anceParser::RuleTargetDependentType;
}

std::any anceParser::TargetDependentTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitTargetDependentType(this);
    else return visitor->visitChildren(this);
}

anceParser::TargetDependentTypeContext* anceParser::targetDependentType()
{
    TargetDependentTypeContext* _localctx = _tracker.createInstance<TargetDependentTypeContext>(_ctx, getState());
    enterRule(_localctx, 118, anceParser::RuleTargetDependentType);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(610);
        _la = _input->LA(1);
        if (!(((((_la - 57) & ~0x3fULL) == 0)
               && ((1ULL << (_la - 57))
                   & ((1ULL << (anceParser::T__56 - 57)) | (1ULL << (anceParser::T__57 - 57))
                      | (1ULL << (anceParser::T__63 - 57))))
                      != 0)))
        {
            _errHandler->recoverInline(this);
        }
        else
        {
            _errHandler->reportMatch(this);
            consume();
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BooleanTypeContext ------------------------------------------------------------------

anceParser::BooleanTypeContext::BooleanTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BooleanTypeContext::getRuleIndex() const
{
    return anceParser::RuleBooleanType;
}

std::any anceParser::BooleanTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitBooleanType(this);
    else return visitor->visitChildren(this);
}

anceParser::BooleanTypeContext* anceParser::booleanType()
{
    BooleanTypeContext* _localctx = _tracker.createInstance<BooleanTypeContext>(_ctx, getState());
    enterRule(_localctx, 120, anceParser::RuleBooleanType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(612);
        match(anceParser::T__64);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VoidTypeContext ------------------------------------------------------------------

anceParser::VoidTypeContext::VoidTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::VoidTypeContext::getRuleIndex() const
{
    return anceParser::RuleVoidType;
}

std::any anceParser::VoidTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVoidType(this);
    else return visitor->visitChildren(this);
}

anceParser::VoidTypeContext* anceParser::voidType()
{
    VoidTypeContext* _localctx = _tracker.createInstance<VoidTypeContext>(_ctx, getState());
    enterRule(_localctx, 122, anceParser::RuleVoidType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(614);
        match(anceParser::T__65);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CustomTypeContext ------------------------------------------------------------------

anceParser::CustomTypeContext::CustomTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::CustomTypeContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

size_t anceParser::CustomTypeContext::getRuleIndex() const
{
    return anceParser::RuleCustomType;
}

std::any anceParser::CustomTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitCustomType(this);
    else return visitor->visitChildren(this);
}

anceParser::CustomTypeContext* anceParser::customType()
{
    CustomTypeContext* _localctx = _tracker.createInstance<CustomTypeContext>(_ctx, getState());
    enterRule(_localctx, 124, anceParser::RuleCustomType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(616);
        match(anceParser::IDENTIFIER);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

bool anceParser::sempred(RuleContext* context, size_t ruleIndex, size_t predicateIndex)
{
    switch (ruleIndex)
    {
        case 26:
            return expressionSempred(antlrcpp::downCast<ExpressionContext*>(context), predicateIndex);

        default:
            break;
    }
    return true;
}

bool anceParser::expressionSempred(ExpressionContext* _localctx, size_t predicateIndex)
{
    switch (predicateIndex)
    {
        case 0:
            return precpred(_ctx, 8);
        case 1:
            return precpred(_ctx, 7);
        case 2:
            return precpred(_ctx, 6);
        case 3:
            return precpred(_ctx, 5);
        case 4:
            return precpred(_ctx, 4);
        case 5:
            return precpred(_ctx, 3);
        case 6:
            return precpred(_ctx, 18);
        case 7:
            return precpred(_ctx, 17);
        case 8:
            return precpred(_ctx, 16);

        default:
            break;
    }
    return true;
}

void anceParser::initialize()
{
    std::call_once(anceParserOnceFlag, anceParserInitialize);
}
