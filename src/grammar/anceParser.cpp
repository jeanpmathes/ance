
// Generated from ./src/grammar/ance.g4 by ANTLR 4.10.1

#include "anceVisitor.h"

#include "anceParser.h"

using namespace antlrcpp;

using namespace antlr4;

namespace
{

    struct AnceParserStaticData final {
        AnceParserStaticData(std::vector<std::string> ruleNames,
                             std::vector<std::string> literalNames,
                             std::vector<std::string> symbolicNames)
            : ruleNames(std::move(ruleNames))
            , literalNames(std::move(literalNames))
            , symbolicNames(std::move(symbolicNames))
            , vocabulary(this->literalNames, this->symbolicNames)
        {}

        AnceParserStaticData(const AnceParserStaticData&)            = delete;
        AnceParserStaticData(AnceParserStaticData&&)                 = delete;
        AnceParserStaticData& operator=(const AnceParserStaticData&) = delete;
        AnceParserStaticData& operator=(AnceParserStaticData&&)      = delete;

        std::vector<antlr4::dfa::DFA>       decisionToDFA;
        antlr4::atn::PredictionContextCache sharedContextCache;
        const std::vector<std::string>      ruleNames;
        const std::vector<std::string>      literalNames;
        const std::vector<std::string>      symbolicNames;
        const antlr4::dfa::Vocabulary       vocabulary;
        antlr4::atn::SerializedATNView      serializedATN;
        std::unique_ptr<antlr4::atn::ATN>   atn;
    };

    std::once_flag        anceParserOnceFlag;
    AnceParserStaticData* anceParserStaticData = nullptr;

    void anceParserInitialize()
    {
        assert(anceParserStaticData == nullptr);
        auto staticData =
            std::make_unique<AnceParserStaticData>(std::vector<std::string> {"file",
                                                                             "variableDeclaration",
                                                                             "function",
                                                                             "parameters",
                                                                             "parameter",
                                                                             "typeDefinition",
                                                                             "defineAlias",
                                                                             "structDefinition",
                                                                             "member",
                                                                             "accessModifier",
                                                                             "code",
                                                                             "block",
                                                                             "statement",
                                                                             "expressionStatement",
                                                                             "localVariableDefinition",
                                                                             "localReferenceDefinition",
                                                                             "dropStatement",
                                                                             "assignment",
                                                                             "assigner",
                                                                             "deleteStatement",
                                                                             "returnStatement",
                                                                             "assertStatement",
                                                                             "ifStatement",
                                                                             "whileStatement",
                                                                             "matchStatement",
                                                                             "matchCase",
                                                                             "expression",
                                                                             "binaryOperatorMultiplicative",
                                                                             "binaryOperatorAdditive",
                                                                             "binaryOperatorRelational",
                                                                             "binaryOperatorEquality",
                                                                             "independentExpression",
                                                                             "functionCall",
                                                                             "arguments",
                                                                             "variableAccess",
                                                                             "allocation",
                                                                             "allocator",
                                                                             "addressof",
                                                                             "bindRef",
                                                                             "sizeofType",
                                                                             "sizeofExpression",
                                                                             "matchExpression",
                                                                             "matchExpressionCase",
                                                                             "literalExpression",
                                                                             "stringLiteral",
                                                                             "byteLiteral",
                                                                             "integerLiteral",
                                                                             "normalInteger",
                                                                             "specialInteger",
                                                                             "floatingPointLiteral",
                                                                             "booleanLiteral",
                                                                             "nullLiteral",
                                                                             "sizeLiteral",
                                                                             "diffLiteral",
                                                                             "uiptrLiteral",
                                                                             "type",
                                                                             "integerType",
                                                                             "arrayType",
                                                                             "vectorType",
                                                                             "keywordType",
                                                                             "floatingPointType",
                                                                             "targetDependentType",
                                                                             "booleanType",
                                                                             "nullPointerType",
                                                                             "voidType",
                                                                             "customType"},
                                                   std::vector<std::string> {"",
                                                                             "':'",
                                                                             "'('",
                                                                             "')'",
                                                                             "'{'",
                                                                             "'}'",
                                                                             "'extern'",
                                                                             "','",
                                                                             "'define'",
                                                                             "'alias'",
                                                                             "'struct'",
                                                                             "'public'",
                                                                             "'private'",
                                                                             "'let'",
                                                                             "'drop'",
                                                                             "'<:'",
                                                                             "'<-'",
                                                                             "':='",
                                                                             "'delete'",
                                                                             "'return'",
                                                                             "'assert'",
                                                                             "'if'",
                                                                             "'then'",
                                                                             "'else'",
                                                                             "'while'",
                                                                             "'do'",
                                                                             "'match'",
                                                                             "'with'",
                                                                             "'|'",
                                                                             "'=>'",
                                                                             "'default'",
                                                                             "'.'",
                                                                             "'['",
                                                                             "']'",
                                                                             "'and'",
                                                                             "'or'",
                                                                             "'<'",
                                                                             "'>'",
                                                                             "'*'",
                                                                             "'/'",
                                                                             "'%'",
                                                                             "'+'",
                                                                             "'-'",
                                                                             "'<='",
                                                                             "'>='",
                                                                             "'=='",
                                                                             "'!='",
                                                                             "'new'",
                                                                             "'dynamic'",
                                                                             "'automatic'",
                                                                             "'addressof'",
                                                                             "'ref'",
                                                                             "'to'",
                                                                             "'sizeof'",
                                                                             "'true'",
                                                                             "'false'",
                                                                             "'null'",
                                                                             "'size'",
                                                                             "'diff'",
                                                                             "'uiptr'",
                                                                             "'&'",
                                                                             "'half'",
                                                                             "'single'",
                                                                             "'double'",
                                                                             "'quad'",
                                                                             "'ptr'",
                                                                             "'bool'",
                                                                             "'nullptr'",
                                                                             "'void'",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "'[]'",
                                                                             "'const'",
                                                                             "'not'",
                                                                             "",
                                                                             "';'"},
                                                   std::vector<std::string> {"",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             "NATIVE_INTEGER_TYPE",
                                                                             "SIGNED_INTEGER",
                                                                             "HEX_INTEGER",
                                                                             "BIN_INTEGER",
                                                                             "OCT_INTEGER",
                                                                             "HALF",
                                                                             "SINGLE",
                                                                             "DOUBLE",
                                                                             "QUAD",
                                                                             "DECIMAL",
                                                                             "STRING",
                                                                             "BYTE",
                                                                             "INTEGER",
                                                                             "BUFFER",
                                                                             "CONST",
                                                                             "NOT",
                                                                             "IDENTIFIER",
                                                                             "SEMICOLON",
                                                                             "WHITESPACE",
                                                                             "BLOCK_COMMENT",
                                                                             "LINE_COMMENT"});
        static const int32_t serializedATNSegment[] = {
            4,   1,   89,  676, 2,   0,   7,   0,   2,   1,   7,   1,   2,   2,   7,   2,   2,   3,   7,   3,   2,
            4,   7,   4,   2,   5,   7,   5,   2,   6,   7,   6,   2,   7,   7,   7,   2,   8,   7,   8,   2,   9,
            7,   9,   2,   10,  7,   10,  2,   11,  7,   11,  2,   12,  7,   12,  2,   13,  7,   13,  2,   14,  7,
            14,  2,   15,  7,   15,  2,   16,  7,   16,  2,   17,  7,   17,  2,   18,  7,   18,  2,   19,  7,   19,
            2,   20,  7,   20,  2,   21,  7,   21,  2,   22,  7,   22,  2,   23,  7,   23,  2,   24,  7,   24,  2,
            25,  7,   25,  2,   26,  7,   26,  2,   27,  7,   27,  2,   28,  7,   28,  2,   29,  7,   29,  2,   30,
            7,   30,  2,   31,  7,   31,  2,   32,  7,   32,  2,   33,  7,   33,  2,   34,  7,   34,  2,   35,  7,
            35,  2,   36,  7,   36,  2,   37,  7,   37,  2,   38,  7,   38,  2,   39,  7,   39,  2,   40,  7,   40,
            2,   41,  7,   41,  2,   42,  7,   42,  2,   43,  7,   43,  2,   44,  7,   44,  2,   45,  7,   45,  2,
            46,  7,   46,  2,   47,  7,   47,  2,   48,  7,   48,  2,   49,  7,   49,  2,   50,  7,   50,  2,   51,
            7,   51,  2,   52,  7,   52,  2,   53,  7,   53,  2,   54,  7,   54,  2,   55,  7,   55,  2,   56,  7,
            56,  2,   57,  7,   57,  2,   58,  7,   58,  2,   59,  7,   59,  2,   60,  7,   60,  2,   61,  7,   61,
            2,   62,  7,   62,  2,   63,  7,   63,  2,   64,  7,   64,  2,   65,  7,   65,  1,   0,   1,   0,   1,
            0,   5,   0,   136, 8,   0,   10,  0,   12,  0,   139, 9,   0,   1,   0,   1,   0,   1,   1,   1,   1,
            3,   1,   145, 8,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   1,   153, 8,
            1,   1,   1,   1,   1,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   3,   2,
            164, 8,   2,   1,   2,   1,   2,   5,   2,   168, 8,   2,   10,  2,   12,  2,   171, 9,   2,   1,   2,
            1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   3,   2,   182, 8,   2,
            1,   2,   1,   2,   3,   2,   186, 8,   2,   1,   3,   1,   3,   1,   3,   5,   3,   191, 8,   3,   10,
            3,   12,  3,   194, 9,   3,   3,   3,   196, 8,   3,   1,   4,   1,   4,   1,   4,   1,   4,   1,   5,
            1,   5,   3,   5,   204, 8,   5,   1,   6,   1,   6,   1,   6,   1,   6,   1,   6,   1,   6,   1,   6,
            1,   7,   1,   7,   1,   7,   1,   7,   1,   7,   5,   7,   218, 8,   7,   10,  7,   12,  7,   221, 9,
            7,   1,   7,   1,   7,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   3,   8,
            232, 8,   8,   1,   8,   1,   8,   1,   9,   1,   9,   3,   9,   238, 8,   9,   1,   10,  1,   10,  3,
            10,  242, 8,   10,  1,   11,  1,   11,  5,   11,  246, 8,   11,  10,  11,  12,  11,  249, 9,   11,  1,
            11,  1,   11,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,
            1,   12,  1,   12,  3,   12,  264, 8,   12,  1,   13,  1,   13,  1,   13,  1,   14,  1,   14,  1,   14,
            1,   14,  3,   14,  273, 8,   14,  1,   14,  1,   14,  1,   14,  3,   14,  278, 8,   14,  1,   14,  1,
            14,  1,   15,  1,   15,  1,   15,  1,   15,  1,   15,  1,   15,  1,   15,  1,   16,  1,   16,  1,   16,
            1,   16,  1,   17,  1,   17,  1,   17,  1,   17,  1,   17,  1,   18,  1,   18,  1,   18,  3,   18,  301,
            8,   18,  1,   19,  1,   19,  3,   19,  305, 8,   19,  1,   19,  1,   19,  1,   19,  1,   20,  1,   20,
            3,   20,  312, 8,   20,  1,   20,  1,   20,  1,   21,  1,   21,  1,   21,  1,   21,  1,   22,  1,   22,
            1,   22,  1,   22,  1,   22,  1,   22,  3,   22,  326, 8,   22,  1,   23,  1,   23,  1,   23,  1,   23,
            1,   23,  1,   24,  1,   24,  1,   24,  1,   24,  1,   24,  5,   24,  338, 8,   24,  10,  24,  12,  24,
            341, 9,   24,  1,   24,  1,   24,  1,   25,  1,   25,  1,   25,  5,   25,  348, 8,   25,  10,  25,  12,
            25,  351, 9,   25,  1,   25,  1,   25,  1,   25,  1,   25,  1,   25,  1,   25,  3,   25,  359, 8,   25,
            1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,
            26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,
            1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  3,   26,  388, 8,   26,  1,   26,  1,   26,
            1,   26,  5,   26,  393, 8,   26,  10,  26,  12,  26,  396, 9,   26,  1,   26,  1,   26,  1,   26,  1,
            26,  1,   26,  1,   26,  3,   26,  404, 8,   26,  1,   26,  1,   26,  1,   26,  5,   26,  409, 8,   26,
            10,  26,  12,  26,  412, 9,   26,  1,   26,  1,   26,  3,   26,  416, 8,   26,  1,   26,  1,   26,  1,
            26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,
            1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  3,   26,  436, 8,   26,  1,   26,  1,   26,  1,   26,
            1,   26,  3,   26,  442, 8,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,  1,   26,
            1,   26,  1,   26,  1,   26,  1,   26,  5,   26,  455, 8,   26,  10,  26,  12,  26,  458, 9,   26,  1,
            27,  1,   27,  1,   27,  3,   27,  463, 8,   27,  1,   28,  1,   28,  3,   28,  467, 8,   28,  1,   29,
            1,   29,  1,   29,  1,   29,  3,   29,  473, 8,   29,  1,   30,  1,   30,  3,   30,  477, 8,   30,  1,
            31,  1,   31,  1,   32,  1,   32,  1,   32,  1,   32,  1,   32,  1,   32,  1,   32,  1,   32,  1,   32,
            1,   32,  3,   32,  491, 8,   32,  1,   33,  1,   33,  1,   33,  5,   33,  496, 8,   33,  10,  33,  12,
            33,  499, 9,   33,  3,   33,  501, 8,   33,  1,   34,  1,   34,  1,   35,  1,   35,  1,   35,  1,   35,
            1,   35,  3,   35,  510, 8,   35,  1,   35,  1,   35,  1,   35,  1,   36,  1,   36,  3,   36,  517, 8,
            36,  1,   37,  1,   37,  1,   37,  1,   38,  1,   38,  1,   38,  1,   38,  1,   38,  3,   38,  527, 8,
            38,  1,   39,  1,   39,  1,   39,  1,   40,  1,   40,  1,   40,  1,   40,  1,   40,  1,   41,  1,   41,
            1,   41,  1,   41,  1,   41,  1,   41,  1,   41,  5,   41,  544, 8,   41,  10,  41,  12,  41,  547, 9,
            41,  3,   41,  549, 8,   41,  1,   41,  1,   41,  1,   42,  1,   42,  1,   42,  5,   42,  556, 8,   42,
            10,  42,  12,  42,  559, 9,   42,  1,   42,  1,   42,  1,   42,  1,   42,  1,   42,  1,   42,  3,   42,
            567, 8,   42,  1,   43,  1,   43,  1,   43,  1,   43,  1,   43,  1,   43,  1,   43,  1,   43,  1,   43,
            3,   43,  578, 8,   43,  1,   44,  3,   44,  581, 8,   44,  1,   44,  1,   44,  1,   45,  1,   45,  1,
            46,  1,   46,  3,   46,  589, 8,   46,  1,   47,  1,   47,  3,   47,  593, 8,   47,  1,   47,  1,   47,
            3,   47,  597, 8,   47,  1,   48,  1,   48,  1,   48,  1,   48,  1,   48,  1,   48,  1,   48,  1,   48,
            1,   48,  3,   48,  608, 8,   48,  1,   49,  1,   49,  1,   50,  1,   50,  3,   50,  614, 8,   50,  1,
            51,  1,   51,  1,   52,  1,   52,  1,   52,  1,   52,  1,   53,  1,   53,  1,   53,  1,   53,  1,   54,
            1,   54,  1,   54,  1,   54,  1,   55,  1,   55,  1,   55,  1,   55,  1,   55,  1,   55,  1,   55,  1,
            55,  1,   55,  1,   55,  1,   55,  3,   55,  641, 8,   55,  1,   56,  1,   56,  1,   57,  1,   57,  1,
            57,  1,   57,  1,   57,  1,   57,  1,   58,  1,   58,  1,   58,  1,   58,  1,   58,  1,   58,  1,   59,
            1,   59,  1,   59,  1,   59,  1,   59,  3,   59,  662, 8,   59,  1,   60,  1,   60,  1,   61,  1,   61,
            1,   62,  1,   62,  1,   63,  1,   63,  1,   64,  1,   64,  1,   65,  1,   65,  1,   65,  0,   1,   52,
            66,  0,   2,   4,   6,   8,   10,  12,  14,  16,  18,  20,  22,  24,  26,  28,  30,  32,  34,  36,  38,
            40,  42,  44,  46,  48,  50,  52,  54,  56,  58,  60,  62,  64,  66,  68,  70,  72,  74,  76,  78,  80,
            82,  84,  86,  88,  90,  92,  94,  96,  98,  100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122,
            124, 126, 128, 130, 0,   3,   1,   0,   74,  77,  1,   0,   61,  64,  2,   0,   57,  59,  65,  65,  717,
            0,   137, 1,   0,   0,   0,   2,   142, 1,   0,   0,   0,   4,   185, 1,   0,   0,   0,   6,   195, 1,
            0,   0,   0,   8,   197, 1,   0,   0,   0,   10,  203, 1,   0,   0,   0,   12,  205, 1,   0,   0,   0,
            14,  212, 1,   0,   0,   0,   16,  224, 1,   0,   0,   0,   18,  237, 1,   0,   0,   0,   20,  241, 1,
            0,   0,   0,   22,  243, 1,   0,   0,   0,   24,  263, 1,   0,   0,   0,   26,  265, 1,   0,   0,   0,
            28,  268, 1,   0,   0,   0,   30,  281, 1,   0,   0,   0,   32,  288, 1,   0,   0,   0,   34,  292, 1,
            0,   0,   0,   36,  300, 1,   0,   0,   0,   38,  302, 1,   0,   0,   0,   40,  309, 1,   0,   0,   0,
            42,  315, 1,   0,   0,   0,   44,  319, 1,   0,   0,   0,   46,  327, 1,   0,   0,   0,   48,  332, 1,
            0,   0,   0,   50,  358, 1,   0,   0,   0,   52,  415, 1,   0,   0,   0,   54,  462, 1,   0,   0,   0,
            56,  466, 1,   0,   0,   0,   58,  472, 1,   0,   0,   0,   60,  476, 1,   0,   0,   0,   62,  478, 1,
            0,   0,   0,   64,  490, 1,   0,   0,   0,   66,  500, 1,   0,   0,   0,   68,  502, 1,   0,   0,   0,
            70,  504, 1,   0,   0,   0,   72,  516, 1,   0,   0,   0,   74,  518, 1,   0,   0,   0,   76,  526, 1,
            0,   0,   0,   78,  528, 1,   0,   0,   0,   80,  531, 1,   0,   0,   0,   82,  536, 1,   0,   0,   0,
            84,  566, 1,   0,   0,   0,   86,  577, 1,   0,   0,   0,   88,  580, 1,   0,   0,   0,   90,  584, 1,
            0,   0,   0,   92,  588, 1,   0,   0,   0,   94,  592, 1,   0,   0,   0,   96,  607, 1,   0,   0,   0,
            98,  609, 1,   0,   0,   0,   100, 613, 1,   0,   0,   0,   102, 615, 1,   0,   0,   0,   104, 617, 1,
            0,   0,   0,   106, 621, 1,   0,   0,   0,   108, 625, 1,   0,   0,   0,   110, 640, 1,   0,   0,   0,
            112, 642, 1,   0,   0,   0,   114, 644, 1,   0,   0,   0,   116, 650, 1,   0,   0,   0,   118, 661, 1,
            0,   0,   0,   120, 663, 1,   0,   0,   0,   122, 665, 1,   0,   0,   0,   124, 667, 1,   0,   0,   0,
            126, 669, 1,   0,   0,   0,   128, 671, 1,   0,   0,   0,   130, 673, 1,   0,   0,   0,   132, 136, 3,
            2,   1,   0,   133, 136, 3,   4,   2,   0,   134, 136, 3,   10,  5,   0,   135, 132, 1,   0,   0,   0,
            135, 133, 1,   0,   0,   0,   135, 134, 1,   0,   0,   0,   136, 139, 1,   0,   0,   0,   137, 135, 1,
            0,   0,   0,   137, 138, 1,   0,   0,   0,   138, 140, 1,   0,   0,   0,   139, 137, 1,   0,   0,   0,
            140, 141, 5,   0,   0,   1,   141, 1,   1,   0,   0,   0,   142, 144, 3,   18,  9,   0,   143, 145, 5,
            83,  0,   0,   144, 143, 1,   0,   0,   0,   144, 145, 1,   0,   0,   0,   145, 146, 1,   0,   0,   0,
            146, 147, 5,   85,  0,   0,   147, 148, 5,   1,   0,   0,   148, 152, 3,   110, 55,  0,   149, 150, 3,
            36,  18,  0,   150, 151, 3,   52,  26,  0,   151, 153, 1,   0,   0,   0,   152, 149, 1,   0,   0,   0,
            152, 153, 1,   0,   0,   0,   153, 154, 1,   0,   0,   0,   154, 155, 5,   86,  0,   0,   155, 3,   1,
            0,   0,   0,   156, 157, 3,   18,  9,   0,   157, 158, 5,   85,  0,   0,   158, 159, 5,   2,   0,   0,
            159, 160, 3,   6,   3,   0,   160, 163, 5,   3,   0,   0,   161, 162, 5,   1,   0,   0,   162, 164, 3,
            110, 55,  0,   163, 161, 1,   0,   0,   0,   163, 164, 1,   0,   0,   0,   164, 165, 1,   0,   0,   0,
            165, 169, 5,   4,   0,   0,   166, 168, 3,   20,  10,  0,   167, 166, 1,   0,   0,   0,   168, 171, 1,
            0,   0,   0,   169, 167, 1,   0,   0,   0,   169, 170, 1,   0,   0,   0,   170, 172, 1,   0,   0,   0,
            171, 169, 1,   0,   0,   0,   172, 173, 5,   5,   0,   0,   173, 186, 1,   0,   0,   0,   174, 175, 5,
            6,   0,   0,   175, 176, 5,   85,  0,   0,   176, 177, 5,   2,   0,   0,   177, 178, 3,   6,   3,   0,
            178, 181, 5,   3,   0,   0,   179, 180, 5,   1,   0,   0,   180, 182, 3,   110, 55,  0,   181, 179, 1,
            0,   0,   0,   181, 182, 1,   0,   0,   0,   182, 183, 1,   0,   0,   0,   183, 184, 5,   86,  0,   0,
            184, 186, 1,   0,   0,   0,   185, 156, 1,   0,   0,   0,   185, 174, 1,   0,   0,   0,   186, 5,   1,
            0,   0,   0,   187, 192, 3,   8,   4,   0,   188, 189, 5,   7,   0,   0,   189, 191, 3,   8,   4,   0,
            190, 188, 1,   0,   0,   0,   191, 194, 1,   0,   0,   0,   192, 190, 1,   0,   0,   0,   192, 193, 1,
            0,   0,   0,   193, 196, 1,   0,   0,   0,   194, 192, 1,   0,   0,   0,   195, 187, 1,   0,   0,   0,
            195, 196, 1,   0,   0,   0,   196, 7,   1,   0,   0,   0,   197, 198, 5,   85,  0,   0,   198, 199, 5,
            1,   0,   0,   199, 200, 3,   110, 55,  0,   200, 9,   1,   0,   0,   0,   201, 204, 3,   12,  6,   0,
            202, 204, 3,   14,  7,   0,   203, 201, 1,   0,   0,   0,   203, 202, 1,   0,   0,   0,   204, 11,  1,
            0,   0,   0,   205, 206, 3,   18,  9,   0,   206, 207, 5,   8,   0,   0,   207, 208, 5,   85,  0,   0,
            208, 209, 5,   9,   0,   0,   209, 210, 3,   110, 55,  0,   210, 211, 5,   86,  0,   0,   211, 13,  1,
            0,   0,   0,   212, 213, 3,   18,  9,   0,   213, 214, 5,   10,  0,   0,   214, 215, 5,   85,  0,   0,
            215, 219, 5,   4,   0,   0,   216, 218, 3,   16,  8,   0,   217, 216, 1,   0,   0,   0,   218, 221, 1,
            0,   0,   0,   219, 217, 1,   0,   0,   0,   219, 220, 1,   0,   0,   0,   220, 222, 1,   0,   0,   0,
            221, 219, 1,   0,   0,   0,   222, 223, 5,   5,   0,   0,   223, 15,  1,   0,   0,   0,   224, 225, 3,
            18,  9,   0,   225, 226, 5,   85,  0,   0,   226, 227, 5,   1,   0,   0,   227, 231, 3,   110, 55,  0,
            228, 229, 3,   36,  18,  0,   229, 230, 3,   86,  43,  0,   230, 232, 1,   0,   0,   0,   231, 228, 1,
            0,   0,   0,   231, 232, 1,   0,   0,   0,   232, 233, 1,   0,   0,   0,   233, 234, 5,   86,  0,   0,
            234, 17,  1,   0,   0,   0,   235, 238, 5,   11,  0,   0,   236, 238, 5,   12,  0,   0,   237, 235, 1,
            0,   0,   0,   237, 236, 1,   0,   0,   0,   238, 19,  1,   0,   0,   0,   239, 242, 3,   24,  12,  0,
            240, 242, 3,   22,  11,  0,   241, 239, 1,   0,   0,   0,   241, 240, 1,   0,   0,   0,   242, 21,  1,
            0,   0,   0,   243, 247, 5,   4,   0,   0,   244, 246, 3,   20,  10,  0,   245, 244, 1,   0,   0,   0,
            246, 249, 1,   0,   0,   0,   247, 245, 1,   0,   0,   0,   247, 248, 1,   0,   0,   0,   248, 250, 1,
            0,   0,   0,   249, 247, 1,   0,   0,   0,   250, 251, 5,   5,   0,   0,   251, 23,  1,   0,   0,   0,
            252, 264, 3,   26,  13,  0,   253, 264, 3,   28,  14,  0,   254, 264, 3,   30,  15,  0,   255, 264, 3,
            32,  16,  0,   256, 264, 3,   34,  17,  0,   257, 264, 3,   38,  19,  0,   258, 264, 3,   40,  20,  0,
            259, 264, 3,   42,  21,  0,   260, 264, 3,   44,  22,  0,   261, 264, 3,   46,  23,  0,   262, 264, 3,
            48,  24,  0,   263, 252, 1,   0,   0,   0,   263, 253, 1,   0,   0,   0,   263, 254, 1,   0,   0,   0,
            263, 255, 1,   0,   0,   0,   263, 256, 1,   0,   0,   0,   263, 257, 1,   0,   0,   0,   263, 258, 1,
            0,   0,   0,   263, 259, 1,   0,   0,   0,   263, 260, 1,   0,   0,   0,   263, 261, 1,   0,   0,   0,
            263, 262, 1,   0,   0,   0,   264, 25,  1,   0,   0,   0,   265, 266, 3,   62,  31,  0,   266, 267, 5,
            86,  0,   0,   267, 27,  1,   0,   0,   0,   268, 269, 5,   13,  0,   0,   269, 272, 5,   85,  0,   0,
            270, 271, 5,   1,   0,   0,   271, 273, 3,   110, 55,  0,   272, 270, 1,   0,   0,   0,   272, 273, 1,
            0,   0,   0,   273, 277, 1,   0,   0,   0,   274, 275, 3,   36,  18,  0,   275, 276, 3,   52,  26,  0,
            276, 278, 1,   0,   0,   0,   277, 274, 1,   0,   0,   0,   277, 278, 1,   0,   0,   0,   278, 279, 1,
            0,   0,   0,   279, 280, 5,   86,  0,   0,   280, 29,  1,   0,   0,   0,   281, 282, 5,   13,  0,   0,
            282, 283, 5,   85,  0,   0,   283, 284, 5,   1,   0,   0,   284, 285, 3,   110, 55,  0,   285, 286, 3,
            76,  38,  0,   286, 287, 5,   86,  0,   0,   287, 31,  1,   0,   0,   0,   288, 289, 5,   14,  0,   0,
            289, 290, 5,   85,  0,   0,   290, 291, 5,   86,  0,   0,   291, 33,  1,   0,   0,   0,   292, 293, 3,
            52,  26,  0,   293, 294, 3,   36,  18,  0,   294, 295, 3,   52,  26,  0,   295, 296, 5,   86,  0,   0,
            296, 35,  1,   0,   0,   0,   297, 301, 5,   15,  0,   0,   298, 301, 5,   16,  0,   0,   299, 301, 5,
            17,  0,   0,   300, 297, 1,   0,   0,   0,   300, 298, 1,   0,   0,   0,   300, 299, 1,   0,   0,   0,
            301, 37,  1,   0,   0,   0,   302, 304, 5,   18,  0,   0,   303, 305, 5,   82,  0,   0,   304, 303, 1,
            0,   0,   0,   304, 305, 1,   0,   0,   0,   305, 306, 1,   0,   0,   0,   306, 307, 3,   52,  26,  0,
            307, 308, 5,   86,  0,   0,   308, 39,  1,   0,   0,   0,   309, 311, 5,   19,  0,   0,   310, 312, 3,
            52,  26,  0,   311, 310, 1,   0,   0,   0,   311, 312, 1,   0,   0,   0,   312, 313, 1,   0,   0,   0,
            313, 314, 5,   86,  0,   0,   314, 41,  1,   0,   0,   0,   315, 316, 5,   20,  0,   0,   316, 317, 3,
            52,  26,  0,   317, 318, 5,   86,  0,   0,   318, 43,  1,   0,   0,   0,   319, 320, 5,   21,  0,   0,
            320, 321, 3,   52,  26,  0,   321, 322, 5,   22,  0,   0,   322, 325, 3,   20,  10,  0,   323, 324, 5,
            23,  0,   0,   324, 326, 3,   20,  10,  0,   325, 323, 1,   0,   0,   0,   325, 326, 1,   0,   0,   0,
            326, 45,  1,   0,   0,   0,   327, 328, 5,   24,  0,   0,   328, 329, 3,   52,  26,  0,   329, 330, 5,
            25,  0,   0,   330, 331, 3,   20,  10,  0,   331, 47,  1,   0,   0,   0,   332, 333, 5,   26,  0,   0,
            333, 334, 3,   52,  26,  0,   334, 335, 5,   27,  0,   0,   335, 339, 5,   4,   0,   0,   336, 338, 3,
            50,  25,  0,   337, 336, 1,   0,   0,   0,   338, 341, 1,   0,   0,   0,   339, 337, 1,   0,   0,   0,
            339, 340, 1,   0,   0,   0,   340, 342, 1,   0,   0,   0,   341, 339, 1,   0,   0,   0,   342, 343, 5,
            5,   0,   0,   343, 49,  1,   0,   0,   0,   344, 349, 3,   86,  43,  0,   345, 346, 5,   28,  0,   0,
            346, 348, 3,   86,  43,  0,   347, 345, 1,   0,   0,   0,   348, 351, 1,   0,   0,   0,   349, 347, 1,
            0,   0,   0,   349, 350, 1,   0,   0,   0,   350, 352, 1,   0,   0,   0,   351, 349, 1,   0,   0,   0,
            352, 353, 5,   29,  0,   0,   353, 354, 3,   20,  10,  0,   354, 359, 1,   0,   0,   0,   355, 356, 5,
            30,  0,   0,   356, 357, 5,   29,  0,   0,   357, 359, 3,   20,  10,  0,   358, 344, 1,   0,   0,   0,
            358, 355, 1,   0,   0,   0,   359, 51,  1,   0,   0,   0,   360, 361, 6,   26,  -1,  0,   361, 416, 3,
            68,  34,  0,   362, 416, 3,   70,  35,  0,   363, 416, 3,   86,  43,  0,   364, 416, 3,   74,  37,  0,
            365, 416, 3,   76,  38,  0,   366, 416, 3,   78,  39,  0,   367, 416, 3,   80,  40,  0,   368, 416, 3,
            62,  31,  0,   369, 370, 5,   2,   0,   0,   370, 371, 3,   52,  26,  0,   371, 372, 5,   3,   0,   0,
            372, 416, 1,   0,   0,   0,   373, 374, 5,   84,  0,   0,   374, 416, 3,   52,  26,  11,  375, 376, 5,
            21,  0,   0,   376, 377, 3,   52,  26,  0,   377, 378, 5,   22,  0,   0,   378, 379, 3,   52,  26,  0,
            379, 380, 5,   23,  0,   0,   380, 381, 3,   52,  26,  4,   381, 416, 1,   0,   0,   0,   382, 416, 3,
            82,  41,  0,   383, 387, 5,   36,  0,   0,   384, 385, 3,   110, 55,  0,   385, 386, 5,   28,  0,   0,
            386, 388, 1,   0,   0,   0,   387, 384, 1,   0,   0,   0,   387, 388, 1,   0,   0,   0,   388, 389, 1,
            0,   0,   0,   389, 394, 3,   52,  26,  0,   390, 391, 5,   7,   0,   0,   391, 393, 3,   52,  26,  0,
            392, 390, 1,   0,   0,   0,   393, 396, 1,   0,   0,   0,   394, 392, 1,   0,   0,   0,   394, 395, 1,
            0,   0,   0,   395, 397, 1,   0,   0,   0,   396, 394, 1,   0,   0,   0,   397, 398, 5,   37,  0,   0,
            398, 416, 1,   0,   0,   0,   399, 403, 5,   32,  0,   0,   400, 401, 3,   110, 55,  0,   401, 402, 5,
            28,  0,   0,   402, 404, 1,   0,   0,   0,   403, 400, 1,   0,   0,   0,   403, 404, 1,   0,   0,   0,
            404, 405, 1,   0,   0,   0,   405, 410, 3,   52,  26,  0,   406, 407, 5,   7,   0,   0,   407, 409, 3,
            52,  26,  0,   408, 406, 1,   0,   0,   0,   409, 412, 1,   0,   0,   0,   410, 408, 1,   0,   0,   0,
            410, 411, 1,   0,   0,   0,   411, 413, 1,   0,   0,   0,   412, 410, 1,   0,   0,   0,   413, 414, 5,
            33,  0,   0,   414, 416, 1,   0,   0,   0,   415, 360, 1,   0,   0,   0,   415, 362, 1,   0,   0,   0,
            415, 363, 1,   0,   0,   0,   415, 364, 1,   0,   0,   0,   415, 365, 1,   0,   0,   0,   415, 366, 1,
            0,   0,   0,   415, 367, 1,   0,   0,   0,   415, 368, 1,   0,   0,   0,   415, 369, 1,   0,   0,   0,
            415, 373, 1,   0,   0,   0,   415, 375, 1,   0,   0,   0,   415, 382, 1,   0,   0,   0,   415, 383, 1,
            0,   0,   0,   415, 399, 1,   0,   0,   0,   416, 456, 1,   0,   0,   0,   417, 418, 10,  10,  0,   0,
            418, 419, 3,   54,  27,  0,   419, 420, 3,   52,  26,  11,  420, 455, 1,   0,   0,   0,   421, 422, 10,
            9,   0,   0,   422, 423, 3,   56,  28,  0,   423, 424, 3,   52,  26,  10,  424, 455, 1,   0,   0,   0,
            425, 426, 10,  8,   0,   0,   426, 427, 3,   58,  29,  0,   427, 428, 3,   52,  26,  9,   428, 455, 1,
            0,   0,   0,   429, 430, 10,  7,   0,   0,   430, 431, 3,   60,  30,  0,   431, 432, 3,   52,  26,  8,
            432, 455, 1,   0,   0,   0,   433, 435, 10,  6,   0,   0,   434, 436, 5,   84,  0,   0,   435, 434, 1,
            0,   0,   0,   435, 436, 1,   0,   0,   0,   436, 437, 1,   0,   0,   0,   437, 438, 5,   34,  0,   0,
            438, 455, 3,   52,  26,  7,   439, 441, 10,  5,   0,   0,   440, 442, 5,   84,  0,   0,   441, 440, 1,
            0,   0,   0,   441, 442, 1,   0,   0,   0,   442, 443, 1,   0,   0,   0,   443, 444, 5,   35,  0,   0,
            444, 455, 3,   52,  26,  6,   445, 446, 10,  20,  0,   0,   446, 455, 5,   31,  0,   0,   447, 448, 10,
            19,  0,   0,   448, 449, 5,   32,  0,   0,   449, 450, 3,   52,  26,  0,   450, 451, 5,   33,  0,   0,
            451, 455, 1,   0,   0,   0,   452, 453, 10,  18,  0,   0,   453, 455, 5,   85,  0,   0,   454, 417, 1,
            0,   0,   0,   454, 421, 1,   0,   0,   0,   454, 425, 1,   0,   0,   0,   454, 429, 1,   0,   0,   0,
            454, 433, 1,   0,   0,   0,   454, 439, 1,   0,   0,   0,   454, 445, 1,   0,   0,   0,   454, 447, 1,
            0,   0,   0,   454, 452, 1,   0,   0,   0,   455, 458, 1,   0,   0,   0,   456, 454, 1,   0,   0,   0,
            456, 457, 1,   0,   0,   0,   457, 53,  1,   0,   0,   0,   458, 456, 1,   0,   0,   0,   459, 463, 5,
            38,  0,   0,   460, 463, 5,   39,  0,   0,   461, 463, 5,   40,  0,   0,   462, 459, 1,   0,   0,   0,
            462, 460, 1,   0,   0,   0,   462, 461, 1,   0,   0,   0,   463, 55,  1,   0,   0,   0,   464, 467, 5,
            41,  0,   0,   465, 467, 5,   42,  0,   0,   466, 464, 1,   0,   0,   0,   466, 465, 1,   0,   0,   0,
            467, 57,  1,   0,   0,   0,   468, 473, 5,   36,  0,   0,   469, 473, 5,   43,  0,   0,   470, 473, 5,
            37,  0,   0,   471, 473, 5,   44,  0,   0,   472, 468, 1,   0,   0,   0,   472, 469, 1,   0,   0,   0,
            472, 470, 1,   0,   0,   0,   472, 471, 1,   0,   0,   0,   473, 59,  1,   0,   0,   0,   474, 477, 5,
            45,  0,   0,   475, 477, 5,   46,  0,   0,   476, 474, 1,   0,   0,   0,   476, 475, 1,   0,   0,   0,
            477, 61,  1,   0,   0,   0,   478, 479, 3,   64,  32,  0,   479, 63,  1,   0,   0,   0,   480, 481, 5,
            85,  0,   0,   481, 482, 5,   2,   0,   0,   482, 483, 3,   66,  33,  0,   483, 484, 5,   3,   0,   0,
            484, 491, 1,   0,   0,   0,   485, 486, 3,   110, 55,  0,   486, 487, 5,   2,   0,   0,   487, 488, 3,
            66,  33,  0,   488, 489, 5,   3,   0,   0,   489, 491, 1,   0,   0,   0,   490, 480, 1,   0,   0,   0,
            490, 485, 1,   0,   0,   0,   491, 65,  1,   0,   0,   0,   492, 497, 3,   52,  26,  0,   493, 494, 5,
            7,   0,   0,   494, 496, 3,   52,  26,  0,   495, 493, 1,   0,   0,   0,   496, 499, 1,   0,   0,   0,
            497, 495, 1,   0,   0,   0,   497, 498, 1,   0,   0,   0,   498, 501, 1,   0,   0,   0,   499, 497, 1,
            0,   0,   0,   500, 492, 1,   0,   0,   0,   500, 501, 1,   0,   0,   0,   501, 67,  1,   0,   0,   0,
            502, 503, 5,   85,  0,   0,   503, 69,  1,   0,   0,   0,   504, 509, 5,   47,  0,   0,   505, 506, 5,
            32,  0,   0,   506, 507, 3,   52,  26,  0,   507, 508, 5,   33,  0,   0,   508, 510, 1,   0,   0,   0,
            509, 505, 1,   0,   0,   0,   509, 510, 1,   0,   0,   0,   510, 511, 1,   0,   0,   0,   511, 512, 3,
            72,  36,  0,   512, 513, 3,   110, 55,  0,   513, 71,  1,   0,   0,   0,   514, 517, 5,   48,  0,   0,
            515, 517, 5,   49,  0,   0,   516, 514, 1,   0,   0,   0,   516, 515, 1,   0,   0,   0,   517, 73,  1,
            0,   0,   0,   518, 519, 5,   50,  0,   0,   519, 520, 3,   52,  26,  0,   520, 75,  1,   0,   0,   0,
            521, 522, 5,   51,  0,   0,   522, 527, 3,   52,  26,  0,   523, 524, 5,   51,  0,   0,   524, 525, 5,
            52,  0,   0,   525, 527, 3,   52,  26,  0,   526, 521, 1,   0,   0,   0,   526, 523, 1,   0,   0,   0,
            527, 77,  1,   0,   0,   0,   528, 529, 5,   53,  0,   0,   529, 530, 3,   110, 55,  0,   530, 79,  1,
            0,   0,   0,   531, 532, 5,   53,  0,   0,   532, 533, 5,   2,   0,   0,   533, 534, 3,   52,  26,  0,
            534, 535, 5,   3,   0,   0,   535, 81,  1,   0,   0,   0,   536, 537, 5,   26,  0,   0,   537, 538, 3,
            52,  26,  0,   538, 539, 5,   27,  0,   0,   539, 548, 5,   4,   0,   0,   540, 545, 3,   84,  42,  0,
            541, 542, 5,   7,   0,   0,   542, 544, 3,   84,  42,  0,   543, 541, 1,   0,   0,   0,   544, 547, 1,
            0,   0,   0,   545, 543, 1,   0,   0,   0,   545, 546, 1,   0,   0,   0,   546, 549, 1,   0,   0,   0,
            547, 545, 1,   0,   0,   0,   548, 540, 1,   0,   0,   0,   548, 549, 1,   0,   0,   0,   549, 550, 1,
            0,   0,   0,   550, 551, 5,   5,   0,   0,   551, 83,  1,   0,   0,   0,   552, 557, 3,   86,  43,  0,
            553, 554, 5,   28,  0,   0,   554, 556, 3,   86,  43,  0,   555, 553, 1,   0,   0,   0,   556, 559, 1,
            0,   0,   0,   557, 555, 1,   0,   0,   0,   557, 558, 1,   0,   0,   0,   558, 560, 1,   0,   0,   0,
            559, 557, 1,   0,   0,   0,   560, 561, 5,   29,  0,   0,   561, 562, 3,   52,  26,  0,   562, 567, 1,
            0,   0,   0,   563, 564, 5,   30,  0,   0,   564, 565, 5,   29,  0,   0,   565, 567, 3,   52,  26,  0,
            566, 552, 1,   0,   0,   0,   566, 563, 1,   0,   0,   0,   567, 85,  1,   0,   0,   0,   568, 578, 3,
            88,  44,  0,   569, 578, 3,   90,  45,  0,   570, 578, 3,   92,  46,  0,   571, 578, 3,   98,  49,  0,
            572, 578, 3,   100, 50,  0,   573, 578, 3,   102, 51,  0,   574, 578, 3,   104, 52,  0,   575, 578, 3,
            106, 53,  0,   576, 578, 3,   108, 54,  0,   577, 568, 1,   0,   0,   0,   577, 569, 1,   0,   0,   0,
            577, 570, 1,   0,   0,   0,   577, 571, 1,   0,   0,   0,   577, 572, 1,   0,   0,   0,   577, 573, 1,
            0,   0,   0,   577, 574, 1,   0,   0,   0,   577, 575, 1,   0,   0,   0,   577, 576, 1,   0,   0,   0,
            578, 87,  1,   0,   0,   0,   579, 581, 5,   85,  0,   0,   580, 579, 1,   0,   0,   0,   580, 581, 1,
            0,   0,   0,   581, 582, 1,   0,   0,   0,   582, 583, 5,   79,  0,   0,   583, 89,  1,   0,   0,   0,
            584, 585, 5,   80,  0,   0,   585, 91,  1,   0,   0,   0,   586, 589, 3,   94,  47,  0,   587, 589, 3,
            96,  48,  0,   588, 586, 1,   0,   0,   0,   588, 587, 1,   0,   0,   0,   589, 93,  1,   0,   0,   0,
            590, 593, 5,   81,  0,   0,   591, 593, 5,   70,  0,   0,   592, 590, 1,   0,   0,   0,   592, 591, 1,
            0,   0,   0,   593, 596, 1,   0,   0,   0,   594, 595, 5,   1,   0,   0,   595, 597, 5,   81,  0,   0,
            596, 594, 1,   0,   0,   0,   596, 597, 1,   0,   0,   0,   597, 95,  1,   0,   0,   0,   598, 599, 5,
            71,  0,   0,   599, 600, 5,   1,   0,   0,   600, 608, 5,   81,  0,   0,   601, 602, 5,   72,  0,   0,
            602, 603, 5,   1,   0,   0,   603, 608, 5,   81,  0,   0,   604, 605, 5,   73,  0,   0,   605, 606, 5,
            1,   0,   0,   606, 608, 5,   81,  0,   0,   607, 598, 1,   0,   0,   0,   607, 601, 1,   0,   0,   0,
            607, 604, 1,   0,   0,   0,   608, 97,  1,   0,   0,   0,   609, 610, 7,   0,   0,   0,   610, 99,  1,
            0,   0,   0,   611, 614, 5,   54,  0,   0,   612, 614, 5,   55,  0,   0,   613, 611, 1,   0,   0,   0,
            613, 612, 1,   0,   0,   0,   614, 101, 1,   0,   0,   0,   615, 616, 5,   56,  0,   0,   616, 103, 1,
            0,   0,   0,   617, 618, 5,   81,  0,   0,   618, 619, 5,   1,   0,   0,   619, 620, 5,   57,  0,   0,
            620, 105, 1,   0,   0,   0,   621, 622, 5,   70,  0,   0,   622, 623, 5,   1,   0,   0,   623, 624, 5,
            58,  0,   0,   624, 107, 1,   0,   0,   0,   625, 626, 5,   71,  0,   0,   626, 627, 5,   1,   0,   0,
            627, 628, 5,   59,  0,   0,   628, 109, 1,   0,   0,   0,   629, 641, 3,   112, 56,  0,   630, 641, 3,
            114, 57,  0,   631, 641, 3,   116, 58,  0,   632, 641, 3,   118, 59,  0,   633, 634, 5,   38,  0,   0,
            634, 641, 3,   110, 55,  0,   635, 636, 5,   82,  0,   0,   636, 641, 3,   110, 55,  0,   637, 638, 5,
            60,  0,   0,   638, 641, 3,   110, 55,  0,   639, 641, 3,   130, 65,  0,   640, 629, 1,   0,   0,   0,
            640, 630, 1,   0,   0,   0,   640, 631, 1,   0,   0,   0,   640, 632, 1,   0,   0,   0,   640, 633, 1,
            0,   0,   0,   640, 635, 1,   0,   0,   0,   640, 637, 1,   0,   0,   0,   640, 639, 1,   0,   0,   0,
            641, 111, 1,   0,   0,   0,   642, 643, 5,   69,  0,   0,   643, 113, 1,   0,   0,   0,   644, 645, 5,
            32,  0,   0,   645, 646, 3,   110, 55,  0,   646, 647, 5,   86,  0,   0,   647, 648, 5,   81,  0,   0,
            648, 649, 5,   33,  0,   0,   649, 115, 1,   0,   0,   0,   650, 651, 5,   36,  0,   0,   651, 652, 3,
            110, 55,  0,   652, 653, 5,   86,  0,   0,   653, 654, 5,   81,  0,   0,   654, 655, 5,   37,  0,   0,
            655, 117, 1,   0,   0,   0,   656, 662, 3,   120, 60,  0,   657, 662, 3,   122, 61,  0,   658, 662, 3,
            124, 62,  0,   659, 662, 3,   126, 63,  0,   660, 662, 3,   128, 64,  0,   661, 656, 1,   0,   0,   0,
            661, 657, 1,   0,   0,   0,   661, 658, 1,   0,   0,   0,   661, 659, 1,   0,   0,   0,   661, 660, 1,
            0,   0,   0,   662, 119, 1,   0,   0,   0,   663, 664, 7,   1,   0,   0,   664, 121, 1,   0,   0,   0,
            665, 666, 7,   2,   0,   0,   666, 123, 1,   0,   0,   0,   667, 668, 5,   66,  0,   0,   668, 125, 1,
            0,   0,   0,   669, 670, 5,   67,  0,   0,   670, 127, 1,   0,   0,   0,   671, 672, 5,   68,  0,   0,
            672, 129, 1,   0,   0,   0,   673, 674, 5,   85,  0,   0,   674, 131, 1,   0,   0,   0,   58,  135, 137,
            144, 152, 163, 169, 181, 185, 192, 195, 203, 219, 231, 237, 241, 247, 263, 272, 277, 300, 304, 311, 325,
            339, 349, 358, 387, 394, 403, 410, 415, 435, 441, 454, 456, 462, 466, 472, 476, 490, 497, 500, 509, 516,
            526, 545, 548, 557, 566, 577, 580, 588, 592, 596, 607, 613, 640, 661};
        staticData->serializedATN =
            antlr4::atn::SerializedATNView(serializedATNSegment,
                                           sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

        antlr4::atn::ATNDeserializer deserializer;
        staticData->atn = deserializer.deserialize(staticData->serializedATN);

        const size_t count = staticData->atn->getNumberOfDecisions();
        staticData->decisionToDFA.reserve(count);
        for (size_t i = 0; i < count; i++)
        {
            staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
        }
        anceParserStaticData = staticData.release();
    }

}

anceParser::anceParser(TokenStream* input) : anceParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

anceParser::anceParser(TokenStream* input, const antlr4::atn::ParserATNSimulatorOptions& options) : Parser(input)
{
    anceParser::initialize();
    _interpreter = new atn::ParserATNSimulator(this,
                                               *anceParserStaticData->atn,
                                               anceParserStaticData->decisionToDFA,
                                               anceParserStaticData->sharedContextCache,
                                               options);
}

anceParser::~anceParser()
{
    delete _interpreter;
}

const atn::ATN& anceParser::getATN() const
{
    return *anceParserStaticData->atn;
}

std::string anceParser::getGrammarFileName() const
{
    return "ance.g4";
}

const std::vector<std::string>& anceParser::getRuleNames() const
{
    return anceParserStaticData->ruleNames;
}

const dfa::Vocabulary& anceParser::getVocabulary() const
{
    return anceParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView anceParser::getSerializedATN() const
{
    return anceParserStaticData->serializedATN;
}

//----------------- FileContext ------------------------------------------------------------------

anceParser::FileContext::FileContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::FileContext::EOF()
{
    return getToken(anceParser::EOF, 0);
}

std::vector<anceParser::VariableDeclarationContext*> anceParser::FileContext::variableDeclaration()
{
    return getRuleContexts<anceParser::VariableDeclarationContext>();
}

anceParser::VariableDeclarationContext* anceParser::FileContext::variableDeclaration(size_t i)
{
    return getRuleContext<anceParser::VariableDeclarationContext>(i);
}

std::vector<anceParser::FunctionContext*> anceParser::FileContext::function()
{
    return getRuleContexts<anceParser::FunctionContext>();
}

anceParser::FunctionContext* anceParser::FileContext::function(size_t i)
{
    return getRuleContext<anceParser::FunctionContext>(i);
}

std::vector<anceParser::TypeDefinitionContext*> anceParser::FileContext::typeDefinition()
{
    return getRuleContexts<anceParser::TypeDefinitionContext>();
}

anceParser::TypeDefinitionContext* anceParser::FileContext::typeDefinition(size_t i)
{
    return getRuleContext<anceParser::TypeDefinitionContext>(i);
}

size_t anceParser::FileContext::getRuleIndex() const
{
    return anceParser::RuleFile;
}

std::any anceParser::FileContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFile(this);
    else return visitor->visitChildren(this);
}

anceParser::FileContext* anceParser::file()
{
    FileContext* _localctx = _tracker.createInstance<FileContext>(_ctx, getState());
    enterRule(_localctx, 0, anceParser::RuleFile);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(137);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~0x3fULL) == 0)
                && ((1ULL << _la)
                    & ((1ULL << anceParser::T__5) | (1ULL << anceParser::T__10) | (1ULL << anceParser::T__11)))
                       != 0))
        {
            setState(135);
            _errHandler->sync(this);
            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx))
            {
                case 1:
                {
                    setState(132);
                    variableDeclaration();
                    break;
                }

                case 2:
                {
                    setState(133);
                    function();
                    break;
                }

                case 3:
                {
                    setState(134);
                    typeDefinition();
                    break;
                }

                default:
                    break;
            }
            setState(139);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(140);
        match(anceParser::EOF);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VariableDeclarationContext ------------------------------------------------------------------

anceParser::VariableDeclarationContext::VariableDeclarationContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AccessModifierContext* anceParser::VariableDeclarationContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::VariableDeclarationContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::VariableDeclarationContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::VariableDeclarationContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

tree::TerminalNode* anceParser::VariableDeclarationContext::CONST()
{
    return getToken(anceParser::CONST, 0);
}

anceParser::AssignerContext* anceParser::VariableDeclarationContext::assigner()
{
    return getRuleContext<anceParser::AssignerContext>(0);
}

anceParser::ExpressionContext* anceParser::VariableDeclarationContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::VariableDeclarationContext::getRuleIndex() const
{
    return anceParser::RuleVariableDeclaration;
}

std::any anceParser::VariableDeclarationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVariableDeclaration(this);
    else return visitor->visitChildren(this);
}

anceParser::VariableDeclarationContext* anceParser::variableDeclaration()
{
    VariableDeclarationContext* _localctx = _tracker.createInstance<VariableDeclarationContext>(_ctx, getState());
    enterRule(_localctx, 2, anceParser::RuleVariableDeclaration);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(142);
        accessModifier();
        setState(144);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::CONST)
        {
            setState(143);
            match(anceParser::CONST);
        }
        setState(146);
        match(anceParser::IDENTIFIER);
        setState(147);
        match(anceParser::T__0);
        setState(148);
        type();
        setState(152);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__14) | (1ULL << anceParser::T__15) | (1ULL << anceParser::T__16)))
                    != 0))
        {
            setState(149);
            assigner();
            setState(150);
            expression(0);
        }
        setState(154);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

anceParser::FunctionContext::FunctionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::FunctionContext::getRuleIndex() const
{
    return anceParser::RuleFunction;
}

void anceParser::FunctionContext::copyFrom(FunctionContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- ExternFunctionDeclarationContext ------------------------------------------------------------------

tree::TerminalNode* anceParser::ExternFunctionDeclarationContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::ParametersContext* anceParser::ExternFunctionDeclarationContext::parameters()
{
    return getRuleContext<anceParser::ParametersContext>(0);
}

tree::TerminalNode* anceParser::ExternFunctionDeclarationContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

anceParser::TypeContext* anceParser::ExternFunctionDeclarationContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::ExternFunctionDeclarationContext::ExternFunctionDeclarationContext(FunctionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::ExternFunctionDeclarationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitExternFunctionDeclaration(this);
    else return visitor->visitChildren(this);
}
//----------------- FunctionDefinitionContext ------------------------------------------------------------------

anceParser::AccessModifierContext* anceParser::FunctionDefinitionContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::FunctionDefinitionContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::ParametersContext* anceParser::FunctionDefinitionContext::parameters()
{
    return getRuleContext<anceParser::ParametersContext>(0);
}

anceParser::TypeContext* anceParser::FunctionDefinitionContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

std::vector<anceParser::CodeContext*> anceParser::FunctionDefinitionContext::code()
{
    return getRuleContexts<anceParser::CodeContext>();
}

anceParser::CodeContext* anceParser::FunctionDefinitionContext::code(size_t i)
{
    return getRuleContext<anceParser::CodeContext>(i);
}

anceParser::FunctionDefinitionContext::FunctionDefinitionContext(FunctionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::FunctionDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFunctionDefinition(this);
    else return visitor->visitChildren(this);
}
anceParser::FunctionContext* anceParser::function()
{
    FunctionContext* _localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
    enterRule(_localctx, 4, anceParser::RuleFunction);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(185);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__10:
            case anceParser::T__11:
            {
                _localctx = _tracker.createInstance<anceParser::FunctionDefinitionContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(156);
                accessModifier();
                setState(157);
                match(anceParser::IDENTIFIER);
                setState(158);
                match(anceParser::T__1);
                setState(159);
                parameters();
                setState(160);
                match(anceParser::T__2);
                setState(163);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == anceParser::T__0)
                {
                    setState(161);
                    match(anceParser::T__0);
                    setState(162);
                    type();
                }
                setState(165);
                match(anceParser::T__3);
                setState(169);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (
                    (((_la & ~0x3fULL) == 0)
                     && ((1ULL << _la)
                         & ((1ULL << anceParser::T__1) | (1ULL << anceParser::T__3) | (1ULL << anceParser::T__12)
                            | (1ULL << anceParser::T__13) | (1ULL << anceParser::T__17) | (1ULL << anceParser::T__18)
                            | (1ULL << anceParser::T__19) | (1ULL << anceParser::T__20) | (1ULL << anceParser::T__23)
                            | (1ULL << anceParser::T__25) | (1ULL << anceParser::T__31) | (1ULL << anceParser::T__35)
                            | (1ULL << anceParser::T__37) | (1ULL << anceParser::T__46) | (1ULL << anceParser::T__49)
                            | (1ULL << anceParser::T__50) | (1ULL << anceParser::T__52) | (1ULL << anceParser::T__53)
                            | (1ULL << anceParser::T__54) | (1ULL << anceParser::T__55) | (1ULL << anceParser::T__56)
                            | (1ULL << anceParser::T__57) | (1ULL << anceParser::T__58) | (1ULL << anceParser::T__59)
                            | (1ULL << anceParser::T__60) | (1ULL << anceParser::T__61) | (1ULL << anceParser::T__62)))
                            != 0)
                    || ((((_la - 64) & ~0x3fULL) == 0)
                        && ((1ULL << (_la - 64))
                            & ((1ULL << (anceParser::T__63 - 64)) | (1ULL << (anceParser::T__64 - 64))
                               | (1ULL << (anceParser::T__65 - 64)) | (1ULL << (anceParser::T__66 - 64))
                               | (1ULL << (anceParser::T__67 - 64)) | (1ULL << (anceParser::NATIVE_INTEGER_TYPE - 64))
                               | (1ULL << (anceParser::SIGNED_INTEGER - 64)) | (1ULL << (anceParser::HEX_INTEGER - 64))
                               | (1ULL << (anceParser::BIN_INTEGER - 64)) | (1ULL << (anceParser::OCT_INTEGER - 64))
                               | (1ULL << (anceParser::HALF - 64)) | (1ULL << (anceParser::SINGLE - 64))
                               | (1ULL << (anceParser::DOUBLE - 64)) | (1ULL << (anceParser::QUAD - 64))
                               | (1ULL << (anceParser::STRING - 64)) | (1ULL << (anceParser::BYTE - 64))
                               | (1ULL << (anceParser::INTEGER - 64)) | (1ULL << (anceParser::BUFFER - 64))
                               | (1ULL << (anceParser::NOT - 64)) | (1ULL << (anceParser::IDENTIFIER - 64))))
                               != 0))
                {
                    setState(166);
                    code();
                    setState(171);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
                setState(172);
                match(anceParser::T__4);
                break;
            }

            case anceParser::T__5:
            {
                _localctx = _tracker.createInstance<anceParser::ExternFunctionDeclarationContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(174);
                match(anceParser::T__5);
                setState(175);
                match(anceParser::IDENTIFIER);
                setState(176);
                match(anceParser::T__1);
                setState(177);
                parameters();
                setState(178);
                match(anceParser::T__2);
                setState(181);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == anceParser::T__0)
                {
                    setState(179);
                    match(anceParser::T__0);
                    setState(180);
                    type();
                }
                setState(183);
                match(anceParser::SEMICOLON);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

anceParser::ParametersContext::ParametersContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<anceParser::ParameterContext*> anceParser::ParametersContext::parameter()
{
    return getRuleContexts<anceParser::ParameterContext>();
}

anceParser::ParameterContext* anceParser::ParametersContext::parameter(size_t i)
{
    return getRuleContext<anceParser::ParameterContext>(i);
}

size_t anceParser::ParametersContext::getRuleIndex() const
{
    return anceParser::RuleParameters;
}

std::any anceParser::ParametersContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitParameters(this);
    else return visitor->visitChildren(this);
}

anceParser::ParametersContext* anceParser::parameters()
{
    ParametersContext* _localctx = _tracker.createInstance<ParametersContext>(_ctx, getState());
    enterRule(_localctx, 6, anceParser::RuleParameters);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(195);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::IDENTIFIER)
        {
            setState(187);
            parameter();
            setState(192);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == anceParser::T__6)
            {
                setState(188);
                match(anceParser::T__6);
                setState(189);
                parameter();
                setState(194);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

anceParser::ParameterContext::ParameterContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::ParameterContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::ParameterContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

size_t anceParser::ParameterContext::getRuleIndex() const
{
    return anceParser::RuleParameter;
}

std::any anceParser::ParameterContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitParameter(this);
    else return visitor->visitChildren(this);
}

anceParser::ParameterContext* anceParser::parameter()
{
    ParameterContext* _localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
    enterRule(_localctx, 8, anceParser::RuleParameter);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(197);
        match(anceParser::IDENTIFIER);
        setState(198);
        match(anceParser::T__0);
        setState(199);
        type();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TypeDefinitionContext ------------------------------------------------------------------

anceParser::TypeDefinitionContext::TypeDefinitionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::DefineAliasContext* anceParser::TypeDefinitionContext::defineAlias()
{
    return getRuleContext<anceParser::DefineAliasContext>(0);
}

anceParser::StructDefinitionContext* anceParser::TypeDefinitionContext::structDefinition()
{
    return getRuleContext<anceParser::StructDefinitionContext>(0);
}

size_t anceParser::TypeDefinitionContext::getRuleIndex() const
{
    return anceParser::RuleTypeDefinition;
}

std::any anceParser::TypeDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitTypeDefinition(this);
    else return visitor->visitChildren(this);
}

anceParser::TypeDefinitionContext* anceParser::typeDefinition()
{
    TypeDefinitionContext* _localctx = _tracker.createInstance<TypeDefinitionContext>(_ctx, getState());
    enterRule(_localctx, 10, anceParser::RuleTypeDefinition);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(203);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx))
        {
            case 1:
            {
                enterOuterAlt(_localctx, 1);
                setState(201);
                defineAlias();
                break;
            }

            case 2:
            {
                enterOuterAlt(_localctx, 2);
                setState(202);
                structDefinition();
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DefineAliasContext ------------------------------------------------------------------

anceParser::DefineAliasContext::DefineAliasContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AccessModifierContext* anceParser::DefineAliasContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::DefineAliasContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::DefineAliasContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::DefineAliasContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::DefineAliasContext::getRuleIndex() const
{
    return anceParser::RuleDefineAlias;
}

std::any anceParser::DefineAliasContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDefineAlias(this);
    else return visitor->visitChildren(this);
}

anceParser::DefineAliasContext* anceParser::defineAlias()
{
    DefineAliasContext* _localctx = _tracker.createInstance<DefineAliasContext>(_ctx, getState());
    enterRule(_localctx, 12, anceParser::RuleDefineAlias);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(205);
        accessModifier();
        setState(206);
        match(anceParser::T__7);
        setState(207);
        match(anceParser::IDENTIFIER);
        setState(208);
        match(anceParser::T__8);
        setState(209);
        type();
        setState(210);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StructDefinitionContext ------------------------------------------------------------------

anceParser::StructDefinitionContext::StructDefinitionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AccessModifierContext* anceParser::StructDefinitionContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::StructDefinitionContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

std::vector<anceParser::MemberContext*> anceParser::StructDefinitionContext::member()
{
    return getRuleContexts<anceParser::MemberContext>();
}

anceParser::MemberContext* anceParser::StructDefinitionContext::member(size_t i)
{
    return getRuleContext<anceParser::MemberContext>(i);
}

size_t anceParser::StructDefinitionContext::getRuleIndex() const
{
    return anceParser::RuleStructDefinition;
}

std::any anceParser::StructDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitStructDefinition(this);
    else return visitor->visitChildren(this);
}

anceParser::StructDefinitionContext* anceParser::structDefinition()
{
    StructDefinitionContext* _localctx = _tracker.createInstance<StructDefinitionContext>(_ctx, getState());
    enterRule(_localctx, 14, anceParser::RuleStructDefinition);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(212);
        accessModifier();
        setState(213);
        match(anceParser::T__9);
        setState(214);
        match(anceParser::IDENTIFIER);
        setState(215);
        match(anceParser::T__3);
        setState(219);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == anceParser::T__10

               || _la == anceParser::T__11)
        {
            setState(216);
            member();
            setState(221);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(222);
        match(anceParser::T__4);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MemberContext ------------------------------------------------------------------

anceParser::MemberContext::MemberContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AccessModifierContext* anceParser::MemberContext::accessModifier()
{
    return getRuleContext<anceParser::AccessModifierContext>(0);
}

tree::TerminalNode* anceParser::MemberContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::MemberContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::MemberContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

anceParser::AssignerContext* anceParser::MemberContext::assigner()
{
    return getRuleContext<anceParser::AssignerContext>(0);
}

anceParser::LiteralExpressionContext* anceParser::MemberContext::literalExpression()
{
    return getRuleContext<anceParser::LiteralExpressionContext>(0);
}

size_t anceParser::MemberContext::getRuleIndex() const
{
    return anceParser::RuleMember;
}

std::any anceParser::MemberContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMember(this);
    else return visitor->visitChildren(this);
}

anceParser::MemberContext* anceParser::member()
{
    MemberContext* _localctx = _tracker.createInstance<MemberContext>(_ctx, getState());
    enterRule(_localctx, 16, anceParser::RuleMember);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(224);
        accessModifier();
        setState(225);
        match(anceParser::IDENTIFIER);
        setState(226);
        match(anceParser::T__0);
        setState(227);
        type();
        setState(231);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__14) | (1ULL << anceParser::T__15) | (1ULL << anceParser::T__16)))
                    != 0))
        {
            setState(228);
            assigner();
            setState(229);
            literalExpression();
        }
        setState(233);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AccessModifierContext ------------------------------------------------------------------

anceParser::AccessModifierContext::AccessModifierContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::AccessModifierContext::getRuleIndex() const
{
    return anceParser::RuleAccessModifier;
}

void anceParser::AccessModifierContext::copyFrom(AccessModifierContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- PrivateContext ------------------------------------------------------------------

anceParser::PrivateContext::PrivateContext(AccessModifierContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::PrivateContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitPrivate(this);
    else return visitor->visitChildren(this);
}
//----------------- PublicContext ------------------------------------------------------------------

anceParser::PublicContext::PublicContext(AccessModifierContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::PublicContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitPublic(this);
    else return visitor->visitChildren(this);
}
anceParser::AccessModifierContext* anceParser::accessModifier()
{
    AccessModifierContext* _localctx = _tracker.createInstance<AccessModifierContext>(_ctx, getState());
    enterRule(_localctx, 18, anceParser::RuleAccessModifier);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(237);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__10:
            {
                _localctx = _tracker.createInstance<anceParser::PublicContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(235);
                match(anceParser::T__10);
                break;
            }

            case anceParser::T__11:
            {
                _localctx = _tracker.createInstance<anceParser::PrivateContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(236);
                match(anceParser::T__11);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CodeContext ------------------------------------------------------------------

anceParser::CodeContext::CodeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::StatementContext* anceParser::CodeContext::statement()
{
    return getRuleContext<anceParser::StatementContext>(0);
}

anceParser::BlockContext* anceParser::CodeContext::block()
{
    return getRuleContext<anceParser::BlockContext>(0);
}

size_t anceParser::CodeContext::getRuleIndex() const
{
    return anceParser::RuleCode;
}

std::any anceParser::CodeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitCode(this);
    else return visitor->visitChildren(this);
}

anceParser::CodeContext* anceParser::code()
{
    CodeContext* _localctx = _tracker.createInstance<CodeContext>(_ctx, getState());
    enterRule(_localctx, 20, anceParser::RuleCode);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(241);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__1:
            case anceParser::T__12:
            case anceParser::T__13:
            case anceParser::T__17:
            case anceParser::T__18:
            case anceParser::T__19:
            case anceParser::T__20:
            case anceParser::T__23:
            case anceParser::T__25:
            case anceParser::T__31:
            case anceParser::T__35:
            case anceParser::T__37:
            case anceParser::T__46:
            case anceParser::T__49:
            case anceParser::T__50:
            case anceParser::T__52:
            case anceParser::T__53:
            case anceParser::T__54:
            case anceParser::T__55:
            case anceParser::T__56:
            case anceParser::T__57:
            case anceParser::T__58:
            case anceParser::T__59:
            case anceParser::T__60:
            case anceParser::T__61:
            case anceParser::T__62:
            case anceParser::T__63:
            case anceParser::T__64:
            case anceParser::T__65:
            case anceParser::T__66:
            case anceParser::T__67:
            case anceParser::NATIVE_INTEGER_TYPE:
            case anceParser::SIGNED_INTEGER:
            case anceParser::HEX_INTEGER:
            case anceParser::BIN_INTEGER:
            case anceParser::OCT_INTEGER:
            case anceParser::HALF:
            case anceParser::SINGLE:
            case anceParser::DOUBLE:
            case anceParser::QUAD:
            case anceParser::STRING:
            case anceParser::BYTE:
            case anceParser::INTEGER:
            case anceParser::BUFFER:
            case anceParser::NOT:
            case anceParser::IDENTIFIER:
            {
                enterOuterAlt(_localctx, 1);
                setState(239);
                statement();
                break;
            }

            case anceParser::T__3:
            {
                enterOuterAlt(_localctx, 2);
                setState(240);
                block();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

anceParser::BlockContext::BlockContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<anceParser::CodeContext*> anceParser::BlockContext::code()
{
    return getRuleContexts<anceParser::CodeContext>();
}

anceParser::CodeContext* anceParser::BlockContext::code(size_t i)
{
    return getRuleContext<anceParser::CodeContext>(i);
}

size_t anceParser::BlockContext::getRuleIndex() const
{
    return anceParser::RuleBlock;
}

std::any anceParser::BlockContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitBlock(this);
    else return visitor->visitChildren(this);
}

anceParser::BlockContext* anceParser::block()
{
    BlockContext* _localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
    enterRule(_localctx, 22, anceParser::RuleBlock);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(243);
        match(anceParser::T__3);
        setState(247);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~0x3fULL) == 0)
                && ((1ULL << _la)
                    & ((1ULL << anceParser::T__1) | (1ULL << anceParser::T__3) | (1ULL << anceParser::T__12)
                       | (1ULL << anceParser::T__13) | (1ULL << anceParser::T__17) | (1ULL << anceParser::T__18)
                       | (1ULL << anceParser::T__19) | (1ULL << anceParser::T__20) | (1ULL << anceParser::T__23)
                       | (1ULL << anceParser::T__25) | (1ULL << anceParser::T__31) | (1ULL << anceParser::T__35)
                       | (1ULL << anceParser::T__37) | (1ULL << anceParser::T__46) | (1ULL << anceParser::T__49)
                       | (1ULL << anceParser::T__50) | (1ULL << anceParser::T__52) | (1ULL << anceParser::T__53)
                       | (1ULL << anceParser::T__54) | (1ULL << anceParser::T__55) | (1ULL << anceParser::T__56)
                       | (1ULL << anceParser::T__57) | (1ULL << anceParser::T__58) | (1ULL << anceParser::T__59)
                       | (1ULL << anceParser::T__60) | (1ULL << anceParser::T__61) | (1ULL << anceParser::T__62)))
                       != 0)
               || ((((_la - 64) & ~0x3fULL) == 0)
                   && ((1ULL << (_la - 64))
                       & ((1ULL << (anceParser::T__63 - 64)) | (1ULL << (anceParser::T__64 - 64))
                          | (1ULL << (anceParser::T__65 - 64)) | (1ULL << (anceParser::T__66 - 64))
                          | (1ULL << (anceParser::T__67 - 64)) | (1ULL << (anceParser::NATIVE_INTEGER_TYPE - 64))
                          | (1ULL << (anceParser::SIGNED_INTEGER - 64)) | (1ULL << (anceParser::HEX_INTEGER - 64))
                          | (1ULL << (anceParser::BIN_INTEGER - 64)) | (1ULL << (anceParser::OCT_INTEGER - 64))
                          | (1ULL << (anceParser::HALF - 64)) | (1ULL << (anceParser::SINGLE - 64))
                          | (1ULL << (anceParser::DOUBLE - 64)) | (1ULL << (anceParser::QUAD - 64))
                          | (1ULL << (anceParser::STRING - 64)) | (1ULL << (anceParser::BYTE - 64))
                          | (1ULL << (anceParser::INTEGER - 64)) | (1ULL << (anceParser::BUFFER - 64))
                          | (1ULL << (anceParser::NOT - 64)) | (1ULL << (anceParser::IDENTIFIER - 64))))
                          != 0))
        {
            setState(244);
            code();
            setState(249);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(250);
        match(anceParser::T__4);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

anceParser::StatementContext::StatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionStatementContext* anceParser::StatementContext::expressionStatement()
{
    return getRuleContext<anceParser::ExpressionStatementContext>(0);
}

anceParser::LocalVariableDefinitionContext* anceParser::StatementContext::localVariableDefinition()
{
    return getRuleContext<anceParser::LocalVariableDefinitionContext>(0);
}

anceParser::LocalReferenceDefinitionContext* anceParser::StatementContext::localReferenceDefinition()
{
    return getRuleContext<anceParser::LocalReferenceDefinitionContext>(0);
}

anceParser::DropStatementContext* anceParser::StatementContext::dropStatement()
{
    return getRuleContext<anceParser::DropStatementContext>(0);
}

anceParser::AssignmentContext* anceParser::StatementContext::assignment()
{
    return getRuleContext<anceParser::AssignmentContext>(0);
}

anceParser::DeleteStatementContext* anceParser::StatementContext::deleteStatement()
{
    return getRuleContext<anceParser::DeleteStatementContext>(0);
}

anceParser::ReturnStatementContext* anceParser::StatementContext::returnStatement()
{
    return getRuleContext<anceParser::ReturnStatementContext>(0);
}

anceParser::AssertStatementContext* anceParser::StatementContext::assertStatement()
{
    return getRuleContext<anceParser::AssertStatementContext>(0);
}

anceParser::IfStatementContext* anceParser::StatementContext::ifStatement()
{
    return getRuleContext<anceParser::IfStatementContext>(0);
}

anceParser::WhileStatementContext* anceParser::StatementContext::whileStatement()
{
    return getRuleContext<anceParser::WhileStatementContext>(0);
}

anceParser::MatchStatementContext* anceParser::StatementContext::matchStatement()
{
    return getRuleContext<anceParser::MatchStatementContext>(0);
}

size_t anceParser::StatementContext::getRuleIndex() const
{
    return anceParser::RuleStatement;
}

std::any anceParser::StatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::StatementContext* anceParser::statement()
{
    StatementContext* _localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
    enterRule(_localctx, 24, anceParser::RuleStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(263);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx))
        {
            case 1:
            {
                enterOuterAlt(_localctx, 1);
                setState(252);
                expressionStatement();
                break;
            }

            case 2:
            {
                enterOuterAlt(_localctx, 2);
                setState(253);
                localVariableDefinition();
                break;
            }

            case 3:
            {
                enterOuterAlt(_localctx, 3);
                setState(254);
                localReferenceDefinition();
                break;
            }

            case 4:
            {
                enterOuterAlt(_localctx, 4);
                setState(255);
                dropStatement();
                break;
            }

            case 5:
            {
                enterOuterAlt(_localctx, 5);
                setState(256);
                assignment();
                break;
            }

            case 6:
            {
                enterOuterAlt(_localctx, 6);
                setState(257);
                deleteStatement();
                break;
            }

            case 7:
            {
                enterOuterAlt(_localctx, 7);
                setState(258);
                returnStatement();
                break;
            }

            case 8:
            {
                enterOuterAlt(_localctx, 8);
                setState(259);
                assertStatement();
                break;
            }

            case 9:
            {
                enterOuterAlt(_localctx, 9);
                setState(260);
                ifStatement();
                break;
            }

            case 10:
            {
                enterOuterAlt(_localctx, 10);
                setState(261);
                whileStatement();
                break;
            }

            case 11:
            {
                enterOuterAlt(_localctx, 11);
                setState(262);
                matchStatement();
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

anceParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::IndependentExpressionContext* anceParser::ExpressionStatementContext::independentExpression()
{
    return getRuleContext<anceParser::IndependentExpressionContext>(0);
}

tree::TerminalNode* anceParser::ExpressionStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::ExpressionStatementContext::getRuleIndex() const
{
    return anceParser::RuleExpressionStatement;
}

std::any anceParser::ExpressionStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitExpressionStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::ExpressionStatementContext* anceParser::expressionStatement()
{
    ExpressionStatementContext* _localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
    enterRule(_localctx, 26, anceParser::RuleExpressionStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(265);
        independentExpression();
        setState(266);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LocalVariableDefinitionContext ------------------------------------------------------------------

anceParser::LocalVariableDefinitionContext::LocalVariableDefinitionContext(ParserRuleContext* parent,
                                                                           size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::LocalVariableDefinitionContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

tree::TerminalNode* anceParser::LocalVariableDefinitionContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

anceParser::TypeContext* anceParser::LocalVariableDefinitionContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::AssignerContext* anceParser::LocalVariableDefinitionContext::assigner()
{
    return getRuleContext<anceParser::AssignerContext>(0);
}

anceParser::ExpressionContext* anceParser::LocalVariableDefinitionContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::LocalVariableDefinitionContext::getRuleIndex() const
{
    return anceParser::RuleLocalVariableDefinition;
}

std::any anceParser::LocalVariableDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitLocalVariableDefinition(this);
    else return visitor->visitChildren(this);
}

anceParser::LocalVariableDefinitionContext* anceParser::localVariableDefinition()
{
    LocalVariableDefinitionContext* _localctx =
        _tracker.createInstance<LocalVariableDefinitionContext>(_ctx, getState());
    enterRule(_localctx, 28, anceParser::RuleLocalVariableDefinition);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(268);
        match(anceParser::T__12);
        setState(269);
        match(anceParser::IDENTIFIER);
        setState(272);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::T__0)
        {
            setState(270);
            match(anceParser::T__0);
            setState(271);
            type();
        }
        setState(277);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__14) | (1ULL << anceParser::T__15) | (1ULL << anceParser::T__16)))
                    != 0))
        {
            setState(274);
            assigner();
            setState(275);
            expression(0);
        }
        setState(279);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LocalReferenceDefinitionContext ------------------------------------------------------------------

anceParser::LocalReferenceDefinitionContext::LocalReferenceDefinitionContext(ParserRuleContext* parent,
                                                                             size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::LocalReferenceDefinitionContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::TypeContext* anceParser::LocalReferenceDefinitionContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::BindRefContext* anceParser::LocalReferenceDefinitionContext::bindRef()
{
    return getRuleContext<anceParser::BindRefContext>(0);
}

tree::TerminalNode* anceParser::LocalReferenceDefinitionContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::LocalReferenceDefinitionContext::getRuleIndex() const
{
    return anceParser::RuleLocalReferenceDefinition;
}

std::any anceParser::LocalReferenceDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitLocalReferenceDefinition(this);
    else return visitor->visitChildren(this);
}

anceParser::LocalReferenceDefinitionContext* anceParser::localReferenceDefinition()
{
    LocalReferenceDefinitionContext* _localctx =
        _tracker.createInstance<LocalReferenceDefinitionContext>(_ctx, getState());
    enterRule(_localctx, 30, anceParser::RuleLocalReferenceDefinition);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(281);
        match(anceParser::T__12);
        setState(282);
        match(anceParser::IDENTIFIER);
        setState(283);
        match(anceParser::T__0);
        setState(284);
        type();
        setState(285);
        bindRef();
        setState(286);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DropStatementContext ------------------------------------------------------------------

anceParser::DropStatementContext::DropStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::DropStatementContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

tree::TerminalNode* anceParser::DropStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::DropStatementContext::getRuleIndex() const
{
    return anceParser::RuleDropStatement;
}

std::any anceParser::DropStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDropStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::DropStatementContext* anceParser::dropStatement()
{
    DropStatementContext* _localctx = _tracker.createInstance<DropStatementContext>(_ctx, getState());
    enterRule(_localctx, 32, anceParser::RuleDropStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(288);
        match(anceParser::T__13);
        setState(289);
        match(anceParser::IDENTIFIER);
        setState(290);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

anceParser::AssignmentContext::AssignmentContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AssignerContext* anceParser::AssignmentContext::assigner()
{
    return getRuleContext<anceParser::AssignerContext>(0);
}

tree::TerminalNode* anceParser::AssignmentContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

std::vector<anceParser::ExpressionContext*> anceParser::AssignmentContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::AssignmentContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

size_t anceParser::AssignmentContext::getRuleIndex() const
{
    return anceParser::RuleAssignment;
}

std::any anceParser::AssignmentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAssignment(this);
    else return visitor->visitChildren(this);
}

anceParser::AssignmentContext* anceParser::assignment()
{
    AssignmentContext* _localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
    enterRule(_localctx, 34, anceParser::RuleAssignment);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(292);
        antlrcpp::downCast<AssignmentContext*>(_localctx)->assignable = expression(0);
        setState(293);
        assigner();
        setState(294);
        antlrcpp::downCast<AssignmentContext*>(_localctx)->assigned = expression(0);
        setState(295);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignerContext ------------------------------------------------------------------

anceParser::AssignerContext::AssignerContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::AssignerContext::getRuleIndex() const
{
    return anceParser::RuleAssigner;
}

void anceParser::AssignerContext::copyFrom(AssignerContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- MoveAssignmentContext ------------------------------------------------------------------

anceParser::MoveAssignmentContext::MoveAssignmentContext(AssignerContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::MoveAssignmentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMoveAssignment(this);
    else return visitor->visitChildren(this);
}
//----------------- FinalCopyAssignmentContext ------------------------------------------------------------------

anceParser::FinalCopyAssignmentContext::FinalCopyAssignmentContext(AssignerContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::FinalCopyAssignmentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFinalCopyAssignment(this);
    else return visitor->visitChildren(this);
}
//----------------- CopyAssignmentContext ------------------------------------------------------------------

anceParser::CopyAssignmentContext::CopyAssignmentContext(AssignerContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::CopyAssignmentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitCopyAssignment(this);
    else return visitor->visitChildren(this);
}
anceParser::AssignerContext* anceParser::assigner()
{
    AssignerContext* _localctx = _tracker.createInstance<AssignerContext>(_ctx, getState());
    enterRule(_localctx, 36, anceParser::RuleAssigner);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(300);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__14:
            {
                _localctx = _tracker.createInstance<anceParser::CopyAssignmentContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(297);
                match(anceParser::T__14);
                break;
            }

            case anceParser::T__15:
            {
                _localctx = _tracker.createInstance<anceParser::MoveAssignmentContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(298);
                match(anceParser::T__15);
                break;
            }

            case anceParser::T__16:
            {
                _localctx = _tracker.createInstance<anceParser::FinalCopyAssignmentContext>(_localctx);
                enterOuterAlt(_localctx, 3);
                setState(299);
                match(anceParser::T__16);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DeleteStatementContext ------------------------------------------------------------------

anceParser::DeleteStatementContext::DeleteStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::DeleteStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

tree::TerminalNode* anceParser::DeleteStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

tree::TerminalNode* anceParser::DeleteStatementContext::BUFFER()
{
    return getToken(anceParser::BUFFER, 0);
}

size_t anceParser::DeleteStatementContext::getRuleIndex() const
{
    return anceParser::RuleDeleteStatement;
}

std::any anceParser::DeleteStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDeleteStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::DeleteStatementContext* anceParser::deleteStatement()
{
    DeleteStatementContext* _localctx = _tracker.createInstance<DeleteStatementContext>(_ctx, getState());
    enterRule(_localctx, 38, anceParser::RuleDeleteStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(302);
        match(anceParser::T__17);
        setState(304);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx))
        {
            case 1:
            {
                setState(303);
                match(anceParser::BUFFER);
                break;
            }

            default:
                break;
        }
        setState(306);
        expression(0);
        setState(307);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

anceParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::ReturnStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

anceParser::ExpressionContext* anceParser::ReturnStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::ReturnStatementContext::getRuleIndex() const
{
    return anceParser::RuleReturnStatement;
}

std::any anceParser::ReturnStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitReturnStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::ReturnStatementContext* anceParser::returnStatement()
{
    ReturnStatementContext* _localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
    enterRule(_localctx, 40, anceParser::RuleReturnStatement);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(309);
        match(anceParser::T__18);
        setState(311);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__1) | (1ULL << anceParser::T__20) | (1ULL << anceParser::T__25)
                    | (1ULL << anceParser::T__31) | (1ULL << anceParser::T__35) | (1ULL << anceParser::T__37)
                    | (1ULL << anceParser::T__46) | (1ULL << anceParser::T__49) | (1ULL << anceParser::T__50)
                    | (1ULL << anceParser::T__52) | (1ULL << anceParser::T__53) | (1ULL << anceParser::T__54)
                    | (1ULL << anceParser::T__55) | (1ULL << anceParser::T__56) | (1ULL << anceParser::T__57)
                    | (1ULL << anceParser::T__58) | (1ULL << anceParser::T__59) | (1ULL << anceParser::T__60)
                    | (1ULL << anceParser::T__61) | (1ULL << anceParser::T__62)))
                    != 0)
            || ((((_la - 64) & ~0x3fULL) == 0)
                && ((1ULL << (_la - 64))
                    & ((1ULL << (anceParser::T__63 - 64)) | (1ULL << (anceParser::T__64 - 64))
                       | (1ULL << (anceParser::T__65 - 64)) | (1ULL << (anceParser::T__66 - 64))
                       | (1ULL << (anceParser::T__67 - 64)) | (1ULL << (anceParser::NATIVE_INTEGER_TYPE - 64))
                       | (1ULL << (anceParser::SIGNED_INTEGER - 64)) | (1ULL << (anceParser::HEX_INTEGER - 64))
                       | (1ULL << (anceParser::BIN_INTEGER - 64)) | (1ULL << (anceParser::OCT_INTEGER - 64))
                       | (1ULL << (anceParser::HALF - 64)) | (1ULL << (anceParser::SINGLE - 64))
                       | (1ULL << (anceParser::DOUBLE - 64)) | (1ULL << (anceParser::QUAD - 64))
                       | (1ULL << (anceParser::STRING - 64)) | (1ULL << (anceParser::BYTE - 64))
                       | (1ULL << (anceParser::INTEGER - 64)) | (1ULL << (anceParser::BUFFER - 64))
                       | (1ULL << (anceParser::NOT - 64)) | (1ULL << (anceParser::IDENTIFIER - 64))))
                       != 0))
        {
            setState(310);
            expression(0);
        }
        setState(313);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssertStatementContext ------------------------------------------------------------------

anceParser::AssertStatementContext::AssertStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::AssertStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

tree::TerminalNode* anceParser::AssertStatementContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

size_t anceParser::AssertStatementContext::getRuleIndex() const
{
    return anceParser::RuleAssertStatement;
}

std::any anceParser::AssertStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAssertStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::AssertStatementContext* anceParser::assertStatement()
{
    AssertStatementContext* _localctx = _tracker.createInstance<AssertStatementContext>(_ctx, getState());
    enterRule(_localctx, 42, anceParser::RuleAssertStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(315);
        match(anceParser::T__19);
        setState(316);
        expression(0);
        setState(317);
        match(anceParser::SEMICOLON);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

anceParser::IfStatementContext::IfStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::IfStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

std::vector<anceParser::CodeContext*> anceParser::IfStatementContext::code()
{
    return getRuleContexts<anceParser::CodeContext>();
}

anceParser::CodeContext* anceParser::IfStatementContext::code(size_t i)
{
    return getRuleContext<anceParser::CodeContext>(i);
}

size_t anceParser::IfStatementContext::getRuleIndex() const
{
    return anceParser::RuleIfStatement;
}

std::any anceParser::IfStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIfStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::IfStatementContext* anceParser::ifStatement()
{
    IfStatementContext* _localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
    enterRule(_localctx, 44, anceParser::RuleIfStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(319);
        match(anceParser::T__20);
        setState(320);
        expression(0);
        setState(321);
        match(anceParser::T__21);
        setState(322);
        antlrcpp::downCast<IfStatementContext*>(_localctx)->ifBlock = code();
        setState(325);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx))
        {
            case 1:
            {
                setState(323);
                match(anceParser::T__22);
                setState(324);
                antlrcpp::downCast<IfStatementContext*>(_localctx)->elseBlock = code();
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

anceParser::WhileStatementContext::WhileStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::WhileStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::CodeContext* anceParser::WhileStatementContext::code()
{
    return getRuleContext<anceParser::CodeContext>(0);
}

size_t anceParser::WhileStatementContext::getRuleIndex() const
{
    return anceParser::RuleWhileStatement;
}

std::any anceParser::WhileStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitWhileStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::WhileStatementContext* anceParser::whileStatement()
{
    WhileStatementContext* _localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
    enterRule(_localctx, 46, anceParser::RuleWhileStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(327);
        match(anceParser::T__23);
        setState(328);
        expression(0);
        setState(329);
        match(anceParser::T__24);
        setState(330);
        code();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MatchStatementContext ------------------------------------------------------------------

anceParser::MatchStatementContext::MatchStatementContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::MatchStatementContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

std::vector<anceParser::MatchCaseContext*> anceParser::MatchStatementContext::matchCase()
{
    return getRuleContexts<anceParser::MatchCaseContext>();
}

anceParser::MatchCaseContext* anceParser::MatchStatementContext::matchCase(size_t i)
{
    return getRuleContext<anceParser::MatchCaseContext>(i);
}

size_t anceParser::MatchStatementContext::getRuleIndex() const
{
    return anceParser::RuleMatchStatement;
}

std::any anceParser::MatchStatementContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMatchStatement(this);
    else return visitor->visitChildren(this);
}

anceParser::MatchStatementContext* anceParser::matchStatement()
{
    MatchStatementContext* _localctx = _tracker.createInstance<MatchStatementContext>(_ctx, getState());
    enterRule(_localctx, 48, anceParser::RuleMatchStatement);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(332);
        match(anceParser::T__25);
        setState(333);
        expression(0);
        setState(334);
        match(anceParser::T__26);
        setState(335);
        match(anceParser::T__3);
        setState(339);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 30) & ~0x3fULL) == 0)
                && ((1ULL << (_la - 30))
                    & ((1ULL << (anceParser::T__29 - 30)) | (1ULL << (anceParser::T__53 - 30))
                       | (1ULL << (anceParser::T__54 - 30)) | (1ULL << (anceParser::T__55 - 30))
                       | (1ULL << (anceParser::SIGNED_INTEGER - 30)) | (1ULL << (anceParser::HEX_INTEGER - 30))
                       | (1ULL << (anceParser::BIN_INTEGER - 30)) | (1ULL << (anceParser::OCT_INTEGER - 30))
                       | (1ULL << (anceParser::HALF - 30)) | (1ULL << (anceParser::SINGLE - 30))
                       | (1ULL << (anceParser::DOUBLE - 30)) | (1ULL << (anceParser::QUAD - 30))
                       | (1ULL << (anceParser::STRING - 30)) | (1ULL << (anceParser::BYTE - 30))
                       | (1ULL << (anceParser::INTEGER - 30)) | (1ULL << (anceParser::IDENTIFIER - 30))))
                       != 0))
        {
            setState(336);
            matchCase();
            setState(341);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(342);
        match(anceParser::T__4);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MatchCaseContext ------------------------------------------------------------------

anceParser::MatchCaseContext::MatchCaseContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::MatchCaseContext::getRuleIndex() const
{
    return anceParser::RuleMatchCase;
}

void anceParser::MatchCaseContext::copyFrom(MatchCaseContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- LiteralCaseContext ------------------------------------------------------------------

std::vector<anceParser::LiteralExpressionContext*> anceParser::LiteralCaseContext::literalExpression()
{
    return getRuleContexts<anceParser::LiteralExpressionContext>();
}

anceParser::LiteralExpressionContext* anceParser::LiteralCaseContext::literalExpression(size_t i)
{
    return getRuleContext<anceParser::LiteralExpressionContext>(i);
}

anceParser::CodeContext* anceParser::LiteralCaseContext::code()
{
    return getRuleContext<anceParser::CodeContext>(0);
}

anceParser::LiteralCaseContext::LiteralCaseContext(MatchCaseContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LiteralCaseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLiteralCase(this);
    else return visitor->visitChildren(this);
}
//----------------- DefaultCaseContext ------------------------------------------------------------------

anceParser::CodeContext* anceParser::DefaultCaseContext::code()
{
    return getRuleContext<anceParser::CodeContext>(0);
}

anceParser::DefaultCaseContext::DefaultCaseContext(MatchCaseContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::DefaultCaseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDefaultCase(this);
    else return visitor->visitChildren(this);
}
anceParser::MatchCaseContext* anceParser::matchCase()
{
    MatchCaseContext* _localctx = _tracker.createInstance<MatchCaseContext>(_ctx, getState());
    enterRule(_localctx, 50, anceParser::RuleMatchCase);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(358);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__53:
            case anceParser::T__54:
            case anceParser::T__55:
            case anceParser::SIGNED_INTEGER:
            case anceParser::HEX_INTEGER:
            case anceParser::BIN_INTEGER:
            case anceParser::OCT_INTEGER:
            case anceParser::HALF:
            case anceParser::SINGLE:
            case anceParser::DOUBLE:
            case anceParser::QUAD:
            case anceParser::STRING:
            case anceParser::BYTE:
            case anceParser::INTEGER:
            case anceParser::IDENTIFIER:
            {
                _localctx = _tracker.createInstance<anceParser::LiteralCaseContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(344);
                literalExpression();
                setState(349);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == anceParser::T__27)
                {
                    setState(345);
                    match(anceParser::T__27);
                    setState(346);
                    literalExpression();
                    setState(351);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
                setState(352);
                match(anceParser::T__28);
                setState(353);
                code();
                break;
            }

            case anceParser::T__29:
            {
                _localctx = _tracker.createInstance<anceParser::DefaultCaseContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(355);
                match(anceParser::T__29);
                setState(356);
                match(anceParser::T__28);
                setState(357);
                code();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

anceParser::ExpressionContext::ExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::ExpressionContext::getRuleIndex() const
{
    return anceParser::RuleExpression;
}

void anceParser::ExpressionContext::copyFrom(ExpressionContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- IfExpressionContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::IfExpressionContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::IfExpressionContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::IfExpressionContext::IfExpressionContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::IfExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIfExpression(this);
    else return visitor->visitChildren(this);
}
//----------------- VariableContext ------------------------------------------------------------------

anceParser::VariableAccessContext* anceParser::VariableContext::variableAccess()
{
    return getRuleContext<anceParser::VariableAccessContext>(0);
}

anceParser::VariableContext::VariableContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::VariableContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVariable(this);
    else return visitor->visitChildren(this);
}
//----------------- AdressOfContext ------------------------------------------------------------------

anceParser::AddressofContext* anceParser::AdressOfContext::addressof()
{
    return getRuleContext<anceParser::AddressofContext>(0);
}

anceParser::AdressOfContext::AdressOfContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::AdressOfContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAdressOf(this);
    else return visitor->visitChildren(this);
}
//----------------- BinaryOperationContext ------------------------------------------------------------------

anceParser::BinaryOperatorMultiplicativeContext* anceParser::BinaryOperationContext::binaryOperatorMultiplicative()
{
    return getRuleContext<anceParser::BinaryOperatorMultiplicativeContext>(0);
}

std::vector<anceParser::ExpressionContext*> anceParser::BinaryOperationContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::BinaryOperationContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::BinaryOperatorAdditiveContext* anceParser::BinaryOperationContext::binaryOperatorAdditive()
{
    return getRuleContext<anceParser::BinaryOperatorAdditiveContext>(0);
}

anceParser::BinaryOperatorRelationalContext* anceParser::BinaryOperationContext::binaryOperatorRelational()
{
    return getRuleContext<anceParser::BinaryOperatorRelationalContext>(0);
}

anceParser::BinaryOperatorEqualityContext* anceParser::BinaryOperationContext::binaryOperatorEquality()
{
    return getRuleContext<anceParser::BinaryOperatorEqualityContext>(0);
}

anceParser::BinaryOperationContext::BinaryOperationContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::BinaryOperationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitBinaryOperation(this);
    else return visitor->visitChildren(this);
}
//----------------- NotOperationContext ------------------------------------------------------------------

tree::TerminalNode* anceParser::NotOperationContext::NOT()
{
    return getToken(anceParser::NOT, 0);
}

anceParser::ExpressionContext* anceParser::NotOperationContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::NotOperationContext::NotOperationContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::NotOperationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitNotOperation(this);
    else return visitor->visitChildren(this);
}
//----------------- SubscriptContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::SubscriptContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::SubscriptContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::SubscriptContext::SubscriptContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::SubscriptContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSubscript(this);
    else return visitor->visitChildren(this);
}
//----------------- LogicalOrContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::LogicalOrContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::LogicalOrContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

tree::TerminalNode* anceParser::LogicalOrContext::NOT()
{
    return getToken(anceParser::NOT, 0);
}

anceParser::LogicalOrContext::LogicalOrContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LogicalOrContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLogicalOr(this);
    else return visitor->visitChildren(this);
}
//----------------- MatchContext ------------------------------------------------------------------

anceParser::MatchExpressionContext* anceParser::MatchContext::matchExpression()
{
    return getRuleContext<anceParser::MatchExpressionContext>(0);
}

anceParser::MatchContext::MatchContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::MatchContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMatch(this);
    else return visitor->visitChildren(this);
}
//----------------- RefContext ------------------------------------------------------------------

anceParser::BindRefContext* anceParser::RefContext::bindRef()
{
    return getRuleContext<anceParser::BindRefContext>(0);
}

anceParser::RefContext::RefContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::RefContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitRef(this);
    else return visitor->visitChildren(this);
}
//----------------- IndependentContext ------------------------------------------------------------------

anceParser::IndependentExpressionContext* anceParser::IndependentContext::independentExpression()
{
    return getRuleContext<anceParser::IndependentExpressionContext>(0);
}

anceParser::IndependentContext::IndependentContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::IndependentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIndependent(this);
    else return visitor->visitChildren(this);
}
//----------------- ParenthesisContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::ParenthesisContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::ParenthesisContext::ParenthesisContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::ParenthesisContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitParenthesis(this);
    else return visitor->visitChildren(this);
}
//----------------- AllocContext ------------------------------------------------------------------

anceParser::AllocationContext* anceParser::AllocContext::allocation()
{
    return getRuleContext<anceParser::AllocationContext>(0);
}

anceParser::AllocContext::AllocContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::AllocContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAlloc(this);
    else return visitor->visitChildren(this);
}
//----------------- MemberAccessContext ------------------------------------------------------------------

tree::TerminalNode* anceParser::MemberAccessContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::ExpressionContext* anceParser::MemberAccessContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::MemberAccessContext::MemberAccessContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::MemberAccessContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMemberAccess(this);
    else return visitor->visitChildren(this);
}
//----------------- LiteralContext ------------------------------------------------------------------

anceParser::LiteralExpressionContext* anceParser::LiteralContext::literalExpression()
{
    return getRuleContext<anceParser::LiteralExpressionContext>(0);
}

anceParser::LiteralContext::LiteralContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLiteral(this);
    else return visitor->visitChildren(this);
}
//----------------- LogicalAndContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::LogicalAndContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::LogicalAndContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

tree::TerminalNode* anceParser::LogicalAndContext::NOT()
{
    return getToken(anceParser::NOT, 0);
}

anceParser::LogicalAndContext::LogicalAndContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LogicalAndContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLogicalAnd(this);
    else return visitor->visitChildren(this);
}
//----------------- VectorDefinitionContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::VectorDefinitionContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::VectorDefinitionContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::TypeContext* anceParser::VectorDefinitionContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::VectorDefinitionContext::VectorDefinitionContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::VectorDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVectorDefinition(this);
    else return visitor->visitChildren(this);
}
//----------------- ArrayDefinitionContext ------------------------------------------------------------------

std::vector<anceParser::ExpressionContext*> anceParser::ArrayDefinitionContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::ArrayDefinitionContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

anceParser::TypeContext* anceParser::ArrayDefinitionContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::ArrayDefinitionContext::ArrayDefinitionContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::ArrayDefinitionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitArrayDefinition(this);
    else return visitor->visitChildren(this);
}
//----------------- SizeOfContext ------------------------------------------------------------------

anceParser::SizeofTypeContext* anceParser::SizeOfContext::sizeofType()
{
    return getRuleContext<anceParser::SizeofTypeContext>(0);
}

anceParser::SizeofExpressionContext* anceParser::SizeOfContext::sizeofExpression()
{
    return getRuleContext<anceParser::SizeofExpressionContext>(0);
}

anceParser::SizeOfContext::SizeOfContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::SizeOfContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSizeOf(this);
    else return visitor->visitChildren(this);
}
//----------------- IndirectionContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::IndirectionContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::IndirectionContext::IndirectionContext(ExpressionContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::IndirectionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIndirection(this);
    else return visitor->visitChildren(this);
}

anceParser::ExpressionContext* anceParser::expression()
{
    return expression(0);
}

anceParser::ExpressionContext* anceParser::expression(int precedence)
{
    ParserRuleContext*             parentContext   = _ctx;
    size_t                         parentState     = getState();
    anceParser::ExpressionContext* _localctx       = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
    anceParser::ExpressionContext* previousContext = _localctx;
    (void) previousContext;// Silence compiler, in case the context is not used by generated code.
    size_t startState = 52;
    enterRecursionRule(_localctx, 52, anceParser::RuleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        unrollRecursionContexts(parentContext);
    });
    try
    {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(415);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx))
        {
            case 1:
            {
                _localctx       = _tracker.createInstance<VariableContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;

                setState(361);
                variableAccess();
                break;
            }

            case 2:
            {
                _localctx       = _tracker.createInstance<AllocContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(362);
                allocation();
                break;
            }

            case 3:
            {
                _localctx       = _tracker.createInstance<LiteralContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(363);
                literalExpression();
                break;
            }

            case 4:
            {
                _localctx       = _tracker.createInstance<AdressOfContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(364);
                addressof();
                break;
            }

            case 5:
            {
                _localctx       = _tracker.createInstance<RefContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(365);
                bindRef();
                break;
            }

            case 6:
            {
                _localctx       = _tracker.createInstance<SizeOfContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(366);
                sizeofType();
                break;
            }

            case 7:
            {
                _localctx       = _tracker.createInstance<SizeOfContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(367);
                sizeofExpression();
                break;
            }

            case 8:
            {
                _localctx       = _tracker.createInstance<IndependentContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(368);
                independentExpression();
                break;
            }

            case 9:
            {
                _localctx       = _tracker.createInstance<ParenthesisContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(369);
                match(anceParser::T__1);
                setState(370);
                expression(0);
                setState(371);
                match(anceParser::T__2);
                break;
            }

            case 10:
            {
                _localctx       = _tracker.createInstance<NotOperationContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(373);
                match(anceParser::NOT);
                setState(374);
                expression(11);
                break;
            }

            case 11:
            {
                _localctx       = _tracker.createInstance<IfExpressionContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(375);
                match(anceParser::T__20);
                setState(376);
                antlrcpp::downCast<IfExpressionContext*>(_localctx)->condition = expression(0);
                setState(377);
                match(anceParser::T__21);
                setState(378);
                antlrcpp::downCast<IfExpressionContext*>(_localctx)->thenBlock = expression(0);
                setState(379);
                match(anceParser::T__22);
                setState(380);
                antlrcpp::downCast<IfExpressionContext*>(_localctx)->elseBlock = expression(4);
                break;
            }

            case 12:
            {
                _localctx       = _tracker.createInstance<MatchContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(382);
                matchExpression();
                break;
            }

            case 13:
            {
                _localctx       = _tracker.createInstance<VectorDefinitionContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(383);
                match(anceParser::T__35);
                setState(387);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx))
                {
                    case 1:
                    {
                        setState(384);
                        type();
                        setState(385);
                        match(anceParser::T__27);
                        break;
                    }

                    default:
                        break;
                }
                setState(389);
                expression(0);
                setState(394);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == anceParser::T__6)
                {
                    setState(390);
                    match(anceParser::T__6);
                    setState(391);
                    expression(0);
                    setState(396);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
                setState(397);
                match(anceParser::T__36);
                break;
            }

            case 14:
            {
                _localctx       = _tracker.createInstance<ArrayDefinitionContext>(_localctx);
                _ctx            = _localctx;
                previousContext = _localctx;
                setState(399);
                match(anceParser::T__31);
                setState(403);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx))
                {
                    case 1:
                    {
                        setState(400);
                        type();
                        setState(401);
                        match(anceParser::T__27);
                        break;
                    }

                    default:
                        break;
                }
                setState(405);
                expression(0);
                setState(410);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == anceParser::T__6)
                {
                    setState(406);
                    match(anceParser::T__6);
                    setState(407);
                    expression(0);
                    setState(412);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
                setState(413);
                match(anceParser::T__32);
                break;
            }

            default:
                break;
        }
        _ctx->stop = _input->LT(-1);
        setState(456);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER)
        {
            if (alt == 1)
            {
                if (!_parseListeners.empty()) triggerExitRuleEvent();
                previousContext = _localctx;
                setState(454);
                _errHandler->sync(this);
                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx))
                {
                    case 1:
                    {
                        auto newContext = _tracker.createInstance<BinaryOperationContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(417);

                        if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
                        setState(418);
                        binaryOperatorMultiplicative();
                        setState(419);
                        antlrcpp::downCast<BinaryOperationContext*>(_localctx)->right = expression(11);
                        break;
                    }

                    case 2:
                    {
                        auto newContext = _tracker.createInstance<BinaryOperationContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(421);

                        if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
                        setState(422);
                        binaryOperatorAdditive();
                        setState(423);
                        antlrcpp::downCast<BinaryOperationContext*>(_localctx)->right = expression(10);
                        break;
                    }

                    case 3:
                    {
                        auto newContext = _tracker.createInstance<BinaryOperationContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(425);

                        if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
                        setState(426);
                        binaryOperatorRelational();
                        setState(427);
                        antlrcpp::downCast<BinaryOperationContext*>(_localctx)->right = expression(9);
                        break;
                    }

                    case 4:
                    {
                        auto newContext = _tracker.createInstance<BinaryOperationContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(429);

                        if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
                        setState(430);
                        binaryOperatorEquality();
                        setState(431);
                        antlrcpp::downCast<BinaryOperationContext*>(_localctx)->right = expression(8);
                        break;
                    }

                    case 5:
                    {
                        auto newContext = _tracker.createInstance<LogicalAndContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(433);

                        if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
                        setState(435);
                        _errHandler->sync(this);

                        _la = _input->LA(1);
                        if (_la == anceParser::NOT)
                        {
                            setState(434);
                            match(anceParser::NOT);
                        }
                        setState(437);
                        match(anceParser::T__33);
                        setState(438);
                        antlrcpp::downCast<LogicalAndContext*>(_localctx)->right = expression(7);
                        break;
                    }

                    case 6:
                    {
                        auto newContext = _tracker.createInstance<LogicalOrContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx        = newContext;
                        newContext->left = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(439);

                        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
                        setState(441);
                        _errHandler->sync(this);

                        _la = _input->LA(1);
                        if (_la == anceParser::NOT)
                        {
                            setState(440);
                            match(anceParser::NOT);
                        }
                        setState(443);
                        match(anceParser::T__34);
                        setState(444);
                        antlrcpp::downCast<LogicalOrContext*>(_localctx)->right = expression(6);
                        break;
                    }

                    case 7:
                    {
                        auto newContext = _tracker.createInstance<IndirectionContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx         = newContext;
                        newContext->value = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(445);

                        if (!(precpred(_ctx, 20))) throw FailedPredicateException(this, "precpred(_ctx, 20)");
                        setState(446);
                        match(anceParser::T__30);
                        break;
                    }

                    case 8:
                    {
                        auto newContext = _tracker.createInstance<SubscriptContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx           = newContext;
                        newContext->indexed = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(447);

                        if (!(precpred(_ctx, 19))) throw FailedPredicateException(this, "precpred(_ctx, 19)");
                        setState(448);
                        match(anceParser::T__31);
                        setState(449);
                        antlrcpp::downCast<SubscriptContext*>(_localctx)->index = expression(0);
                        setState(450);
                        match(anceParser::T__32);
                        break;
                    }

                    case 9:
                    {
                        auto newContext = _tracker.createInstance<MemberAccessContext>(
                            _tracker.createInstance<ExpressionContext>(parentContext, parentState));
                        _localctx            = newContext;
                        newContext->accessed = previousContext;
                        pushNewRecursionContext(newContext, startState, RuleExpression);
                        setState(452);

                        if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
                        setState(453);
                        match(anceParser::IDENTIFIER);
                        break;
                    }

                    default:
                        break;
                }
            }
            setState(458);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }
    return _localctx;
}

//----------------- BinaryOperatorMultiplicativeContext ------------------------------------------------------------------

anceParser::BinaryOperatorMultiplicativeContext::BinaryOperatorMultiplicativeContext(ParserRuleContext* parent,
                                                                                     size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BinaryOperatorMultiplicativeContext::getRuleIndex() const
{
    return anceParser::RuleBinaryOperatorMultiplicative;
}

void anceParser::BinaryOperatorMultiplicativeContext::copyFrom(BinaryOperatorMultiplicativeContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- MultiplicationContext ------------------------------------------------------------------

anceParser::MultiplicationContext::MultiplicationContext(BinaryOperatorMultiplicativeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::MultiplicationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMultiplication(this);
    else return visitor->visitChildren(this);
}
//----------------- DivisionContext ------------------------------------------------------------------

anceParser::DivisionContext::DivisionContext(BinaryOperatorMultiplicativeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::DivisionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDivision(this);
    else return visitor->visitChildren(this);
}
//----------------- RemainderContext ------------------------------------------------------------------

anceParser::RemainderContext::RemainderContext(BinaryOperatorMultiplicativeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::RemainderContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitRemainder(this);
    else return visitor->visitChildren(this);
}
anceParser::BinaryOperatorMultiplicativeContext* anceParser::binaryOperatorMultiplicative()
{
    BinaryOperatorMultiplicativeContext* _localctx =
        _tracker.createInstance<BinaryOperatorMultiplicativeContext>(_ctx, getState());
    enterRule(_localctx, 54, anceParser::RuleBinaryOperatorMultiplicative);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(462);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__37:
            {
                _localctx = _tracker.createInstance<anceParser::MultiplicationContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(459);
                match(anceParser::T__37);
                break;
            }

            case anceParser::T__38:
            {
                _localctx = _tracker.createInstance<anceParser::DivisionContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(460);
                match(anceParser::T__38);
                break;
            }

            case anceParser::T__39:
            {
                _localctx = _tracker.createInstance<anceParser::RemainderContext>(_localctx);
                enterOuterAlt(_localctx, 3);
                setState(461);
                match(anceParser::T__39);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryOperatorAdditiveContext ------------------------------------------------------------------

anceParser::BinaryOperatorAdditiveContext::BinaryOperatorAdditiveContext(ParserRuleContext* parent,
                                                                         size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BinaryOperatorAdditiveContext::getRuleIndex() const
{
    return anceParser::RuleBinaryOperatorAdditive;
}

void anceParser::BinaryOperatorAdditiveContext::copyFrom(BinaryOperatorAdditiveContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- AdditionContext ------------------------------------------------------------------

anceParser::AdditionContext::AdditionContext(BinaryOperatorAdditiveContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::AdditionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAddition(this);
    else return visitor->visitChildren(this);
}
//----------------- SubtractionContext ------------------------------------------------------------------

anceParser::SubtractionContext::SubtractionContext(BinaryOperatorAdditiveContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::SubtractionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSubtraction(this);
    else return visitor->visitChildren(this);
}
anceParser::BinaryOperatorAdditiveContext* anceParser::binaryOperatorAdditive()
{
    BinaryOperatorAdditiveContext* _localctx = _tracker.createInstance<BinaryOperatorAdditiveContext>(_ctx, getState());
    enterRule(_localctx, 56, anceParser::RuleBinaryOperatorAdditive);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(466);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__40:
            {
                _localctx = _tracker.createInstance<anceParser::AdditionContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(464);
                match(anceParser::T__40);
                break;
            }

            case anceParser::T__41:
            {
                _localctx = _tracker.createInstance<anceParser::SubtractionContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(465);
                match(anceParser::T__41);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryOperatorRelationalContext ------------------------------------------------------------------

anceParser::BinaryOperatorRelationalContext::BinaryOperatorRelationalContext(ParserRuleContext* parent,
                                                                             size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BinaryOperatorRelationalContext::getRuleIndex() const
{
    return anceParser::RuleBinaryOperatorRelational;
}

void anceParser::BinaryOperatorRelationalContext::copyFrom(BinaryOperatorRelationalContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- LessThanContext ------------------------------------------------------------------

anceParser::LessThanContext::LessThanContext(BinaryOperatorRelationalContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LessThanContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLessThan(this);
    else return visitor->visitChildren(this);
}
//----------------- LessThanOrEqualContext ------------------------------------------------------------------

anceParser::LessThanOrEqualContext::LessThanOrEqualContext(BinaryOperatorRelationalContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LessThanOrEqualContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLessThanOrEqual(this);
    else return visitor->visitChildren(this);
}
//----------------- GreaterThanContext ------------------------------------------------------------------

anceParser::GreaterThanContext::GreaterThanContext(BinaryOperatorRelationalContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::GreaterThanContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitGreaterThan(this);
    else return visitor->visitChildren(this);
}
//----------------- GreaterThanOrEqualContext ------------------------------------------------------------------

anceParser::GreaterThanOrEqualContext::GreaterThanOrEqualContext(BinaryOperatorRelationalContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::GreaterThanOrEqualContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitGreaterThanOrEqual(this);
    else return visitor->visitChildren(this);
}
anceParser::BinaryOperatorRelationalContext* anceParser::binaryOperatorRelational()
{
    BinaryOperatorRelationalContext* _localctx =
        _tracker.createInstance<BinaryOperatorRelationalContext>(_ctx, getState());
    enterRule(_localctx, 58, anceParser::RuleBinaryOperatorRelational);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(472);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__35:
            {
                _localctx = _tracker.createInstance<anceParser::LessThanContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(468);
                match(anceParser::T__35);
                break;
            }

            case anceParser::T__42:
            {
                _localctx = _tracker.createInstance<anceParser::LessThanOrEqualContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(469);
                match(anceParser::T__42);
                break;
            }

            case anceParser::T__36:
            {
                _localctx = _tracker.createInstance<anceParser::GreaterThanContext>(_localctx);
                enterOuterAlt(_localctx, 3);
                setState(470);
                match(anceParser::T__36);
                break;
            }

            case anceParser::T__43:
            {
                _localctx = _tracker.createInstance<anceParser::GreaterThanOrEqualContext>(_localctx);
                enterOuterAlt(_localctx, 4);
                setState(471);
                match(anceParser::T__43);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryOperatorEqualityContext ------------------------------------------------------------------

anceParser::BinaryOperatorEqualityContext::BinaryOperatorEqualityContext(ParserRuleContext* parent,
                                                                         size_t             invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BinaryOperatorEqualityContext::getRuleIndex() const
{
    return anceParser::RuleBinaryOperatorEquality;
}

void anceParser::BinaryOperatorEqualityContext::copyFrom(BinaryOperatorEqualityContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- NotEqualContext ------------------------------------------------------------------

anceParser::NotEqualContext::NotEqualContext(BinaryOperatorEqualityContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::NotEqualContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitNotEqual(this);
    else return visitor->visitChildren(this);
}
//----------------- EqualContext ------------------------------------------------------------------

anceParser::EqualContext::EqualContext(BinaryOperatorEqualityContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::EqualContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitEqual(this);
    else return visitor->visitChildren(this);
}
anceParser::BinaryOperatorEqualityContext* anceParser::binaryOperatorEquality()
{
    BinaryOperatorEqualityContext* _localctx = _tracker.createInstance<BinaryOperatorEqualityContext>(_ctx, getState());
    enterRule(_localctx, 60, anceParser::RuleBinaryOperatorEquality);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(476);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__44:
            {
                _localctx = _tracker.createInstance<anceParser::EqualContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(474);
                match(anceParser::T__44);
                break;
            }

            case anceParser::T__45:
            {
                _localctx = _tracker.createInstance<anceParser::NotEqualContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(475);
                match(anceParser::T__45);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IndependentExpressionContext ------------------------------------------------------------------

anceParser::IndependentExpressionContext::IndependentExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::FunctionCallContext* anceParser::IndependentExpressionContext::functionCall()
{
    return getRuleContext<anceParser::FunctionCallContext>(0);
}

size_t anceParser::IndependentExpressionContext::getRuleIndex() const
{
    return anceParser::RuleIndependentExpression;
}

std::any anceParser::IndependentExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitIndependentExpression(this);
    else return visitor->visitChildren(this);
}

anceParser::IndependentExpressionContext* anceParser::independentExpression()
{
    IndependentExpressionContext* _localctx = _tracker.createInstance<IndependentExpressionContext>(_ctx, getState());
    enterRule(_localctx, 62, anceParser::RuleIndependentExpression);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(478);
        functionCall();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FunctionCallContext ------------------------------------------------------------------

anceParser::FunctionCallContext::FunctionCallContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::FunctionCallContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

anceParser::ArgumentsContext* anceParser::FunctionCallContext::arguments()
{
    return getRuleContext<anceParser::ArgumentsContext>(0);
}

anceParser::TypeContext* anceParser::FunctionCallContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

size_t anceParser::FunctionCallContext::getRuleIndex() const
{
    return anceParser::RuleFunctionCall;
}

std::any anceParser::FunctionCallContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFunctionCall(this);
    else return visitor->visitChildren(this);
}

anceParser::FunctionCallContext* anceParser::functionCall()
{
    FunctionCallContext* _localctx = _tracker.createInstance<FunctionCallContext>(_ctx, getState());
    enterRule(_localctx, 64, anceParser::RuleFunctionCall);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(490);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx))
        {
            case 1:
            {
                enterOuterAlt(_localctx, 1);
                setState(480);
                match(anceParser::IDENTIFIER);
                setState(481);
                match(anceParser::T__1);
                setState(482);
                arguments();
                setState(483);
                match(anceParser::T__2);
                break;
            }

            case 2:
            {
                enterOuterAlt(_localctx, 2);
                setState(485);
                type();
                setState(486);
                match(anceParser::T__1);
                setState(487);
                arguments();
                setState(488);
                match(anceParser::T__2);
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

anceParser::ArgumentsContext::ArgumentsContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<anceParser::ExpressionContext*> anceParser::ArgumentsContext::expression()
{
    return getRuleContexts<anceParser::ExpressionContext>();
}

anceParser::ExpressionContext* anceParser::ArgumentsContext::expression(size_t i)
{
    return getRuleContext<anceParser::ExpressionContext>(i);
}

size_t anceParser::ArgumentsContext::getRuleIndex() const
{
    return anceParser::RuleArguments;
}

std::any anceParser::ArgumentsContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitArguments(this);
    else return visitor->visitChildren(this);
}

anceParser::ArgumentsContext* anceParser::arguments()
{
    ArgumentsContext* _localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
    enterRule(_localctx, 66, anceParser::RuleArguments);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(500);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~0x3fULL) == 0)
             && ((1ULL << _la)
                 & ((1ULL << anceParser::T__1) | (1ULL << anceParser::T__20) | (1ULL << anceParser::T__25)
                    | (1ULL << anceParser::T__31) | (1ULL << anceParser::T__35) | (1ULL << anceParser::T__37)
                    | (1ULL << anceParser::T__46) | (1ULL << anceParser::T__49) | (1ULL << anceParser::T__50)
                    | (1ULL << anceParser::T__52) | (1ULL << anceParser::T__53) | (1ULL << anceParser::T__54)
                    | (1ULL << anceParser::T__55) | (1ULL << anceParser::T__56) | (1ULL << anceParser::T__57)
                    | (1ULL << anceParser::T__58) | (1ULL << anceParser::T__59) | (1ULL << anceParser::T__60)
                    | (1ULL << anceParser::T__61) | (1ULL << anceParser::T__62)))
                    != 0)
            || ((((_la - 64) & ~0x3fULL) == 0)
                && ((1ULL << (_la - 64))
                    & ((1ULL << (anceParser::T__63 - 64)) | (1ULL << (anceParser::T__64 - 64))
                       | (1ULL << (anceParser::T__65 - 64)) | (1ULL << (anceParser::T__66 - 64))
                       | (1ULL << (anceParser::T__67 - 64)) | (1ULL << (anceParser::NATIVE_INTEGER_TYPE - 64))
                       | (1ULL << (anceParser::SIGNED_INTEGER - 64)) | (1ULL << (anceParser::HEX_INTEGER - 64))
                       | (1ULL << (anceParser::BIN_INTEGER - 64)) | (1ULL << (anceParser::OCT_INTEGER - 64))
                       | (1ULL << (anceParser::HALF - 64)) | (1ULL << (anceParser::SINGLE - 64))
                       | (1ULL << (anceParser::DOUBLE - 64)) | (1ULL << (anceParser::QUAD - 64))
                       | (1ULL << (anceParser::STRING - 64)) | (1ULL << (anceParser::BYTE - 64))
                       | (1ULL << (anceParser::INTEGER - 64)) | (1ULL << (anceParser::BUFFER - 64))
                       | (1ULL << (anceParser::NOT - 64)) | (1ULL << (anceParser::IDENTIFIER - 64))))
                       != 0))
        {
            setState(492);
            expression(0);
            setState(497);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == anceParser::T__6)
            {
                setState(493);
                match(anceParser::T__6);
                setState(494);
                expression(0);
                setState(499);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VariableAccessContext ------------------------------------------------------------------

anceParser::VariableAccessContext::VariableAccessContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::VariableAccessContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

size_t anceParser::VariableAccessContext::getRuleIndex() const
{
    return anceParser::RuleVariableAccess;
}

std::any anceParser::VariableAccessContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVariableAccess(this);
    else return visitor->visitChildren(this);
}

anceParser::VariableAccessContext* anceParser::variableAccess()
{
    VariableAccessContext* _localctx = _tracker.createInstance<VariableAccessContext>(_ctx, getState());
    enterRule(_localctx, 68, anceParser::RuleVariableAccess);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(502);
        match(anceParser::IDENTIFIER);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AllocationContext ------------------------------------------------------------------

anceParser::AllocationContext::AllocationContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::AllocatorContext* anceParser::AllocationContext::allocator()
{
    return getRuleContext<anceParser::AllocatorContext>(0);
}

anceParser::TypeContext* anceParser::AllocationContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::ExpressionContext* anceParser::AllocationContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::AllocationContext::getRuleIndex() const
{
    return anceParser::RuleAllocation;
}

std::any anceParser::AllocationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAllocation(this);
    else return visitor->visitChildren(this);
}

anceParser::AllocationContext* anceParser::allocation()
{
    AllocationContext* _localctx = _tracker.createInstance<AllocationContext>(_ctx, getState());
    enterRule(_localctx, 70, anceParser::RuleAllocation);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(504);
        match(anceParser::T__46);
        setState(509);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::T__31)
        {
            setState(505);
            match(anceParser::T__31);
            setState(506);
            expression(0);
            setState(507);
            match(anceParser::T__32);
        }
        setState(511);
        allocator();
        setState(512);
        type();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AllocatorContext ------------------------------------------------------------------

anceParser::AllocatorContext::AllocatorContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::AllocatorContext::getRuleIndex() const
{
    return anceParser::RuleAllocator;
}

void anceParser::AllocatorContext::copyFrom(AllocatorContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- DynamicContext ------------------------------------------------------------------

anceParser::DynamicContext::DynamicContext(AllocatorContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::DynamicContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDynamic(this);
    else return visitor->visitChildren(this);
}
//----------------- AutomaticContext ------------------------------------------------------------------

anceParser::AutomaticContext::AutomaticContext(AllocatorContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::AutomaticContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAutomatic(this);
    else return visitor->visitChildren(this);
}
anceParser::AllocatorContext* anceParser::allocator()
{
    AllocatorContext* _localctx = _tracker.createInstance<AllocatorContext>(_ctx, getState());
    enterRule(_localctx, 72, anceParser::RuleAllocator);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(516);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__47:
            {
                _localctx = _tracker.createInstance<anceParser::DynamicContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(514);
                match(anceParser::T__47);
                break;
            }

            case anceParser::T__48:
            {
                _localctx = _tracker.createInstance<anceParser::AutomaticContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(515);
                match(anceParser::T__48);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AddressofContext ------------------------------------------------------------------

anceParser::AddressofContext::AddressofContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::AddressofContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::AddressofContext::getRuleIndex() const
{
    return anceParser::RuleAddressof;
}

std::any anceParser::AddressofContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitAddressof(this);
    else return visitor->visitChildren(this);
}

anceParser::AddressofContext* anceParser::addressof()
{
    AddressofContext* _localctx = _tracker.createInstance<AddressofContext>(_ctx, getState());
    enterRule(_localctx, 74, anceParser::RuleAddressof);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(518);
        match(anceParser::T__49);
        setState(519);
        expression(0);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BindRefContext ------------------------------------------------------------------

anceParser::BindRefContext::BindRefContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BindRefContext::getRuleIndex() const
{
    return anceParser::RuleBindRef;
}

void anceParser::BindRefContext::copyFrom(BindRefContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- BindReferenceToAddressContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::BindReferenceToAddressContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::BindReferenceToAddressContext::BindReferenceToAddressContext(BindRefContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::BindReferenceToAddressContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitBindReferenceToAddress(this);
    else return visitor->visitChildren(this);
}
//----------------- BindReferenceContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::BindReferenceContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::BindReferenceContext::BindReferenceContext(BindRefContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::BindReferenceContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitBindReference(this);
    else return visitor->visitChildren(this);
}
anceParser::BindRefContext* anceParser::bindRef()
{
    BindRefContext* _localctx = _tracker.createInstance<BindRefContext>(_ctx, getState());
    enterRule(_localctx, 76, anceParser::RuleBindRef);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(526);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx))
        {
            case 1:
            {
                _localctx = _tracker.createInstance<anceParser::BindReferenceContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(521);
                match(anceParser::T__50);
                setState(522);
                expression(0);
                break;
            }

            case 2:
            {
                _localctx = _tracker.createInstance<anceParser::BindReferenceToAddressContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(523);
                match(anceParser::T__50);
                setState(524);
                match(anceParser::T__51);
                setState(525);
                expression(0);
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SizeofTypeContext ------------------------------------------------------------------

anceParser::SizeofTypeContext::SizeofTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::TypeContext* anceParser::SizeofTypeContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

size_t anceParser::SizeofTypeContext::getRuleIndex() const
{
    return anceParser::RuleSizeofType;
}

std::any anceParser::SizeofTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSizeofType(this);
    else return visitor->visitChildren(this);
}

anceParser::SizeofTypeContext* anceParser::sizeofType()
{
    SizeofTypeContext* _localctx = _tracker.createInstance<SizeofTypeContext>(_ctx, getState());
    enterRule(_localctx, 78, anceParser::RuleSizeofType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(528);
        match(anceParser::T__52);
        setState(529);
        type();
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SizeofExpressionContext ------------------------------------------------------------------

anceParser::SizeofExpressionContext::SizeofExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::SizeofExpressionContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

size_t anceParser::SizeofExpressionContext::getRuleIndex() const
{
    return anceParser::RuleSizeofExpression;
}

std::any anceParser::SizeofExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSizeofExpression(this);
    else return visitor->visitChildren(this);
}

anceParser::SizeofExpressionContext* anceParser::sizeofExpression()
{
    SizeofExpressionContext* _localctx = _tracker.createInstance<SizeofExpressionContext>(_ctx, getState());
    enterRule(_localctx, 80, anceParser::RuleSizeofExpression);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(531);
        match(anceParser::T__52);
        setState(532);
        match(anceParser::T__1);
        setState(533);
        expression(0);
        setState(534);
        match(anceParser::T__2);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MatchExpressionContext ------------------------------------------------------------------

anceParser::MatchExpressionContext::MatchExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::ExpressionContext* anceParser::MatchExpressionContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

std::vector<anceParser::MatchExpressionCaseContext*> anceParser::MatchExpressionContext::matchExpressionCase()
{
    return getRuleContexts<anceParser::MatchExpressionCaseContext>();
}

anceParser::MatchExpressionCaseContext* anceParser::MatchExpressionContext::matchExpressionCase(size_t i)
{
    return getRuleContext<anceParser::MatchExpressionCaseContext>(i);
}

size_t anceParser::MatchExpressionContext::getRuleIndex() const
{
    return anceParser::RuleMatchExpression;
}

std::any anceParser::MatchExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitMatchExpression(this);
    else return visitor->visitChildren(this);
}

anceParser::MatchExpressionContext* anceParser::matchExpression()
{
    MatchExpressionContext* _localctx = _tracker.createInstance<MatchExpressionContext>(_ctx, getState());
    enterRule(_localctx, 82, anceParser::RuleMatchExpression);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(536);
        match(anceParser::T__25);
        setState(537);
        antlrcpp::downCast<MatchExpressionContext*>(_localctx)->condition = expression(0);
        setState(538);
        match(anceParser::T__26);
        setState(539);
        match(anceParser::T__3);
        setState(548);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 30) & ~0x3fULL) == 0)
             && ((1ULL << (_la - 30))
                 & ((1ULL << (anceParser::T__29 - 30)) | (1ULL << (anceParser::T__53 - 30))
                    | (1ULL << (anceParser::T__54 - 30)) | (1ULL << (anceParser::T__55 - 30))
                    | (1ULL << (anceParser::SIGNED_INTEGER - 30)) | (1ULL << (anceParser::HEX_INTEGER - 30))
                    | (1ULL << (anceParser::BIN_INTEGER - 30)) | (1ULL << (anceParser::OCT_INTEGER - 30))
                    | (1ULL << (anceParser::HALF - 30)) | (1ULL << (anceParser::SINGLE - 30))
                    | (1ULL << (anceParser::DOUBLE - 30)) | (1ULL << (anceParser::QUAD - 30))
                    | (1ULL << (anceParser::STRING - 30)) | (1ULL << (anceParser::BYTE - 30))
                    | (1ULL << (anceParser::INTEGER - 30)) | (1ULL << (anceParser::IDENTIFIER - 30))))
                    != 0))
        {
            setState(540);
            matchExpressionCase();
            setState(545);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == anceParser::T__6)
            {
                setState(541);
                match(anceParser::T__6);
                setState(542);
                matchExpressionCase();
                setState(547);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
        }
        setState(550);
        match(anceParser::T__4);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MatchExpressionCaseContext ------------------------------------------------------------------

anceParser::MatchExpressionCaseContext::MatchExpressionCaseContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::MatchExpressionCaseContext::getRuleIndex() const
{
    return anceParser::RuleMatchExpressionCase;
}

void anceParser::MatchExpressionCaseContext::copyFrom(MatchExpressionCaseContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- LiteralExpressionCaseContext ------------------------------------------------------------------

std::vector<anceParser::LiteralExpressionContext*> anceParser::LiteralExpressionCaseContext::literalExpression()
{
    return getRuleContexts<anceParser::LiteralExpressionContext>();
}

anceParser::LiteralExpressionContext* anceParser::LiteralExpressionCaseContext::literalExpression(size_t i)
{
    return getRuleContext<anceParser::LiteralExpressionContext>(i);
}

anceParser::ExpressionContext* anceParser::LiteralExpressionCaseContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::LiteralExpressionCaseContext::LiteralExpressionCaseContext(MatchExpressionCaseContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::LiteralExpressionCaseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitLiteralExpressionCase(this);
    else return visitor->visitChildren(this);
}
//----------------- DefaultExpressionCaseContext ------------------------------------------------------------------

anceParser::ExpressionContext* anceParser::DefaultExpressionCaseContext::expression()
{
    return getRuleContext<anceParser::ExpressionContext>(0);
}

anceParser::DefaultExpressionCaseContext::DefaultExpressionCaseContext(MatchExpressionCaseContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::DefaultExpressionCaseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor))
        return parserVisitor->visitDefaultExpressionCase(this);
    else return visitor->visitChildren(this);
}
anceParser::MatchExpressionCaseContext* anceParser::matchExpressionCase()
{
    MatchExpressionCaseContext* _localctx = _tracker.createInstance<MatchExpressionCaseContext>(_ctx, getState());
    enterRule(_localctx, 84, anceParser::RuleMatchExpressionCase);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(566);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__53:
            case anceParser::T__54:
            case anceParser::T__55:
            case anceParser::SIGNED_INTEGER:
            case anceParser::HEX_INTEGER:
            case anceParser::BIN_INTEGER:
            case anceParser::OCT_INTEGER:
            case anceParser::HALF:
            case anceParser::SINGLE:
            case anceParser::DOUBLE:
            case anceParser::QUAD:
            case anceParser::STRING:
            case anceParser::BYTE:
            case anceParser::INTEGER:
            case anceParser::IDENTIFIER:
            {
                _localctx = _tracker.createInstance<anceParser::LiteralExpressionCaseContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(552);
                literalExpression();
                setState(557);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == anceParser::T__27)
                {
                    setState(553);
                    match(anceParser::T__27);
                    setState(554);
                    literalExpression();
                    setState(559);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
                setState(560);
                match(anceParser::T__28);
                setState(561);
                expression(0);
                break;
            }

            case anceParser::T__29:
            {
                _localctx = _tracker.createInstance<anceParser::DefaultExpressionCaseContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(563);
                match(anceParser::T__29);
                setState(564);
                match(anceParser::T__28);
                setState(565);
                expression(0);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LiteralExpressionContext ------------------------------------------------------------------

anceParser::LiteralExpressionContext::LiteralExpressionContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::StringLiteralContext* anceParser::LiteralExpressionContext::stringLiteral()
{
    return getRuleContext<anceParser::StringLiteralContext>(0);
}

anceParser::ByteLiteralContext* anceParser::LiteralExpressionContext::byteLiteral()
{
    return getRuleContext<anceParser::ByteLiteralContext>(0);
}

anceParser::IntegerLiteralContext* anceParser::LiteralExpressionContext::integerLiteral()
{
    return getRuleContext<anceParser::IntegerLiteralContext>(0);
}

anceParser::FloatingPointLiteralContext* anceParser::LiteralExpressionContext::floatingPointLiteral()
{
    return getRuleContext<anceParser::FloatingPointLiteralContext>(0);
}

anceParser::BooleanLiteralContext* anceParser::LiteralExpressionContext::booleanLiteral()
{
    return getRuleContext<anceParser::BooleanLiteralContext>(0);
}

anceParser::NullLiteralContext* anceParser::LiteralExpressionContext::nullLiteral()
{
    return getRuleContext<anceParser::NullLiteralContext>(0);
}

anceParser::SizeLiteralContext* anceParser::LiteralExpressionContext::sizeLiteral()
{
    return getRuleContext<anceParser::SizeLiteralContext>(0);
}

anceParser::DiffLiteralContext* anceParser::LiteralExpressionContext::diffLiteral()
{
    return getRuleContext<anceParser::DiffLiteralContext>(0);
}

anceParser::UiptrLiteralContext* anceParser::LiteralExpressionContext::uiptrLiteral()
{
    return getRuleContext<anceParser::UiptrLiteralContext>(0);
}

size_t anceParser::LiteralExpressionContext::getRuleIndex() const
{
    return anceParser::RuleLiteralExpression;
}

std::any anceParser::LiteralExpressionContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitLiteralExpression(this);
    else return visitor->visitChildren(this);
}

anceParser::LiteralExpressionContext* anceParser::literalExpression()
{
    LiteralExpressionContext* _localctx = _tracker.createInstance<LiteralExpressionContext>(_ctx, getState());
    enterRule(_localctx, 86, anceParser::RuleLiteralExpression);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(577);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx))
        {
            case 1:
            {
                enterOuterAlt(_localctx, 1);
                setState(568);
                stringLiteral();
                break;
            }

            case 2:
            {
                enterOuterAlt(_localctx, 2);
                setState(569);
                byteLiteral();
                break;
            }

            case 3:
            {
                enterOuterAlt(_localctx, 3);
                setState(570);
                integerLiteral();
                break;
            }

            case 4:
            {
                enterOuterAlt(_localctx, 4);
                setState(571);
                floatingPointLiteral();
                break;
            }

            case 5:
            {
                enterOuterAlt(_localctx, 5);
                setState(572);
                booleanLiteral();
                break;
            }

            case 6:
            {
                enterOuterAlt(_localctx, 6);
                setState(573);
                nullLiteral();
                break;
            }

            case 7:
            {
                enterOuterAlt(_localctx, 7);
                setState(574);
                sizeLiteral();
                break;
            }

            case 8:
            {
                enterOuterAlt(_localctx, 8);
                setState(575);
                diffLiteral();
                break;
            }

            case 9:
            {
                enterOuterAlt(_localctx, 9);
                setState(576);
                uiptrLiteral();
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

anceParser::StringLiteralContext::StringLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::StringLiteralContext::STRING()
{
    return getToken(anceParser::STRING, 0);
}

tree::TerminalNode* anceParser::StringLiteralContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

size_t anceParser::StringLiteralContext::getRuleIndex() const
{
    return anceParser::RuleStringLiteral;
}

std::any anceParser::StringLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitStringLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::StringLiteralContext* anceParser::stringLiteral()
{
    StringLiteralContext* _localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
    enterRule(_localctx, 88, anceParser::RuleStringLiteral);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(580);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == anceParser::IDENTIFIER)
        {
            setState(579);
            antlrcpp::downCast<StringLiteralContext*>(_localctx)->prefix = match(anceParser::IDENTIFIER);
        }
        setState(582);
        match(anceParser::STRING);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ByteLiteralContext ------------------------------------------------------------------

anceParser::ByteLiteralContext::ByteLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::ByteLiteralContext::BYTE()
{
    return getToken(anceParser::BYTE, 0);
}

size_t anceParser::ByteLiteralContext::getRuleIndex() const
{
    return anceParser::RuleByteLiteral;
}

std::any anceParser::ByteLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitByteLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::ByteLiteralContext* anceParser::byteLiteral()
{
    ByteLiteralContext* _localctx = _tracker.createInstance<ByteLiteralContext>(_ctx, getState());
    enterRule(_localctx, 90, anceParser::RuleByteLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(584);
        match(anceParser::BYTE);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

anceParser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::NormalIntegerContext* anceParser::IntegerLiteralContext::normalInteger()
{
    return getRuleContext<anceParser::NormalIntegerContext>(0);
}

anceParser::SpecialIntegerContext* anceParser::IntegerLiteralContext::specialInteger()
{
    return getRuleContext<anceParser::SpecialIntegerContext>(0);
}

size_t anceParser::IntegerLiteralContext::getRuleIndex() const
{
    return anceParser::RuleIntegerLiteral;
}

std::any anceParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIntegerLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::IntegerLiteralContext* anceParser::integerLiteral()
{
    IntegerLiteralContext* _localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
    enterRule(_localctx, 92, anceParser::RuleIntegerLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(588);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::SIGNED_INTEGER:
            case anceParser::INTEGER:
            {
                enterOuterAlt(_localctx, 1);
                setState(586);
                normalInteger();
                break;
            }

            case anceParser::HEX_INTEGER:
            case anceParser::BIN_INTEGER:
            case anceParser::OCT_INTEGER:
            {
                enterOuterAlt(_localctx, 2);
                setState(587);
                specialInteger();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- NormalIntegerContext ------------------------------------------------------------------

anceParser::NormalIntegerContext::NormalIntegerContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<tree::TerminalNode*> anceParser::NormalIntegerContext::INTEGER()
{
    return getTokens(anceParser::INTEGER);
}

tree::TerminalNode* anceParser::NormalIntegerContext::INTEGER(size_t i)
{
    return getToken(anceParser::INTEGER, i);
}

tree::TerminalNode* anceParser::NormalIntegerContext::SIGNED_INTEGER()
{
    return getToken(anceParser::SIGNED_INTEGER, 0);
}

size_t anceParser::NormalIntegerContext::getRuleIndex() const
{
    return anceParser::RuleNormalInteger;
}

std::any anceParser::NormalIntegerContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitNormalInteger(this);
    else return visitor->visitChildren(this);
}

anceParser::NormalIntegerContext* anceParser::normalInteger()
{
    NormalIntegerContext* _localctx = _tracker.createInstance<NormalIntegerContext>(_ctx, getState());
    enterRule(_localctx, 94, anceParser::RuleNormalInteger);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(592);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::INTEGER:
            {
                setState(590);
                antlrcpp::downCast<NormalIntegerContext*>(_localctx)->uvalue = match(anceParser::INTEGER);
                break;
            }

            case anceParser::SIGNED_INTEGER:
            {
                setState(591);
                antlrcpp::downCast<NormalIntegerContext*>(_localctx)->svalue = match(anceParser::SIGNED_INTEGER);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
        setState(596);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx))
        {
            case 1:
            {
                setState(594);
                match(anceParser::T__0);
                setState(595);
                antlrcpp::downCast<NormalIntegerContext*>(_localctx)->width = match(anceParser::INTEGER);
                break;
            }

            default:
                break;
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SpecialIntegerContext ------------------------------------------------------------------

anceParser::SpecialIntegerContext::SpecialIntegerContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::SpecialIntegerContext::HEX_INTEGER()
{
    return getToken(anceParser::HEX_INTEGER, 0);
}

tree::TerminalNode* anceParser::SpecialIntegerContext::INTEGER()
{
    return getToken(anceParser::INTEGER, 0);
}

tree::TerminalNode* anceParser::SpecialIntegerContext::BIN_INTEGER()
{
    return getToken(anceParser::BIN_INTEGER, 0);
}

tree::TerminalNode* anceParser::SpecialIntegerContext::OCT_INTEGER()
{
    return getToken(anceParser::OCT_INTEGER, 0);
}

size_t anceParser::SpecialIntegerContext::getRuleIndex() const
{
    return anceParser::RuleSpecialInteger;
}

std::any anceParser::SpecialIntegerContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSpecialInteger(this);
    else return visitor->visitChildren(this);
}

anceParser::SpecialIntegerContext* anceParser::specialInteger()
{
    SpecialIntegerContext* _localctx = _tracker.createInstance<SpecialIntegerContext>(_ctx, getState());
    enterRule(_localctx, 96, anceParser::RuleSpecialInteger);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(607);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::HEX_INTEGER:
            {
                enterOuterAlt(_localctx, 1);
                setState(598);
                match(anceParser::HEX_INTEGER);
                setState(599);
                match(anceParser::T__0);
                setState(600);
                antlrcpp::downCast<SpecialIntegerContext*>(_localctx)->width = match(anceParser::INTEGER);
                break;
            }

            case anceParser::BIN_INTEGER:
            {
                enterOuterAlt(_localctx, 2);
                setState(601);
                match(anceParser::BIN_INTEGER);
                setState(602);
                match(anceParser::T__0);
                setState(603);
                antlrcpp::downCast<SpecialIntegerContext*>(_localctx)->width = match(anceParser::INTEGER);
                break;
            }

            case anceParser::OCT_INTEGER:
            {
                enterOuterAlt(_localctx, 3);
                setState(604);
                match(anceParser::OCT_INTEGER);
                setState(605);
                match(anceParser::T__0);
                setState(606);
                antlrcpp::downCast<SpecialIntegerContext*>(_localctx)->width = match(anceParser::INTEGER);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FloatingPointLiteralContext ------------------------------------------------------------------

anceParser::FloatingPointLiteralContext::FloatingPointLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::FloatingPointLiteralContext::HALF()
{
    return getToken(anceParser::HALF, 0);
}

tree::TerminalNode* anceParser::FloatingPointLiteralContext::SINGLE()
{
    return getToken(anceParser::SINGLE, 0);
}

tree::TerminalNode* anceParser::FloatingPointLiteralContext::DOUBLE()
{
    return getToken(anceParser::DOUBLE, 0);
}

tree::TerminalNode* anceParser::FloatingPointLiteralContext::QUAD()
{
    return getToken(anceParser::QUAD, 0);
}

size_t anceParser::FloatingPointLiteralContext::getRuleIndex() const
{
    return anceParser::RuleFloatingPointLiteral;
}

std::any anceParser::FloatingPointLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFloatingPointLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::FloatingPointLiteralContext* anceParser::floatingPointLiteral()
{
    FloatingPointLiteralContext* _localctx = _tracker.createInstance<FloatingPointLiteralContext>(_ctx, getState());
    enterRule(_localctx, 98, anceParser::RuleFloatingPointLiteral);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(609);
        _la = _input->LA(1);
        if (!(((((_la - 74) & ~0x3fULL) == 0)
               && ((1ULL << (_la - 74))
                   & ((1ULL << (anceParser::HALF - 74)) | (1ULL << (anceParser::SINGLE - 74))
                      | (1ULL << (anceParser::DOUBLE - 74)) | (1ULL << (anceParser::QUAD - 74))))
                      != 0)))
        {
            _errHandler->recoverInline(this);
        }
        else
        {
            _errHandler->reportMatch(this);
            consume();
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

anceParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BooleanLiteralContext::getRuleIndex() const
{
    return anceParser::RuleBooleanLiteral;
}

void anceParser::BooleanLiteralContext::copyFrom(BooleanLiteralContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- TrueContext ------------------------------------------------------------------

anceParser::TrueContext::TrueContext(BooleanLiteralContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::TrueContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitTrue(this);
    else return visitor->visitChildren(this);
}
//----------------- FalseContext ------------------------------------------------------------------

anceParser::FalseContext::FalseContext(BooleanLiteralContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::FalseContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFalse(this);
    else return visitor->visitChildren(this);
}
anceParser::BooleanLiteralContext* anceParser::booleanLiteral()
{
    BooleanLiteralContext* _localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
    enterRule(_localctx, 100, anceParser::RuleBooleanLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(613);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__53:
            {
                _localctx = _tracker.createInstance<anceParser::TrueContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(611);
                match(anceParser::T__53);
                break;
            }

            case anceParser::T__54:
            {
                _localctx = _tracker.createInstance<anceParser::FalseContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(612);
                match(anceParser::T__54);
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- NullLiteralContext ------------------------------------------------------------------

anceParser::NullLiteralContext::NullLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::NullLiteralContext::getRuleIndex() const
{
    return anceParser::RuleNullLiteral;
}

void anceParser::NullLiteralContext::copyFrom(NullLiteralContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- NullContext ------------------------------------------------------------------

anceParser::NullContext::NullContext(NullLiteralContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::NullContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitNull(this);
    else return visitor->visitChildren(this);
}
anceParser::NullLiteralContext* anceParser::nullLiteral()
{
    NullLiteralContext* _localctx = _tracker.createInstance<NullLiteralContext>(_ctx, getState());
    enterRule(_localctx, 102, anceParser::RuleNullLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        _localctx = _tracker.createInstance<anceParser::NullContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(615);
        match(anceParser::T__55);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SizeLiteralContext ------------------------------------------------------------------

anceParser::SizeLiteralContext::SizeLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::SizeLiteralContext::INTEGER()
{
    return getToken(anceParser::INTEGER, 0);
}

size_t anceParser::SizeLiteralContext::getRuleIndex() const
{
    return anceParser::RuleSizeLiteral;
}

std::any anceParser::SizeLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitSizeLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::SizeLiteralContext* anceParser::sizeLiteral()
{
    SizeLiteralContext* _localctx = _tracker.createInstance<SizeLiteralContext>(_ctx, getState());
    enterRule(_localctx, 104, anceParser::RuleSizeLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(617);
        match(anceParser::INTEGER);
        setState(618);
        match(anceParser::T__0);
        setState(619);
        match(anceParser::T__56);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DiffLiteralContext ------------------------------------------------------------------

anceParser::DiffLiteralContext::DiffLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::DiffLiteralContext::SIGNED_INTEGER()
{
    return getToken(anceParser::SIGNED_INTEGER, 0);
}

size_t anceParser::DiffLiteralContext::getRuleIndex() const
{
    return anceParser::RuleDiffLiteral;
}

std::any anceParser::DiffLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitDiffLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::DiffLiteralContext* anceParser::diffLiteral()
{
    DiffLiteralContext* _localctx = _tracker.createInstance<DiffLiteralContext>(_ctx, getState());
    enterRule(_localctx, 106, anceParser::RuleDiffLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(621);
        match(anceParser::SIGNED_INTEGER);
        setState(622);
        match(anceParser::T__0);
        setState(623);
        match(anceParser::T__57);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- UiptrLiteralContext ------------------------------------------------------------------

anceParser::UiptrLiteralContext::UiptrLiteralContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::UiptrLiteralContext::HEX_INTEGER()
{
    return getToken(anceParser::HEX_INTEGER, 0);
}

size_t anceParser::UiptrLiteralContext::getRuleIndex() const
{
    return anceParser::RuleUiptrLiteral;
}

std::any anceParser::UiptrLiteralContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitUiptrLiteral(this);
    else return visitor->visitChildren(this);
}

anceParser::UiptrLiteralContext* anceParser::uiptrLiteral()
{
    UiptrLiteralContext* _localctx = _tracker.createInstance<UiptrLiteralContext>(_ctx, getState());
    enterRule(_localctx, 108, anceParser::RuleUiptrLiteral);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(625);
        match(anceParser::HEX_INTEGER);
        setState(626);
        match(anceParser::T__0);
        setState(627);
        match(anceParser::T__58);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

anceParser::TypeContext::TypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::TypeContext::getRuleIndex() const
{
    return anceParser::RuleType;
}

void anceParser::TypeContext::copyFrom(TypeContext* ctx)
{
    ParserRuleContext::copyFrom(ctx);
}

//----------------- IntegerContext ------------------------------------------------------------------

anceParser::IntegerTypeContext* anceParser::IntegerContext::integerType()
{
    return getRuleContext<anceParser::IntegerTypeContext>(0);
}

anceParser::IntegerContext::IntegerContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::IntegerContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitInteger(this);
    else return visitor->visitChildren(this);
}
//----------------- ArrayContext ------------------------------------------------------------------

anceParser::ArrayTypeContext* anceParser::ArrayContext::arrayType()
{
    return getRuleContext<anceParser::ArrayTypeContext>(0);
}

anceParser::ArrayContext::ArrayContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::ArrayContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitArray(this);
    else return visitor->visitChildren(this);
}
//----------------- BufferContext ------------------------------------------------------------------

tree::TerminalNode* anceParser::BufferContext::BUFFER()
{
    return getToken(anceParser::BUFFER, 0);
}

anceParser::TypeContext* anceParser::BufferContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::BufferContext::BufferContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::BufferContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitBuffer(this);
    else return visitor->visitChildren(this);
}
//----------------- KeywordContext ------------------------------------------------------------------

anceParser::KeywordTypeContext* anceParser::KeywordContext::keywordType()
{
    return getRuleContext<anceParser::KeywordTypeContext>(0);
}

anceParser::KeywordContext::KeywordContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::KeywordContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitKeyword(this);
    else return visitor->visitChildren(this);
}
//----------------- ReferenceContext ------------------------------------------------------------------

anceParser::TypeContext* anceParser::ReferenceContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::ReferenceContext::ReferenceContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::ReferenceContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitReference(this);
    else return visitor->visitChildren(this);
}
//----------------- PointerContext ------------------------------------------------------------------

anceParser::TypeContext* anceParser::PointerContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

anceParser::PointerContext::PointerContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::PointerContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitPointer(this);
    else return visitor->visitChildren(this);
}
//----------------- CustomContext ------------------------------------------------------------------

anceParser::CustomTypeContext* anceParser::CustomContext::customType()
{
    return getRuleContext<anceParser::CustomTypeContext>(0);
}

anceParser::CustomContext::CustomContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::CustomContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitCustom(this);
    else return visitor->visitChildren(this);
}
//----------------- VectorContext ------------------------------------------------------------------

anceParser::VectorTypeContext* anceParser::VectorContext::vectorType()
{
    return getRuleContext<anceParser::VectorTypeContext>(0);
}

anceParser::VectorContext::VectorContext(TypeContext* ctx)
{
    copyFrom(ctx);
}

std::any anceParser::VectorContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVector(this);
    else return visitor->visitChildren(this);
}
anceParser::TypeContext* anceParser::type()
{
    TypeContext* _localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
    enterRule(_localctx, 110, anceParser::RuleType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(640);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::NATIVE_INTEGER_TYPE:
            {
                _localctx = _tracker.createInstance<anceParser::IntegerContext>(_localctx);
                enterOuterAlt(_localctx, 1);
                setState(629);
                integerType();
                break;
            }

            case anceParser::T__31:
            {
                _localctx = _tracker.createInstance<anceParser::ArrayContext>(_localctx);
                enterOuterAlt(_localctx, 2);
                setState(630);
                arrayType();
                break;
            }

            case anceParser::T__35:
            {
                _localctx = _tracker.createInstance<anceParser::VectorContext>(_localctx);
                enterOuterAlt(_localctx, 3);
                setState(631);
                vectorType();
                break;
            }

            case anceParser::T__56:
            case anceParser::T__57:
            case anceParser::T__58:
            case anceParser::T__60:
            case anceParser::T__61:
            case anceParser::T__62:
            case anceParser::T__63:
            case anceParser::T__64:
            case anceParser::T__65:
            case anceParser::T__66:
            case anceParser::T__67:
            {
                _localctx = _tracker.createInstance<anceParser::KeywordContext>(_localctx);
                enterOuterAlt(_localctx, 4);
                setState(632);
                keywordType();
                break;
            }

            case anceParser::T__37:
            {
                _localctx = _tracker.createInstance<anceParser::PointerContext>(_localctx);
                enterOuterAlt(_localctx, 5);
                setState(633);
                match(anceParser::T__37);
                setState(634);
                type();
                break;
            }

            case anceParser::BUFFER:
            {
                _localctx = _tracker.createInstance<anceParser::BufferContext>(_localctx);
                enterOuterAlt(_localctx, 6);
                setState(635);
                match(anceParser::BUFFER);
                setState(636);
                type();
                break;
            }

            case anceParser::T__59:
            {
                _localctx = _tracker.createInstance<anceParser::ReferenceContext>(_localctx);
                enterOuterAlt(_localctx, 7);
                setState(637);
                match(anceParser::T__59);
                setState(638);
                type();
                break;
            }

            case anceParser::IDENTIFIER:
            {
                _localctx = _tracker.createInstance<anceParser::CustomContext>(_localctx);
                enterOuterAlt(_localctx, 8);
                setState(639);
                customType();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IntegerTypeContext ------------------------------------------------------------------

anceParser::IntegerTypeContext::IntegerTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::IntegerTypeContext::NATIVE_INTEGER_TYPE()
{
    return getToken(anceParser::NATIVE_INTEGER_TYPE, 0);
}

size_t anceParser::IntegerTypeContext::getRuleIndex() const
{
    return anceParser::RuleIntegerType;
}

std::any anceParser::IntegerTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitIntegerType(this);
    else return visitor->visitChildren(this);
}

anceParser::IntegerTypeContext* anceParser::integerType()
{
    IntegerTypeContext* _localctx = _tracker.createInstance<IntegerTypeContext>(_ctx, getState());
    enterRule(_localctx, 112, anceParser::RuleIntegerType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(642);
        match(anceParser::NATIVE_INTEGER_TYPE);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

anceParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::TypeContext* anceParser::ArrayTypeContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::ArrayTypeContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

tree::TerminalNode* anceParser::ArrayTypeContext::INTEGER()
{
    return getToken(anceParser::INTEGER, 0);
}

size_t anceParser::ArrayTypeContext::getRuleIndex() const
{
    return anceParser::RuleArrayType;
}

std::any anceParser::ArrayTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitArrayType(this);
    else return visitor->visitChildren(this);
}

anceParser::ArrayTypeContext* anceParser::arrayType()
{
    ArrayTypeContext* _localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
    enterRule(_localctx, 114, anceParser::RuleArrayType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(644);
        match(anceParser::T__31);
        setState(645);
        type();
        setState(646);
        match(anceParser::SEMICOLON);
        setState(647);
        match(anceParser::INTEGER);
        setState(648);
        match(anceParser::T__32);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VectorTypeContext ------------------------------------------------------------------

anceParser::VectorTypeContext::VectorTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::TypeContext* anceParser::VectorTypeContext::type()
{
    return getRuleContext<anceParser::TypeContext>(0);
}

tree::TerminalNode* anceParser::VectorTypeContext::SEMICOLON()
{
    return getToken(anceParser::SEMICOLON, 0);
}

tree::TerminalNode* anceParser::VectorTypeContext::INTEGER()
{
    return getToken(anceParser::INTEGER, 0);
}

size_t anceParser::VectorTypeContext::getRuleIndex() const
{
    return anceParser::RuleVectorType;
}

std::any anceParser::VectorTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVectorType(this);
    else return visitor->visitChildren(this);
}

anceParser::VectorTypeContext* anceParser::vectorType()
{
    VectorTypeContext* _localctx = _tracker.createInstance<VectorTypeContext>(_ctx, getState());
    enterRule(_localctx, 116, anceParser::RuleVectorType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(650);
        match(anceParser::T__35);
        setState(651);
        type();
        setState(652);
        match(anceParser::SEMICOLON);
        setState(653);
        match(anceParser::INTEGER);
        setState(654);
        match(anceParser::T__36);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- KeywordTypeContext ------------------------------------------------------------------

anceParser::KeywordTypeContext::KeywordTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

anceParser::FloatingPointTypeContext* anceParser::KeywordTypeContext::floatingPointType()
{
    return getRuleContext<anceParser::FloatingPointTypeContext>(0);
}

anceParser::TargetDependentTypeContext* anceParser::KeywordTypeContext::targetDependentType()
{
    return getRuleContext<anceParser::TargetDependentTypeContext>(0);
}

anceParser::BooleanTypeContext* anceParser::KeywordTypeContext::booleanType()
{
    return getRuleContext<anceParser::BooleanTypeContext>(0);
}

anceParser::NullPointerTypeContext* anceParser::KeywordTypeContext::nullPointerType()
{
    return getRuleContext<anceParser::NullPointerTypeContext>(0);
}

anceParser::VoidTypeContext* anceParser::KeywordTypeContext::voidType()
{
    return getRuleContext<anceParser::VoidTypeContext>(0);
}

size_t anceParser::KeywordTypeContext::getRuleIndex() const
{
    return anceParser::RuleKeywordType;
}

std::any anceParser::KeywordTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitKeywordType(this);
    else return visitor->visitChildren(this);
}

anceParser::KeywordTypeContext* anceParser::keywordType()
{
    KeywordTypeContext* _localctx = _tracker.createInstance<KeywordTypeContext>(_ctx, getState());
    enterRule(_localctx, 118, anceParser::RuleKeywordType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        setState(661);
        _errHandler->sync(this);
        switch (_input->LA(1))
        {
            case anceParser::T__60:
            case anceParser::T__61:
            case anceParser::T__62:
            case anceParser::T__63:
            {
                enterOuterAlt(_localctx, 1);
                setState(656);
                floatingPointType();
                break;
            }

            case anceParser::T__56:
            case anceParser::T__57:
            case anceParser::T__58:
            case anceParser::T__64:
            {
                enterOuterAlt(_localctx, 2);
                setState(657);
                targetDependentType();
                break;
            }

            case anceParser::T__65:
            {
                enterOuterAlt(_localctx, 3);
                setState(658);
                booleanType();
                break;
            }

            case anceParser::T__66:
            {
                enterOuterAlt(_localctx, 4);
                setState(659);
                nullPointerType();
                break;
            }

            case anceParser::T__67:
            {
                enterOuterAlt(_localctx, 5);
                setState(660);
                voidType();
                break;
            }

            default:
                throw NoViableAltException(this);
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FloatingPointTypeContext ------------------------------------------------------------------

anceParser::FloatingPointTypeContext::FloatingPointTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::FloatingPointTypeContext::getRuleIndex() const
{
    return anceParser::RuleFloatingPointType;
}

std::any anceParser::FloatingPointTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitFloatingPointType(this);
    else return visitor->visitChildren(this);
}

anceParser::FloatingPointTypeContext* anceParser::floatingPointType()
{
    FloatingPointTypeContext* _localctx = _tracker.createInstance<FloatingPointTypeContext>(_ctx, getState());
    enterRule(_localctx, 120, anceParser::RuleFloatingPointType);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(663);
        _la = _input->LA(1);
        if (!(((((_la - 61) & ~0x3fULL) == 0)
               && ((1ULL << (_la - 61))
                   & ((1ULL << (anceParser::T__60 - 61)) | (1ULL << (anceParser::T__61 - 61))
                      | (1ULL << (anceParser::T__62 - 61)) | (1ULL << (anceParser::T__63 - 61))))
                      != 0)))
        {
            _errHandler->recoverInline(this);
        }
        else
        {
            _errHandler->reportMatch(this);
            consume();
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TargetDependentTypeContext ------------------------------------------------------------------

anceParser::TargetDependentTypeContext::TargetDependentTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::TargetDependentTypeContext::getRuleIndex() const
{
    return anceParser::RuleTargetDependentType;
}

std::any anceParser::TargetDependentTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitTargetDependentType(this);
    else return visitor->visitChildren(this);
}

anceParser::TargetDependentTypeContext* anceParser::targetDependentType()
{
    TargetDependentTypeContext* _localctx = _tracker.createInstance<TargetDependentTypeContext>(_ctx, getState());
    enterRule(_localctx, 122, anceParser::RuleTargetDependentType);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(665);
        _la = _input->LA(1);
        if (!(((((_la - 57) & ~0x3fULL) == 0)
               && ((1ULL << (_la - 57))
                   & ((1ULL << (anceParser::T__56 - 57)) | (1ULL << (anceParser::T__57 - 57))
                      | (1ULL << (anceParser::T__58 - 57)) | (1ULL << (anceParser::T__64 - 57))))
                      != 0)))
        {
            _errHandler->recoverInline(this);
        }
        else
        {
            _errHandler->reportMatch(this);
            consume();
        }
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BooleanTypeContext ------------------------------------------------------------------

anceParser::BooleanTypeContext::BooleanTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::BooleanTypeContext::getRuleIndex() const
{
    return anceParser::RuleBooleanType;
}

std::any anceParser::BooleanTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitBooleanType(this);
    else return visitor->visitChildren(this);
}

anceParser::BooleanTypeContext* anceParser::booleanType()
{
    BooleanTypeContext* _localctx = _tracker.createInstance<BooleanTypeContext>(_ctx, getState());
    enterRule(_localctx, 124, anceParser::RuleBooleanType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(667);
        match(anceParser::T__65);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- NullPointerTypeContext ------------------------------------------------------------------

anceParser::NullPointerTypeContext::NullPointerTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::NullPointerTypeContext::getRuleIndex() const
{
    return anceParser::RuleNullPointerType;
}

std::any anceParser::NullPointerTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitNullPointerType(this);
    else return visitor->visitChildren(this);
}

anceParser::NullPointerTypeContext* anceParser::nullPointerType()
{
    NullPointerTypeContext* _localctx = _tracker.createInstance<NullPointerTypeContext>(_ctx, getState());
    enterRule(_localctx, 126, anceParser::RuleNullPointerType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(669);
        match(anceParser::T__66);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VoidTypeContext ------------------------------------------------------------------

anceParser::VoidTypeContext::VoidTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t anceParser::VoidTypeContext::getRuleIndex() const
{
    return anceParser::RuleVoidType;
}

std::any anceParser::VoidTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitVoidType(this);
    else return visitor->visitChildren(this);
}

anceParser::VoidTypeContext* anceParser::voidType()
{
    VoidTypeContext* _localctx = _tracker.createInstance<VoidTypeContext>(_ctx, getState());
    enterRule(_localctx, 128, anceParser::RuleVoidType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(671);
        match(anceParser::T__67);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CustomTypeContext ------------------------------------------------------------------

anceParser::CustomTypeContext::CustomTypeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* anceParser::CustomTypeContext::IDENTIFIER()
{
    return getToken(anceParser::IDENTIFIER, 0);
}

size_t anceParser::CustomTypeContext::getRuleIndex() const
{
    return anceParser::RuleCustomType;
}

std::any anceParser::CustomTypeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<anceVisitor*>(visitor)) return parserVisitor->visitCustomType(this);
    else return visitor->visitChildren(this);
}

anceParser::CustomTypeContext* anceParser::customType()
{
    CustomTypeContext* _localctx = _tracker.createInstance<CustomTypeContext>(_ctx, getState());
    enterRule(_localctx, 130, anceParser::RuleCustomType);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try
    {
        enterOuterAlt(_localctx, 1);
        setState(673);
        match(anceParser::IDENTIFIER);
    }
    catch (RecognitionException& e)
    {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

bool anceParser::sempred(RuleContext* context, size_t ruleIndex, size_t predicateIndex)
{
    switch (ruleIndex)
    {
        case 26:
            return expressionSempred(antlrcpp::downCast<ExpressionContext*>(context), predicateIndex);

        default:
            break;
    }
    return true;
}

bool anceParser::expressionSempred(ExpressionContext* _localctx, size_t predicateIndex)
{
    switch (predicateIndex)
    {
        case 0:
            return precpred(_ctx, 10);
        case 1:
            return precpred(_ctx, 9);
        case 2:
            return precpred(_ctx, 8);
        case 3:
            return precpred(_ctx, 7);
        case 4:
            return precpred(_ctx, 6);
        case 5:
            return precpred(_ctx, 5);
        case 6:
            return precpred(_ctx, 20);
        case 7:
            return precpred(_ctx, 19);
        case 8:
            return precpred(_ctx, 18);

        default:
            break;
    }
    return true;
}

void anceParser::initialize()
{
    std::call_once(anceParserOnceFlag, anceParserInitialize);
}
